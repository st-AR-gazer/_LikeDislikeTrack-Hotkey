/**
 * TrackVote library
 */
#Const Version "1.0.0"
#Const ScriptName "Libs/Nadeo/TMGame/Modes/TrackVote.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// MARK: Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "Libs/Nadeo/CMGame/Components/ExpendableButtonBase.Script.txt" as ExpendableButton
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Stylesheet.Script.txt" as Stylesheet
#Include "ColorLib" as CL

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// MARK: Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Thumb icons
#Const C_Icon_ThumbUp_Empty ""
#Const C_Icon_ThumbUp_Full ""
#Const C_Icon_ThumbDown_Empty ""
#Const C_Icon_ThumbDown_Full ""

// Voting values from the API
#Const C_VoteAPI_Dislike -1
#Const C_VoteAPI_NoVote 0
#Const C_VoteAPI_Like 1

// Translations
// L16N [Track vote] Vote to dislike the current track.
#Const C_Text_DislikeTrack _("Dislike track")
// L16N [Track vote] Vote to like the current track.
#Const C_Text_LikeTrack _("Like track")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// MARK: Private functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the like and dislike buttons depending on the current choice
Void Private_UpdateLikeAndDislikeButtons(CMlFrame _Button_VoteLike, CMlFrame _Button_VoteDislike, Integer _Choice) {
	// Update 'Like' button
	if (_Choice == C_VoteAPI_Like) {
		ExpendableButton::SetText(This, _Button_VoteLike, C_Icon_ThumbUp_Full, False);
		ExpendableButton::SetTextOpacityUnfocused(This, _Button_VoteLike, 0.8, False);
		ExpendableButton::SetTextColorFocused(This, _Button_VoteLike, CL::Hex6ToRgb(Stylesheet::C_ColorHex6_White), False);
		ExpendableButton::SetTextColorUnfocused(This, _Button_VoteLike, CL::Hex6ToRgb(Stylesheet::C_ColorHex6_White), False);
		ExpendableButton::SetBackgroundColorFocused(This, _Button_VoteLike, CL::Hex6ToRgb(Stylesheet::C_ColorHex6_GreenTwo), False);
		ExpendableButton::SetBackgroundColorUnfocused(This, _Button_VoteLike, CL::Hex6ToRgb(Stylesheet::C_ColorHex6_GreenTwo));
	} else {
		ExpendableButton::SetText(This, _Button_VoteLike, C_Icon_ThumbUp_Empty, False);
		ExpendableButton::ResetTextOpacityUnfocused(This, _Button_VoteLike, False);
		ExpendableButton::ResetTextColorFocused(This, _Button_VoteLike, False);
		ExpendableButton::ResetTextColorUnfocused(This, _Button_VoteLike, False);
		ExpendableButton::ResetBackgroundColorFocused(This, _Button_VoteLike, False);
		ExpendableButton::ResetBackgroundColorUnfocused(This, _Button_VoteLike);
	}

	// Update 'Dislike' button
	if (_Choice == C_VoteAPI_Dislike) {
		ExpendableButton::SetText(This, _Button_VoteDislike, C_Icon_ThumbDown_Full, False);
		ExpendableButton::SetTextOpacityUnfocused(This, _Button_VoteDislike, 0.8, False);
		ExpendableButton::SetTextColorFocused(This, _Button_VoteDislike, CL::Hex6ToRgb(Stylesheet::C_ColorHex6_White), False);
		ExpendableButton::SetTextColorUnfocused(This, _Button_VoteDislike, CL::Hex6ToRgb(Stylesheet::C_ColorHex6_White), False);
		ExpendableButton::SetBackgroundColorFocused(This, _Button_VoteDislike, CL::Hex6ToRgb(Stylesheet::C_ColorHex6_Red), False);
		ExpendableButton::SetBackgroundColorUnfocused(This, _Button_VoteDislike, CL::Hex6ToRgb(Stylesheet::C_ColorHex6_Red));
	} else {
		ExpendableButton::SetText(This, _Button_VoteDislike, C_Icon_ThumbDown_Empty, False);
		ExpendableButton::ResetTextOpacityUnfocused(This, _Button_VoteDislike, False);
		ExpendableButton::ResetTextColorFocused(This, _Button_VoteDislike, False);
		ExpendableButton::ResetTextColorUnfocused(This, _Button_VoteDislike, False);
		ExpendableButton::ResetBackgroundColorFocused(This, _Button_VoteDislike, False);
		ExpendableButton::ResetBackgroundColorUnfocused(This, _Button_VoteDislike);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// MARK: Public functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void UpdateLikeAndDislikeButtonsWithLastestVote(CMlScript _This, CMap _Map, CMlFrame _Button_VoteLike, CMlFrame _Button_VoteDislike) {
	if (_Map != Null && _Map.MapInfo != Null) {
		Private_UpdateLikeAndDislikeButtons(_Button_VoteLike, _Button_VoteDislike, _This.DataFileMgr.Map_NadeoServices_GetVote(MainUser::GetMainUserId(), _Map.MapInfo.MapUid));
	}
}

/// Vote to like the given track and update associated buttons
Void LikeTrack(CMlScript _This, CMap _Map, CMlFrame _Button_VoteLike, CMlFrame _Button_VoteDislike) {
	if (_Map != Null && _Map.MapInfo != Null) {
		if (DataFileMgr.Map_NadeoServices_GetVote(MainUser::GetMainUserId(), _Map.MapInfo.MapUid) != C_VoteAPI_Like) {
			_This.DataFileMgr.Map_NadeoServices_Vote(MainUser::GetMainUserId(), _Map.MapInfo.MapUid, C_VoteAPI_Like);
			Private_UpdateLikeAndDislikeButtons(_Button_VoteLike, _Button_VoteDislike, C_VoteAPI_Like);
		} else {
			_This.DataFileMgr.Map_NadeoServices_Vote(MainUser::GetMainUserId(), _Map.MapInfo.MapUid, C_VoteAPI_NoVote);
			Private_UpdateLikeAndDislikeButtons(_Button_VoteLike, _Button_VoteDislike, C_VoteAPI_NoVote);
		}
	}
}

/// Vote to dislike the given track and update associated buttons
Void DislikeTrack(CMlScript _This, CMap _Map, CMlFrame _Button_VoteLike, CMlFrame _Button_VoteDislike) {
	if (_Map != Null && _Map.MapInfo != Null) {
		if (DataFileMgr.Map_NadeoServices_GetVote(MainUser::GetMainUserId(), _Map.MapInfo.MapUid) != C_VoteAPI_Dislike) {
			_This.DataFileMgr.Map_NadeoServices_Vote(MainUser::GetMainUserId(), _Map.MapInfo.MapUid, C_VoteAPI_Dislike);
			Private_UpdateLikeAndDislikeButtons(_Button_VoteLike, _Button_VoteDislike, C_VoteAPI_Dislike);
		} else {
			_This.DataFileMgr.Map_NadeoServices_Vote(MainUser::GetMainUserId(), _Map.MapInfo.MapUid, C_VoteAPI_NoVote);
			Private_UpdateLikeAndDislikeButtons(_Button_VoteLike, _Button_VoteDislike, C_VoteAPI_NoVote);
		}
	}
}