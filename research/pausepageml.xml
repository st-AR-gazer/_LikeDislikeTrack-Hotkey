
<manialink name="UIModule_Campaign_PauseMenu" version="3">

<!-- @Component start share-menu-navigation -->
<framemodel id="share-menu-navigation">
		</framemodel>
<!-- @Component end share-menu-navigation -->

<!-- @Component start component-navigation -->
<framemodel id="component-navigation">
		</framemodel>
<!-- @Component end component-navigation -->

<!-- @Component start component-loadingspinner -->
<framemodel id="component-loadingspinner">
<quad id="menu-libs-loading-spinner_quad-dimmer" size="320 180" halign="center" valign="center" bgcolor="000514" opacity="0.8" fullscreen="1" z-index="0" hidden="1"/>
<quad id="menu-libs-loading-spinner_quad-loading" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/CMGame/Components/LoadingSpinner/LoadingSpinner.dds" size="15 15" z-index="1" hidden="1"/>
<label id="menu-libs-loading-spinner_label-loading" pos="0 -15" halign="center" valign="center2" size="150 15" textfont="GameFontRegular" textcolor="fff" textprefix="$i" textsize="5" z-index="1"/>
	</framemodel>
<!-- @Component end component-loadingspinner -->

<!-- @Component start component-trackmania-button -->
<framemodel id="component-trackmania-button">
<frame class="Trackmania_Button_frame-button-container" id="Trackmania_Button_frame-align">
	<frame id="Trackmania_Button_frame-background">
		<quad id="Trackmania_Button_quad-image" bgcolor="005948" size="40 10" z-index="0" />
		<quad id="Trackmania_Button_quad-gradient" z-index="1" hidden="1" />
		<quad id="Trackmania_Button_quad-contour" z-index="2" hidden="1" />
		<frame id="Trackmania_Button_frame-hitbox-clip">
			<quad id="ComponentTrackmania_Button_quad-background" class="component-navigation-item-zone" size="40 10" scriptevents="1" />
		</frame>
		<quad id="Trackmania_Button_quad-focus-background" z-index="1" size="40 10" bgcolor="005948" hidden="1" />
	</frame>
	<frame id="Trackmania_Button_frame-content" z-index="1">
		<frame id="Trackmania_Button_frame-icon" z-index="1">
			<quad id="Trackmania_Button_quad-icon" size="10 10" bgcolor="FFF" />
			<quad id="Trackmania_Button_quad-focus-icon" z-index="1" size="10 10" bgcolor="005948" hidden="1" />
		</frame>
		<label id="Trackmania_Button_label-value" pos="20 -5" z-index="10" size="39 9" halign="center" valign="center2" textsize="3" textprefix="$t$i" textfont="GameFontSemiBold" textcolor="FFF" />
	</frame>
	<frameinstance id="Trackmania_Button_spinner-loading" modelid="component-loadingspinner" z-index="2" />
</frame>
	</framemodel>
<!-- @Component end component-trackmania-button -->

<!-- @Component start component-cmgame-expendable-button -->
<framemodel id="component-cmgame-expendable-button">
<frame id="menu-libs-expendable-button_frame-button-align" class="menu-libs-expendable-button_expendable-button">
	<frame id="menu-libs-expendable-button_frame-button-align" z-index="0">
		<quad id="menu-libs-expendable-button_quad-bg-left" />
		<quad id="menu-libs-expendable-button_quad-bg-center" />
		<quad id="menu-libs-expendable-button_quad-bg-right" />
	</frame>
	<frame id="menu-libs-expendable-button_frame-focus" z-index="1">
		<quad id="menu-libs-expendable-button_quad-focus-left" opacity="0" />
		<quad id="menu-libs-expendable-button_quad-focus-center" opacity="0" />
		<quad id="menu-libs-expendable-button_quad-focus-right" opacity="0" />
	</frame>
	<quad id="menu-libs-expendable-button_quad-button-icon" z-index="2" valign="center" />
	<frame id="menu-libs-expendable-button_frame-button-text-align" z-index="3">
		<!--
		We MUST initialize the label with a textprefix value.
		Otherwise the `TextPrefix` property initialization in the
		script will be bugged. The latest `TextPrefix` applied
		will also be applied to all other labels that had their
		`TextPrefix` updated.
		-->
		<label id="menu-libs-expendable-button_label-button-text" valign="center2" textprefix="$z" />
	</frame>

	<frame id="menu-libs-expendable-button_frame-hitbox-clip" z-index="4" >
		<quad id="CMGame_ExpendableButton_quad-nav-zone" class="component-navigation-item-zone" z-index="4" halign="center" valign="center" bgcolor="ff0000" scriptevents="1" />
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-cmgame-expendable-button -->

<!-- @Component start component-trackmania-expendable-button -->
<framemodel id="component-trackmania-expendable-button">
		</framemodel>
<!-- @Component end component-trackmania-expendable-button -->

<!-- @Component start menu-libs-scroll -->
<framemodel id="menu-libs-scroll">
<frame class="menu-libs-scroll_scroll-widgets">
	<frameinstance id="menu-libs-scroll_frame-loading-spinner" modelid="component-loadingspinner" z-index="3"/>
	<label id="menu-libs-scroll_label-scroll-indicator" halign="center" valign="bottom" textsize="8" text="" hidden="1" scriptevents="1" />
	<quad id="menu-libs-scroll_quad-scroll-indicator" halign="center" valign="bottom" size="8 8" hidden="1" scriptevents="1" />
	<frame id="menu-libs-scroll_frame-scrollbar" hidden="1">
		<frame id="menu-libs-scroll_frame-scrollbar-during-scroll">
			<frame id="menu-libs-scroll_frame-scrollbar-bg" z-index="0">
				<quad id="menu-libs-scroll_quad-top" class="menu-libs-scroll_scrollbar-bg" halign="center" rot="180" opacity="0.3" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_TopBottom.dds" scriptevents="1" />
				<quad id="menu-libs-scroll_quad-center" class="menu-libs-scroll_scrollbar-bg" halign="center" opacity="0.3" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_Center.dds" scriptevents="1" />
				<quad id="menu-libs-scroll_quad-bottom" class="menu-libs-scroll_scrollbar-bg" halign="center" opacity="0.3" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_TopBottom.dds" scriptevents="1" />
			</frame>
			<frame id="menu-libs-scroll_frame-scrollbar-fg" z-index="1">
				<quad id="menu-libs-scroll_quad-top" class="menu-libs-scroll_scrollbar-fg" halign="center" rot="180" opacity="0.8" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_TopBottom.dds" scriptevents="1" />
				<quad id="menu-libs-scroll_quad-center" class="menu-libs-scroll_scrollbar-fg" halign="center" opacity="0.8" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_Center.dds" scriptevents="1" />
				<quad id="menu-libs-scroll_quad-bottom" class="menu-libs-scroll_scrollbar-fg" halign="center" opacity="0.8" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_TopBottom.dds" scriptevents="1" />
			</frame>
		</frame>
	</frame>
</frame>
	</framemodel>
<!-- @Component end menu-libs-scroll -->

<!-- @Component start component-button-icon-2 -->
<framemodel id="component-button-icon-2">
<frame id="button-icon-2_frame-mouse-visibility" class="button-icon-2_button-icon">
	<frame id="button-icon-2_frame-gamepad" z-index="1">
		<quad id="button-icon-2_quad-button-icon" keepratio="fit" />
	</frame>
	<frame id="button-icon-2_frame-keyboard" z-index="2">
		<quad id="button-icon-2_quad-key-icon" z-index="1" />
		<label id="button-icon-2_label-keyboard-key-name" z-index="2" halign="center" valign="center2" textsize="8" textcolor="ffffff" textfont="GameFontExtraBold" textprefix="$t" />
		<label id="button-icon-2_label-keyboard-key-enter" z-index="3" halign="center" valign="center2" textsize="8" textcolor="ffffff" textfont="GameFontExtraBold" textprefix="$t" text="|Keyboard|Enter" hidden="1" />
	</frame>
</frame>
		</framemodel>
<!-- @Component end component-button-icon-2 -->

<!-- @Component start component-buttonslist2 -->
<framemodel id="component-buttonslist2">
<framemodel id="ComponentButtonsList2_framemodel-button">
	<frameinstance modelid="component-button-icon-2" id="ComponentButtonsList2_button-icon-bind" data-size="8. 8." />
	<label id="ComponentButtonsList2_label-action" pos="5. -0.5" size="8. 8." valign="center2" textfont="GameFontExtraBold" textemboss="1"/>
</framemodel>
<frame class="ComponentButtonsList2_container">
	<frame id="ComponentButtonsList2_frame-align">
		<frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" />
	</frame>
</frame>
		</framemodel>
<!-- @Component end component-buttonslist2 -->

<!-- @Component start component-menu-button-list -->
<framemodel id="component-menu-button-list">
<frame id="ComponentMenuButtonList_frame-global">
	<frameinstance modelid="component-buttonslist2"
		id="ComponentMenuButtonList_frame-button-list"
		z-index="2"
		pos="160 -92"
		data-buttons="{&quot;A&quot;:&quot;|Action|Select&quot;,&quot;B&quot;:&quot;|Action|Back&quot;}"
		data-halign="right"
		data-valign="bottom"
		data-buttonmaxwidth="50."
		data-textprefix="$t"
		data-textfont="GameFontSemiBold"
		data-buttons-spacing="5."
	/>
</frame>
</framemodel>
<!-- @Component end component-menu-button-list -->

<!-- @Component start component-cmgame-menusounds -->
<framemodel id="component-cmgame-menusounds">
</framemodel>
<!-- @Component end component-cmgame-menusounds -->

<!-- @Component start component-credits -->
<framemodel id="component-credits">
<stylesheet>
	<style class="ComponentCredits_text-base" halign="center" valign="center2" textfont="GameFontRegular" textsize="3" textcolor="ffffff" textprefix="$t"/>
	<style class="ComponentCredits_text-jobtitle" halign="center" valign="center2" textfont="GameFontSemiBold" textsize="3.5" textcolor="6EFAA0" textprefix="$i$t"/>
	<style class="ComponentCredits_text-entity" halign="center" valign="center2" textfont="GameFontExtraBold" textsize="5" textcolor="009B5F" textprefix="$t"/>
	<style class="ComponentCredits_text-location" halign="center" valign="center2" textfont="GameFontExtraBold" textsize="8" textcolor="005F46" textprefix="$t"/>
	<style class="ComponentCredits_text-title" halign="center" valign="center2" textfont="GameFontExtraBold" textsize="10" textcolor="ffffff" textprefix="$i$t"/>
	<style class="ComponentCredits_text-licenses" textfont="GameFontRegular" textsize="3" textcolor="ffffff" />
</stylesheet>

<!-- One line of credit in the scroll -->
<framemodel id="ComponentCredits_framemodel-credit-line">
	<label id="ComponentCredits_label-location" class="ComponentCredits_text-location" pos="125. -3.71429" size="250. 130." translate="1" hidden="1" />
	<label id="ComponentCredits_label-entity" class="ComponentCredits_text-entity" pos="125. -5.94286" size="250. 130." translate="1" hidden="1" />
	<label id="ComponentCredits_label-jobtitle" class="ComponentCredits_text-jobtitle" pos="125. -5.2" size="250. 130." translate="1" hidden="1" />
	<label id="ComponentCredits_label-person" class="ComponentCredits_text-base" pos="125. 0.742857" size="250. 130." valign="top" maxline="3" translate="1" hidden="1" />
</framemodel>

<frame id="ComponentCredits_frame-global" class="component-navigation-item" data-nav-inputs="cancel;up;down" data-nav-targets="_;_;_" data-nav-group="navgroup-component-credits-global">
	<!-- Background -->
	<quad id="ComponentCredits_capture-mouse-events" size="320 180" z-index="-3" halign="center" valign="center" fullscreen="1" scriptevents="1" />
	<quad size="320 180" z-index="-2" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageCredits/Menu_Credits_Background.dds" fullscreen="1" />
	<quad size="320 180" z-index="-1" halign="center" valign="center" bgcolor="000514" opacity="0.4" fullscreen="1" />

	<!-- Page title -->
	<label class="ComponentCredits_text-title" text="Credits" pos="0 80" size="300 10" />

	<!-- Credits scroll -->
	<frameinstance modelid="menu-libs-scroll" data-scroll-parent="ComponentCredits_scroll-credits" z-index="1" />
	<frame
		id="ComponentCredits_scroll-credits"
		pos="-125. 70."
		data-elements-per-line="1"
		data-elements-per-page="14"
		data-element-size="250. 7.42857"
		data-margin-size="2. 2."
		data-window-size="250. 130."
		data-scroll-indicator-y-offset="-18."
		data-scroll-indicator-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_BOTTOM.dds"
		data-scroll-indicator-colorize="FFFFFF"
		data-scroll-indicator-size="10"
		data-scrollbar-xoffset="25."
		class="menu-libs-scroll-window"
	>
		<quad z-index="-1" scriptevents="1" class="menu-libs-scroll-event" />
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
			<frameinstance modelid="ComponentCredits_framemodel-credit-line" class="menu-libs-scroll-element" hidden="1"/>
		
		<frame class="menu-libs-scroll-footer">
			<label class="ComponentCredits_text-location" pos="125. -15" size="250. 130." text="|Software|Licenses" />
			<label id="ComponentCredits_label-licenses" class="ComponentCredits_text-licenses" pos="0 -25" size="250. 130." autonewline="1" />
		</frame>
	</frame>

	<!-- Back button -->
	<frame pos="-151.5 -73" z-index="2">
		<frameinstance modelid="component-button-icon-2" z-index="2" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="ComponentCredits_button-back"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item component-menusounds-item"
			z-index="1"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable component-trackmania-expendable-button-style-align-center component-trackmania-expendable-button-style-page-back"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-group="navgroup-component-credits-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-menusounds-selectsound="BackButtonSelect"
		/>
	</frame>

	<!-- Partners logos -->
	<quad id="ComponentCredits_quad-logo-vivox" pos="130 -73" size="48.75 20." autoscale="0" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Logo/VivoxLogo.dds" />

	<!-- Controller info -->
	<frameinstance modelid="component-menu-button-list" id="ComponentCredits_button-list-credits" z-index="2" />
</frame>
		</framemodel>
<!-- @Component end component-credits -->

<!-- @Component start structures-matchmaking -->
<framemodel id="structures-matchmaking">
		</framemodel>
<!-- @Component end structures-matchmaking -->

<!-- @Component start lib-user-store -->
<framemodel id="lib-user-store">
		</framemodel>
<!-- @Component end lib-user-store -->

<!-- @Component start lib-http-struct -->
<framemodel id="lib-http-struct">
		</framemodel>
<!-- @Component end lib-http-struct -->

<!-- @Component start structures-club -->
<framemodel id="structures-club">
		</framemodel>
<!-- @Component end structures-club -->

<!-- @Component start lib-campaign-struct -->
<framemodel id="lib-campaign-struct">
		</framemodel>
<!-- @Component end lib-campaign-struct -->

<!-- @Component start lib-map-store -->
<framemodel id="lib-map-store">
		</framemodel>
<!-- @Component end lib-map-store -->

<!-- @Component start component-trackmania-favoritemapstools -->
<framemodel id="component-trackmania-favoritemapstools">
		</framemodel>
<!-- @Component end component-trackmania-favoritemapstools -->

<!-- @Component start component-maniapubs -->
<framemodel id="component-maniapubs">
<framemodel id="ComponentManiapubs_framemodel-ads">
	<quad id="ComponentManiapubs_quad-image" halign="center" valign="center" z-index="1"/>
	<quad id="ComponentManiapubs_quad-contour" colorize="005F46" halign="center" valign="center" z-index="2"/>
</framemodel>

<frame class="ComponentManiapubs_frame-container-maniapubs">
	<frame z-index="1" id="ComponentManiapubs_frame-navigation-container" class="component-navigation-container">
		<quad id="ComponentManiapubs_quad-activation" class="component-navigation-item-zone" pos="0. -55." size="92.1429 10." halign="center" valign="center" z-index="10" opacity="0" scriptevents="1"/>
		<frame id="ComponentManiapubs_frame-maniapub-mask" size="140. 90." halign="center" valign="center">
			<frame id="ComponentManiapubs_frame-maniapub-window">
				
			<frame class="ComponentManiapubs_C_Class_Slide">
				<frameinstance modelid="ComponentManiapubs_framemodel-ads" id="ComponentManiapubs_frame-ad-64x10"/>
				<frameinstance modelid="ComponentManiapubs_framemodel-ads" id="ComponentManiapubs_frame-ad-2x3"/>
				<frameinstance modelid="ComponentManiapubs_framemodel-ads" id="ComponentManiapubs_frame-ad-64x41"/>
			</frame>
		
			<frame class="ComponentManiapubs_C_Class_Slide">
				<frameinstance modelid="ComponentManiapubs_framemodel-ads" id="ComponentManiapubs_frame-ad-64x10"/>
				<frameinstance modelid="ComponentManiapubs_framemodel-ads" id="ComponentManiapubs_frame-ad-2x3"/>
				<frameinstance modelid="ComponentManiapubs_framemodel-ads" id="ComponentManiapubs_frame-ad-64x41"/>
			</frame>
		
			</frame>
		</frame>
		<frame id="ComponentManiapubs_frame-maniapub-controls" pos="0. -55.">
			<frameinstance
				modelid="component-trackmania-button" id="ComponentManiapubs_button-slide-previous"
				class="component-navigation-item component-menusounds-item ComponentManiapubs_leave-maniapub"
				pos="-41.0714 0"
				data-size="10. 10."
				data-bgcolor="FFF"
				data-opacityunfocus="0.6"
				data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
				data-focuscolor="FFFFFF"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;pageup;pagedown;right"
				data-nav-targets="_;_;_;_;ComponentManiapubs_button-slide-title"
				data-nav-group="ComponentManiapubs_NavGroup"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				data-menusounds-selectsound="ArrowSelect"
			/>
			<frameinstance
				modelid="component-trackmania-button" id="ComponentManiapubs_button-slide-title"
				class="component-navigation-item ComponentManiapubs_leave-maniapub"
				data-size="72.1429 10."
				data-labelsize="52.1429 10."
				data-fitlabel="3" data-fitlabelstep="0.25"
				data-opacityunfocus=".6"
				data-bgcolor="005F46"
				data-focuscolor="FFFFFF"
				data-image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Common/Common_Entry_BG.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/Trackmania/Menus/Common/Common_Entry_BG.dds"
				data-iconcolortype="1"
				data-icon="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/icons_128_settings_link.dds"
				data-iconfocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/icons_128_settings_link.dds"
				data-iconfocuscolor="000A05"
				data-iconxpos=".12" data-iconypos="-.49"
				data-iconopacityunfocus=".6"
				data-textsize="4.5"
				data-textitalicslope=".2"
				data-textopacityunfocus=".6"
				data-textxpos="0.57" data-textypos="-0.55"
				data-textfont="GameFontExtraBold"
				data-textfocuscolor="000A05"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;pageup;pagedown;left;right"
				data-nav-targets="_;_;_;_;ComponentManiapubs_button-slide-previous;ComponentManiapubs_button-slide-next"
				data-nav-group="ComponentManiapubs_NavGroup"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
			/>
			<frameinstance
				modelid="component-trackmania-button" id="ComponentManiapubs_button-slide-next"
				class="component-navigation-item component-menusounds-item ComponentManiapubs_leave-maniapub"
				pos="41.0714 0"
				data-size="10. 10."
				data-bgcolor="FFF"
				data-opacityunfocus="0.6"
				data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
				data-focuscolor="FFFFFF"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;pageup;pagedown;left"
				data-nav-targets="_;_;_;_;ComponentManiapubs_button-slide-title"
				data-nav-group="ComponentManiapubs_NavGroup"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				data-menusounds-selectsound="ArrowSelect"
			/>
		</frame>
	</frame>
</frame>
		</framemodel>
<!-- @Component end component-maniapubs -->

<!-- @Component start pause-menu-online -->
<framemodel id="pause-menu-online">
		</framemodel>
<!-- @Component end pause-menu-online -->

<!-- @Component start component-checkbox -->
<framemodel id="component-checkbox">
<frame id="trackmania-checkbox_frame-checkbox-align" class="trackmania-checkbox_frame-container-checkbox">
	<quad id="trackmania-checkbox_quad-activation" class="component-navigation-item-zone" halign="center" valign="center" z-index="1" opacity="0" scriptevents="1"/>
	<quad id="trackmania-checkbox_quad-icon" bgcolor="FFF" halign="center" valign="center" size="7 7" />
	<label id="trackmania-checkbox_label-checkbox" size="50 10" halign="center" valign="center2" textsize="3" textcolor="FFF" textprefix="$t$i" textfont="GameFontSemiBold"/>
	<label id="trackmania-checkbox_label-mirror-checkbox" size="50 10" halign="center" valign="center2" textsize="3" textcolor="FFF" textprefix="$t$i" textfont="GameFontSemiBold"/>
</frame>
	</framemodel>
<!-- @Component end component-checkbox -->

<!-- @Component start component-trackmania-pop-up-background-2 -->
<framemodel id="component-trackmania-pop-up-background-2">
<frame class="trackmania-pop-up-background-2_pop-up-background">
	<quad id="trackmania-pop-up-background-2_quad-dimmer" z-index="0" size="320 180" halign="center" valign="center" fullscreen="1" scriptevents="1" />
	<frame id="trackmania-pop-up-background-2_frame-background" z-index="2">
		<frame id="trackmania-pop-up-background-2_frame-align">
			<quad id="trackmania-pop-up-background-2_quad-background" z-index="0" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PopUp/Common_MainPopup.dds" opacity="0.95"/>
			<quad id="trackmania-pop-up-background-2_quad-header-image" z-index="1" halign="right" alphamask="file://Media/Manialinks/Nadeo/Trackmania/Menus/PopUp/Common_MainPopup_Header_Mask.dds" />
			<quad id="trackmania-pop-up-background-2_quad-header-gradient" z-index="2" halign="right" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PopUp/Common_MainPopup_Header_Gradient.dds" />
			<quad id="trackmania-pop-up-background-2_button-leave" z-index="3" image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/256x256/Icones_256_icon_cross_oblique.dds" size="7 7" halign="center" valign="center" colorize="FFF" scriptevents="1" />
			<frame id="trackmania-pop-up-background-2_frame-background-hitbox" z-index="2">
				<quad id="trackmania-pop-up-background-2_quad-background-hitbox" rot="10." halign="right" scriptevents="1" />
			</frame>
		</frame>
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-trackmania-pop-up-background-2 -->

<!-- @Component start component-cmgame-selector -->
<framemodel id="component-cmgame-selector">
<frame id="menu-libs-selector_frame-selector-align" class="menu-libs-selector_selector">
	<frame id="menu-libs-selector_frame-navigation-container" class="component-navigation-container" z-index="1" >
		<quad id="CMGame_Selector_quad-nav-zone" class="component-navigation-item-zone" halign="center" valign="center" bgcolor="ff0000" scriptevents="1" z-index="10"/>
		<frame
			id="menu-libs-selector_frame-selector-focus"
			class="component-navigation-item"
			data-nav-group="CMGame_Selector_NavGroup"
			data-nav-inputs="left;right"
			data-nav-targets="_;_"
		>
			<quad id="menu-libs-selector_button-previous" class="CMGame_Selector_Class_ChoiceButton" image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds" colorize="FFFFFF" opacity="0.6" halign="left" valign="center" scriptevents="1" z-index="0"/>
			<label id="menu-libs-selector_label-value" pos="0 -0.3" textfont="GameFontRegular" textcolor="FFFFFF" textprefix="$i$t" opacity="0.6" halign="center" valign="center2" z-index="1"/>
			<quad id="menu-libs-selector_button-next" class="CMGame_Selector_Class_ChoiceButton" image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds" colorize="FFFFFF" opacity="0.6" halign="right" valign="center" scriptevents="1" z-index="0"/>
		</frame>
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-cmgame-selector -->

<!-- @Component start component-textfield -->
<framemodel id="component-textfield">
<stylesheet>
	<style class="cmgame-text-field_quad-default" halign="center" valign="center"/>
	<style class="cmgame-text-field_text-default" halign="center" valign="center2" textfont="GameFontSemiBold" textsize="3" textcolor="FFF"/>
</stylesheet>

<frame id="cmgame-text-field_frame-text-field-align" class="cmgame-text-field_frame-container-text-field">
	<quad id="CMGame_TextField_quad-activation" class="component-navigation-item-zone cmgame-text-field_quad-default" scriptevents="1" opacity="0" z-index="10"/>
	<entry id="cmgame-text-field_entry-label" size="110 10" class="cmgame-text-field_text-default" focusareacolor1="00000000" focusareacolor2="00000000" textsize="5"/>
	<textedit id="cmgame-text-field_textedit-label" size="110 28" pos="0 -1.5" class="cmgame-text-field_text-default" focusareacolor1="00000000" focusareacolor2="00000000" textsize="5." linespacing="1.1" hidden="1"/>
	<frameinstance id="cmgame-text-field_button-background" modelid="component-cmgame-expendable-button" data-styles="component-trackmania-expendable-button-style-stack component-trackmania-expendable-button-style-align-center" z-index="-1"/>
</frame>
	</framemodel>
<!-- @Component end component-textfield -->

<!-- @Component start component-popupmultichoice -->
<framemodel id="component-popupmultichoice">
<frame class="trackmania-pop-up-multi-choice_popupmultichoice">
	<frame z-index="1" id="trackmania-pop-up-multi-choice_navcontainer" class="component-navigation-container">
		<frameinstance id="trackmania-pop-up-multi-choice_frame-background" modelid="component-trackmania-pop-up-background-2" data-styles="secondary-pop-up-with-header" z-index="0"/>
		<label id="trackmania-pop-up-multi-choice_label-title" halign="center" valign="center2" textcolor="FFFFFF" z-index="1"/>
		<frame id="trackmania-pop-up-multi-choice_frame-description-container" class="component-grid-container" z-index="1">
			
			<label id="trackmania-pop-up-multi-choice_label-description-line-0" class="component-grid-element" data-grid-row="0" textprefix="$z" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>
		
			<label id="trackmania-pop-up-multi-choice_label-description-line-1" class="component-grid-element" data-grid-row="1" textprefix="$z" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>
		
			<label id="trackmania-pop-up-multi-choice_label-description-line-2" class="component-grid-element" data-grid-row="2" textprefix="$z" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>
		
			<label id="trackmania-pop-up-multi-choice_label-description-line-3" class="component-grid-element" data-grid-row="3" textprefix="$z" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>
		
		</frame>
		<frame id="trackmania-pop-up-multi-choice_frame-description-debug" z-index="2" hidden="1">
			
			<quad id="trackmania-pop-up-multi-choice_quad-description-debug-0" bgcolor="FF0000" halign="center" valign="center" opacity="0.3" hidden="1"/>
		
			<quad id="trackmania-pop-up-multi-choice_quad-description-debug-1" bgcolor="FF0000" halign="center" valign="center" opacity="0.3" hidden="1"/>
		
			<quad id="trackmania-pop-up-multi-choice_quad-description-debug-2" bgcolor="FF0000" halign="center" valign="center" opacity="0.3" hidden="1"/>
		
			<quad id="trackmania-pop-up-multi-choice_quad-description-debug-3" bgcolor="FF0000" halign="center" valign="center" opacity="0.3" hidden="1"/>
		
		</frame>

		<frame id="trackmania-pop-up-multi-choice_frame-scroll-view" z-index="2">
			<frameinstance modelid="menu-libs-scroll" data-scroll-parent="trackmania-pop-up-multi-choice_frame-scroll-choices" z-index="1" />
			<frame
				id="trackmania-pop-up-multi-choice_frame-scroll-choices"
				pos="-51.1498 19."
				class="menu-libs-scroll-window component-navigation-item trackmania-pop-up-multi-choice_navigation"
				data-pager-page-size="10"
				data-elements-per-line="1"
				data-element-size="100. 10."
				data-margin-size="0. 0."
				data-window-size="100. 50."
				data-header-height="0."
				data-footer-height="0."
				data-scroll-indicator-x-offset="-5."
				data-scroll-indicator-y-offset="-9."
				data-scroll-indicator-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_BOTTOM_OBLIQUE.dds"
				data-scroll-indicator-colorize="FFFFFF"
				data-scroll-indicator-size="10"
				data-scrollbar-xoffset="10."
				data-scrollpadding="17.5"
				data-scroll-locked="1"
				data-skew="-10."
				data-skew-valign="1"
				data-nav-group="navgroup-component-popupmultichoice"
			>
				<quad z-index="-1" scriptevents="1" class="menu-libs-scroll-event" />
				
			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>
		
			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>
		
			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>
		
			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>
		
			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>
		
			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>
		
			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>
		
			</frame>
		</frame>

		<frameinstance
			id="trackmania-pop-up-multi-choice_button-first-choice" z-index="2"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item trackmania-pop-up-multi-choice_navigation"
			data-nav-inputs="select;cancel;right"
			data-nav-targets="_;_;trackmania-pop-up-multi-choice_button-second-choice"
			data-nav-group="navgroup-component-popupmultichoice"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
		<frameinstance
			id="trackmania-pop-up-multi-choice_button-second-choice" z-index="2"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item trackmania-pop-up-multi-choice_navigation"
			data-nav-inputs="select;cancel;left"
			data-nav-targets="_;_;trackmania-pop-up-multi-choice_button-first-choice"
			data-nav-group="navgroup-component-popupmultichoice"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-popupmultichoice -->

<!-- @Component start component-transition -->
<framemodel id="component-transition">
		</framemodel>
<!-- @Component end component-transition -->

<!-- @Component start component-form-select -->
<framemodel id="component-form-select">
<framemodel id="menu-libs-form-select_option">
	<quad id="menu-libs-form-select_button-option" pos="0.25 0" z-index="0" size="99.5 9." valign="center" opacity="0.4" scriptevents="1" />
	<label id="menu-libs-form-select_label-option" pos="3 0" z-index="1" size="88 8." valign="center2" opacity="0.4" textprefix="$t$i" textsize="3" />
</framemodel>
<frame class="menu-libs-form-select_container" data-option-size-y="9.">
	<frame id="menu-libs-form-select_selection" z-index="0">
		<quad id="menu-libs-form-select_toggle-bg2" pos="0.25 0" z-index="0" size="99.5 9.5" valign="center" opacity="0.4" />
		<quad id="menu-libs-form-select_toggle-bg" pos="92 0" z-index="1" size="7.5 9.5" valign="center" opacity="0.4" />
		<label id="menu-libs-form-select_toggle-fg" pos="96 0" z-index="2" size="7.5 9.5" halign="center" valign="center2" textprefix="$t$i" textsize="3" text="⏷" />
		<quad id="ComponentFormSelect_quad-toggle" z-index="3" size="100 10" valign="center" scriptevents="1" class="component-navigation-item-zone" />
		<label id="menu-libs-form-select_selected" pos="3 0" z-index="4" size="88 8" valign="center2" textprefix="$t$i" textsize="3" opacity="0.4" />
	</frame>
	<frame id="menu-libs-form-select_container-options" pos="0 -4.5" z-index="1">
		<quad id="menu-libs-form-select_options-bg" pos="0.25 -0.25" z-index="0" size="99.5 49.5" opacity="0.9" bgcolor="" scriptevents="1" />
		<frame id="menu-libs-form-select_clip-options" z-index="2">
			<frame id="menu-libs-form-select_options" pos="0 -5" z-index="2">
				<frameinstance pos="0 0." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -9." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -18." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -27." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -36." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -45." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -54." modelid="menu-libs-form-select_option" />
			</frame>
		</frame>
		<frame id="menu-libs-form-select_scrollbar" pos="99.75 -0.25" z-index="3">
			<quad id="menu-libs-form-select_scrollbar-bg" size="2 30" z-index="0" halign="right" bgcolor="000" opacity="0." scriptevents="1" />
			<quad id="menu-libs-form-select_scrollbar-fg" size="2 10" z-index="1" halign="right" bgcolor="FFF" bgcolorfocus="FFF" opacity="0.7" scriptevents="1" />
		</frame>
		<quad id="menu-libs-form-select_options-border" z-index="4" size="100 50" />
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-form-select -->

<!-- @Component start component-popupreportsystem -->
<framemodel id="component-popupreportsystem">
<stylesheet>
	<style class="trackmania-pop-up-report-system_text-semi-bold" halign="left" valign="center2" textfont="GameFontSemiBold" textsize="4" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="trackmania-pop-up-report-system_text-extra-bold" halign="left" valign="center2" textfont="GameFontExtraBold" textsize="13" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame global -->
<frame id="trackmania-pop-up-report-system_frame-global" class="trackmania-pop-up-report-system_popupreportsystem">
	<frame z-index="1" id="trackmania-pop-up-report-system_navigation-container" class="component-navigation-container">
		<frameinstance id="trackmania-pop-up-report-system_frame-background" modelid="component-trackmania-pop-up-background-2" z-index="-1"/>
		<label id="trackmania-pop-up-report-system_label-title" pos="-115.656 61.5" size="150 20" class="trackmania-pop-up-report-system_text-extra-bold" text="|Title|Report" z-index="1"/>
		<label id="trackmania-pop-up-report-system_label-first-choice" pos="-116.507 51." size="150 10" class="trackmania-pop-up-report-system_text-semi-bold" text="What do you want to report?" z-index="1"/>

		<!-- Drop down menu for report target -->
		<frameinstance
			id="trackmania-pop-up-report-system_frame-select-report-target" pos="-115.623 39."
			modelid="component-form-select"
			class="component-navigation-item"
			data-size="90. 11."
			data-scale-options="1"
			data-fontname="GameFontSemiBold"
			data-color-background="003228"
			data-color-text="FFF"
			data-custom-navigation="1"
			data-text-center="1"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-group="navgroup-pop-up-report-system"
			data-nav-zone="ComponentFormSelect_quad-toggle"
		/>

		<!-- Drop down menu for report details -->
		<label id="trackmania-pop-up-report-system_label-second-choice" pos="-121.826 18." size="150 10" class="trackmania-pop-up-report-system_text-semi-bold" z-index="1"/>
		<frameinstance
			id="trackmania-pop-up-report-system_frame-select-report-details" pos="-120.942 6."
			modelid="component-form-select"
			class="component-navigation-item"
			data-size="90. 11."
			data-scale-options="1"
			data-fontname="GameFontSemiBold"
			data-color-background="003228"
			data-color-text="FFF"
			data-custom-navigation="1"
			data-text-center="1"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-group="navgroup-pop-up-report-system"
			data-nav-zone="ComponentFormSelect_quad-toggle"
		/>

			<!-- Drop down menu for report reason -->
			<label id="trackmania-pop-up-report-system_label-third-choice" pos="-127.527 -20." size="150 10" class="trackmania-pop-up-report-system_text-semi-bold" text="What is the reason of your report?" z-index="1"/>
			<frameinstance
				id="trackmania-pop-up-report-system_frame-select-report-reason" pos="-126.642 -32."
				modelid="component-form-select"
				class="component-navigation-item"
				data-size="90. 11."
				data-scale-options="1"
				data-fontname="GameFontSemiBold"
				data-color-background="003228"
				data-color-text="FFF"
				data-custom-navigation="1"
				data-text-center="1"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-group="navgroup-pop-up-report-system"
				data-nav-zone="ComponentFormSelect_quad-toggle"
			/>

		<!-- Bottom buttons -->
		<frameinstance id="trackmania-pop-up-report-system_button-icon-back" modelid="component-button-icon-2" pos="-137.314 -67." data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="trackmania-pop-up-report-system_button-back" pos="-137.314 -67." z-index="2"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item"
			data-max-width="70."
			data-text="Quit"
			data-styles="component-trackmania-expendable-button-style-size-expendable component-trackmania-expendable-button-style-align-center component-trackmania-expendable-button-style-secondary"
			data-halign="left"
			data-nav-inputs="select;cancel;right"
			data-nav-targets="_;_;trackmania-pop-up-report-system_button-report"
			data-nav-group="navgroup-pop-up-report-system"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>

		<label id="trackmania-pop-up-report-system_label-report-status" hidden="1" pos="-11.8139 -67." halign="center" textsize="3" size="130 10" class="trackmania-pop-up-report-system_text-semi-bold" z-index="1"/>

		<frameinstance id="trackmania-pop-up-report-system_frame-loading-spinner" modelid="component-loadingspinner" pos="68.1861 -67." scale="0.8" halign="right" valign="center"/>

		<frameinstance id="trackmania-pop-up-report-system_button-icon-report" modelid="component-button-icon-2" pos="115.186 -67." data-halign="left" data-size="8 8" data-bind="select" data-hideformouse="1" />
		<frameinstance
			id="trackmania-pop-up-report-system_button-report" pos="115.186 -67." z-index="2"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item"
			data-text="|Verb|Report"
			data-max-width="60."
			data-styles="component-trackmania-expendable-button-style-size-expendable component-trackmania-expendable-button-style-align-center component-trackmania-expendable-button-style-secondary"
			data-halign="right"
			data-nav-inputs="select;cancel;left"
			data-nav-targets="_;_;trackmania-pop-up-report-system_button-back"
			data-nav-group="navgroup-pop-up-report-system"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-nav-locked="1"
			hidden="1"
		/>
	</frame>
</frame>
</framemodel>
<!-- @Component end component-popupreportsystem -->

<!-- @Component start lib-campaign-store -->
<framemodel id="lib-campaign-store">
		</framemodel>
<!-- @Component end lib-campaign-store -->

<!-- @Component start component-playerroyalvictories -->
<framemodel id="component-playerroyalvictories">
<stylesheet>
	<style class="trackmania-player-royal-victories_quad-base" halign="center" valign="center"/>
	<style class="trackmania-player-royal-victories_text-base" halign="center" valign="center2" textprefix="$t$i" textfont="GameFontSemiBold" textsize="3"/>
</stylesheet>

<frame id="trackmania-player-royal-victories_frame-player-royal-victories" class="trackmania-player-royal-victories_container">
	<frame id="trackmania-player-royal-victories_frame-lion">
		<quad id="trackmania-player-royal-victories_quad-lion" size="36 36" class="trackmania-player-royal-victories_quad-base"/>
		<frame id="trackmania-player-royal-victories_frame-victory-count" pos="0 -30">
			<label id="trackmania-player-royal-victories_label-count" pos="0 7" size="25 10" class="trackmania-player-royal-victories_text-base" textcolor="003228" textfont="GameFontExtraBold" textsize="6"/>
			<label id="trackmania-player-royal-victories_label-victory" size="55 10" class="trackmania-player-royal-victories_text-base" maxline="2" autonewline="1" textcolor="003228" textfont="GameFontSemiBold" textsize="3"/>
		</frame>
		<frame id="trackmania-player-royal-victories_frame-super-victory-count" pos="0 -23">
			<label id="trackmania-player-royal-victories_label-count" halign="right" pos="-15 0" size="25 10" class="trackmania-player-royal-victories_text-base" textcolor="003228" textfont="GameFontExtraBold" textsize="6"/>
			<label id="trackmania-player-royal-victories_label-victory" halign="left" pos="-14 0" size="45 10" class="trackmania-player-royal-victories_text-base" textcolor="003228" textfont="GameFontSemiBold" textsize="3"/>

			<label id="trackmania-player-royal-victories_label-super-count" halign="right" pos="-25 -7" size="25 10" class="trackmania-player-royal-victories_text-base" textcolor="003228" textfont="GameFontExtraBold" textsize="6"/>
			<label id="trackmania-player-royal-victories_label-super-victory" halign="left" pos="-24 -7" size="55 10" class="trackmania-player-royal-victories_text-base" textcolor="003228" textfont="GameFontSemiBold" textsize="3"/>
		</frame>
	</frame>
	<frame id="trackmania-player-royal-victories_frame-crown">
		<quad id="trackmania-player-royal-victories_quad-crown" size="10 10" class="trackmania-player-royal-victories_quad-base"/>
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-playerroyalvictories -->

<!-- @Component start component-playerrank -->
<framemodel id="component-playerrank">
<stylesheet>
	<style class="ComponentPlayerRank_quad-base" halign="center" valign="center"/>
	<style class="ComponentPlayerRank_text-base" halign="center" valign="center2" textprefix="$t$i" textfont="GameFontSemiBold" textsize="3"/>
</stylesheet>

<frame id="ComponentPlayerRank_frame-player-rank">
	<quad id="ComponentPlayerRank_quad-rank" class="ComponentPlayerRank_quad-base" size="20 20" keepratio="Fit" z-index="1"/>
</frame>
		</framemodel>
<!-- @Component end component-playerrank -->

<!-- @Component start component-cmgame-expendable-asset -->
<framemodel id="component-cmgame-expendable-asset">
<frame id="expendable-asset_frame-align" class="expendable-asset_expendable-asset">
	<quad id="expendable-asset_quad-left" halign="right"/>
	<quad id="expendable-asset_quad-center" halign="center"/>
	<quad id="expendable-asset_quad-right" halign="left"/>
</frame>
	</framemodel>
<!-- @Component end component-cmgame-expendable-asset -->

<!-- @Component start component-trackmania-expendable-asset -->
<framemodel id="component-trackmania-expendable-asset">
		</framemodel>
<!-- @Component end component-trackmania-expendable-asset -->

<!-- @Component start component-navigationtabs -->
<framemodel id="component-navigationtabs">
<frame id="trackmania-navigation-tabs_frame-align" class="trackmania-navigation-tabs_container">
	<frame id="trackmania-navigation-tabs_frame-navigation-container" class="component-navigation-container">
		<frameinstance id="trackmania-navigation-tabs_frame-background" modelid="component-cmgame-expendable-asset" data-styles="component-trackmania-expendable-asset-style-edges-rounded" z-index="-1"/>
		<frame id="trackmania-navigation-tabs_frame-controller-info" z-index="2">
			<frameinstance id="trackmania-navigation-tabs_button-icon-prev-tab" modelid="component-button-icon-2" data-halign="right" data-size="8. 8." data-bind="LB" data-hideformouse="1" />
			<frameinstance id="trackmania-navigation-tabs_button-icon-next-tab" modelid="component-button-icon-2" data-halign="left" data-size="8. 8." data-bind="RB" data-hideformouse="1" />
		</frame>
		<frame
			id="trackmania-navigation-tabs_frame-tabs"
			class="component-navigation-item"
			data-nav-inputs="pageup;pagedown"
			data-nav-targets="_;_"
			data-nav-group="navgroup-component-navigationtabs-alltabs"
		>
			
			<frameinstance
				id="trackmania-navigation-tabs_button-tab-0"
				modelid="component-cmgame-expendable-button"
				z-index="0"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="0"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>
		
			<frameinstance
				id="trackmania-navigation-tabs_button-tab-1"
				modelid="component-cmgame-expendable-button"
				z-index="1"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="1"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>
		
			<frameinstance
				id="trackmania-navigation-tabs_button-tab-2"
				modelid="component-cmgame-expendable-button"
				z-index="2"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="2"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>
		
			<frameinstance
				id="trackmania-navigation-tabs_button-tab-3"
				modelid="component-cmgame-expendable-button"
				z-index="3"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="3"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>
		
			<frameinstance
				id="trackmania-navigation-tabs_button-tab-4"
				modelid="component-cmgame-expendable-button"
				z-index="4"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="4"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>
		
			<frameinstance
				id="trackmania-navigation-tabs_button-tab-5"
				modelid="component-cmgame-expendable-button"
				z-index="5"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="5"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>
		
			<frameinstance
				id="trackmania-navigation-tabs_button-tab-6"
				modelid="component-cmgame-expendable-button"
				z-index="6"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="6"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>
		
		</frame>
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-navigationtabs -->

<!-- @Component start component-cmgame-player-name -->
<framemodel id="component-cmgame-player-name">
<frame class="cmgame-player-name_player-name">
	<frame id="cmgame-player-name_frame-align">
		<frameinstance id="cmgame-player-name_loading-spinner-name" modelid="component-loadingspinner" />
		<!--
		We MUST initialize the label with a textprefix value.
		Otherwise the `TextPrefix` property initialization in the
		script will be bugged. The latest `TextPrefix` applied
		will also be applied to all other labels that had their
		`TextPrefix` updated.
		-->
		<label id="cmgame-player-name_label-name" valign="center2" textprefix="$z" />
		<label id="cmgame-player-name_label-first-party-icon" valign="center2" textfont="GameFontExtraBold" />
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-cmgame-player-name -->

<!-- @Component start component-profileplayerinfo -->
<framemodel id="component-profileplayerinfo">
<stylesheet>
	<style class="ComponentProfilePlayerInfo_text-title" textsize="10" textprefix="$t$i" textitalicslope=".2" textfont="GameFontExtraBold" textcolor="FFF" />
	<style class="ComponentProfilePlayerInfo_text-regular" textsize="4" textprefix="$t$i" textitalicslope=".2" textfont="GameFontRegular" textcolor="FFF" />
	<style class="ComponentProfilePlayerInfo_text-info" textsize="4" halign="center" valign="center2" textprefix="$t$i" textitalicslope=".2" textfont="GameFontExtraBold" textcolor="FFF" />
	<style class="ComponentProfilePlayerInfo_text-error" halign="center" valign="center2" textprefix="$t$i" textfont="GameFontSemiBold" textcolor="CE0000" />
	<style class="ComponentProfilePlayerInfo_text-bold" valign="center2" textfont="GameFontExtraBold" textprefix="$t$i" textcolor="ffffff" textsize="2" />
	<style class="ComponentProfilePlayerInfo_text-semibold" valign="center2" textfont="GameFontSemiBold" textprefix="$t$i" textcolor="ffffff" textsize="2" />
</stylesheet>
<framemodel id="ComponentProfilePlayerInfo_framemodel-trophy-cell">
	<quad
		id="ComponentProfilePlayerInfo_quad-trophy-icon"
		pos="0.75 -9.89" z-index="1"
		size="21. 21."
		halign="center" valign="center"
		autoscale="0"
		image="file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_bronze_1.dds"
	/>
	<label
		id="ComponentProfilePlayerInfo_label-trophy-count"
		class="ComponentProfilePlayerInfo_text-bold"
		pos="0 -20.24" z-index="2"
		size="30.5571 23."
		halign="center" valign="center2"
		textsize="3.5"
		text="0"
	/>
	<quad
		id="ComponentProfilePlayerInfo_quad-trophy-bg"
		pos="0 -11.5" z-index="-1"
		size="30.5571 23."
		halign="center" valign="center"
		image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Trophy.dds"
		colorize="000514"
		opacity="0.2"
	/>
	<quad
		id="ComponentProfilePlayerInfo_quad-trophy-focus"
		pos="0 -11.5" z-index="0"
		size="30.5571 23."
		halign="center" valign="center"
		opacity="0"
		image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Trophy_Contour.dds"
		colorize="6EFAA0"
	/>
	<frame size="30.5571 23." halign="center">
		<quad
			id="ComponentProfilePlayerInfo_quad-trophy-mouse"
			class="component-navigation-item-zone"
			pos="0 -11.5" z-index="-1"
			rot="10"
			size="25.9736 27.6"
			halign="center" valign="center"
			opacity="0"
			scriptevents="1"
		/>
	</frame>
</framemodel>
<framemodel id="ComponentProfilePlayerInfo_framemodel-trophy-history-cell">
	<frame id="frame-trophy-history-cell-bg" z-index="0">
		<quad pos="3.35714 0." size="3.35714 6.71429" halign="right" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_Start.dds" colorize="000514" opacity="0.6" />
		<quad pos="3.35714 0." size="118.286 6.71429" bgcolor="000514" opacity="0.6" />
		<quad pos="121.643 0." size="3.35714 6.71429" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_End.dds" colorize="000514" opacity="0.6" />

		<quad pos="129.357 0." size="3.35714 6.71429" halign="right" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_Start.dds" colorize="000514" opacity="0.6" />
		<quad pos="129.357 0." size="19.2857 6.71429" bgcolor="000514" opacity="0.6" />
		<quad pos="148.643 0." size="3.35714 6.71429" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_End.dds" colorize="000514" opacity="0.6" />

		<quad pos="155.857 0." size="3.35714 6.71429" halign="right" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_Start.dds" colorize="000514" opacity="0.6" />
		<quad pos="155.857 0." size="2.78571 6.71429" bgcolor="000514" opacity="0.6" />
		<quad pos="158.643 0." size="3.35714 6.71429" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_End.dds" colorize="000514" opacity="0.6" />
	</frame>
	<frame pos="0 -3.85714" z-index="1">
		<label id="ComponentProfilePlayerInfo_label-description" class="ComponentProfilePlayerInfo_text-semibold" pos="3.35714 0" size="118.286 6.71429" valign="center2" textsize="2" />
		<label id="ComponentProfilePlayerInfo_label-date" class="ComponentProfilePlayerInfo_text-semibold" pos="139. 0" size="23.2857 6.71429" halign="center" valign="center2" textsize="2" />
		<label id="ComponentProfilePlayerInfo_label-amount" class="ComponentProfilePlayerInfo_text-bold" pos="157.25 0" size="4.78571 6.71429" halign="center" valign="center2" textsize="2" textcolor="6EFAA0" />
	</frame>
</framemodel>

<frame id="ComponentProfilePlayerInfo_frame-global" class="component-profileplayerinfo component-navigation-item" data-nav-inputs="action3;action4;up;down;cancel" data-nav-targets="_;_;_;_;_" data-nav-group="navgroup-component-profileplayerinfo-global">
	<quad id="ComponentProfilePlayerInfo_quad-background" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_profile_background_map_gradients.dds" size="320 180" z-index="-4" halign="center" valign="center" fullscreen="1"/>
	<frameinstance modelid="component-menu-button-list" id="ComponentProfilePlayerInfo_frame-button-list-profile" z-index="1" />
	<quad id="ComponentProfilePlayerInfo_quad-lights" pos="-105 30" size="200. 180." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Common/Common_Light_Spotlight.webm" z-index="1" colorize="FFF" halign="center" valign="center" />
	<label id="ComponentProfilePlayerInfo_label-error" class="ComponentProfilePlayerInfo_text-error" pos="0 -61" textsize="2.5" size="300 10" z-index="10"/>

	<frameinstance
		id="ComponentProfilePlayerInfo_frame-report-system"
		z-index="10"
		modelid="component-popupreportsystem"
		hidden="1"
	/>

	<frame id="ComponentProfilePlayerInfo_frame-player-card" pos="-104.5 73" z-index="5">
		<quad z-index="0" size="91.56 11.76" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Overlays/Common_Widget_Double.dds" />
		<frameinstance id="ComponentProfilePlayerInfo_playername-player-card-name" modelid="component-cmgame-player-name" pos="-21 1.75" z-index="1" data-size="64 10" data-textsize="3" data-valign="center2" data-textfont="GameFontExtraBold" data-textprefix="$t$i" data-textcolor="ffffff" />
		<quad id="ComponentProfilePlayerInfo_quad-player-card-echelon" pos="-22.5 -3.75" z-index="1" size="4 4" autoscale="0" valign="center" />
		<label id="ComponentProfilePlayerInfo_label-player-card-echelon" pos="-18.5 -3.75" z-index="2" size="62 10" class="ComponentProfilePlayerInfo_text-semibold" textsize="1" textcolor="6EFAA0" halign="left" />
		<frameinstance id="ComponentProfilePlayerInfo_spinner-player-card-echelon" modelid="component-loadingspinner" pos="-20 -3.75" z-index="3" scale="0.2" data-color="6EFAA0" />
		<quad id="ComponentProfilePlayerInfo_quad-player-card-flag" pos="-46.6956 0" z-index="1" size="19.488 11.76" keepratio="Clip" image="file://ZoneFlags/Path/World" alphamask="file://Media/Manialinks/Nadeo/Trackmania/Menus/Overlays/Menu_Widget_Profile_Flag_Mask.dds" halign="left" valign="center" />
		<frameinstance
			modelid="component-trackmania-button"
			id="ComponentProfilePlayerInfo_button-prev-player"
			class="component-navigation-item component-menusounds-item"
			pos="-45.78 0" z-index="0"
			data-size="7. 7."
			data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
			data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
			data-bgcolor="FFFFFF"
			data-focuscolor="FFFFFF"
			data-opacity="1."
			data-opacityunfocus="0.6"
			data-halign="right" data-valign="center"
			data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-zone="ComponentTrackmania_Button_quad-background"
			data-menusounds-selectsound="ArrowSelect"
			hidden="1"
		/>
		<frameinstance
			modelid="component-trackmania-button"
			id="ComponentProfilePlayerInfo_button-next-player"
			class="component-navigation-item component-menusounds-item"
			pos="45.78 0" z-index="0"
			data-size="7. 7."
			data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
			data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
			data-bgcolor="FFFFFF"
			data-focuscolor="FFFFFF"
			data-opacity="1."
			data-opacityunfocus="0.6"
			data-halign="left" data-valign="center"
			data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-zone="ComponentTrackmania_Button_quad-background"
			data-menusounds-selectsound="ArrowSelect"
			hidden="1"
		/>
		<frameinstance id="ComponentProfilePlayerInfo_button-icon-prev-player" modelid="component-button-icon-2" pos="-46.78 0" data-halign="right" data-valign="center" data-size="7 7" data-bind="LT" data-hideformouse="1" />
		<frameinstance id="ComponentProfilePlayerInfo_button-icon-next-player" modelid="component-button-icon-2" pos="46.78 0" data-halign="left" data-valign="center" data-size="7 7" data-bind="RT" data-hideformouse="1" />
	</frame>
	<frameinstance
		id="ComponentProfilePlayerInfo_navigationtabs-categories"
		modelid="component-navigationtabs"
		pos="-122.6 49.7"
		data-tabs="{&quot;0&quot;:&quot;|Profile|General&quot;,&quot;1&quot;:&quot;|Profile|Trophies&quot;,&quot;2&quot;:&quot;|Profile|Royal&quot;,&quot;3&quot;:&quot;|Profile|Ranked&quot;}"
		data-halign="left"
		z-index="5"
	/>

	<frameinstance id="ComponentProfilePlayerInfo_spinner-privilege-check" modelid="component-loadingspinner" pos="12 -5" z-index="4" />
	<label id="ComponentProfilePlayerInfo_label-privilege-check" class="ComponentProfilePlayerInfo_text-regular" pos="12 -5" z-index="5" size="125 20" halign="center" valign="center2" text="Error while retrieving profile (code: %1)MS-0048" hidden="1" />

	<frame id="ComponentProfilePlayerInfo_frame-content" pos="-87.8 30">
		<frame id="ComponentProfilePlayerInfo_frame-trophies" hidden="1" pos="0 0" z-index="2">
			<frameinstance modelid="component-loadingspinner" id="ComponentProfilePlayerInfo_spinner-trophies" pos="100. -35." />
			<label
				id="ComponentProfilePlayerInfo_label-trophies-error"
				class="ComponentProfilePlayerInfo_text-regular"
				pos="100. -35."
				size="125 20"
				halign="center" valign="center2"
				maxline="5"
				hidden="1"
			/>
			<frame id="ComponentProfilePlayerInfo_frame-trophies-loaded">
				<label
					id="ComponentProfilePlayerInfo_label-display-history"
					class="ComponentProfilePlayerInfo_text-title"
					pos="-48 -60.2" z-index="2"
					size="258 15"
					valign="bottom"
					textsize="3.5"
					text="Select a trophy to see its unlock history"
				/>
				<frame
					id="ComponentProfilePlayerInfo_frame-trophies-list"
					class="component-navigation-item"
					pos="-37 -62.5" z-index="1"
					data-nav-group="navgroup-component-profileplayerinfo-main"
					data-nav-inputs="select;left;right;up;down"
					data-nav-targets="_;_;_;ComponentProfilePlayerInfo_frame-trophies-ranking;ComponentProfilePlayerInfo_button-back"
				>
					
			<frame
				id="ComponentProfilePlayerInfo_button-trophy-0"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="0. 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="0"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>
		
			<frame
				id="ComponentProfilePlayerInfo_button-trophy-1"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="30.0371 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="1"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>
		
			<frame
				id="ComponentProfilePlayerInfo_button-trophy-2"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="60.0743 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="2"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>
		
			<frame
				id="ComponentProfilePlayerInfo_button-trophy-3"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="90.1114 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="3"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>
		
			<frame
				id="ComponentProfilePlayerInfo_button-trophy-4"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="120.149 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="4"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>
		
			<frame
				id="ComponentProfilePlayerInfo_button-trophy-5"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="150.186 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="5"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>
		
			<frame
				id="ComponentProfilePlayerInfo_button-trophy-6"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="180.223 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="6"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>
		
			<frame
				id="ComponentProfilePlayerInfo_button-trophy-7"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="210.26 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="7"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>
		
			<frame
				id="ComponentProfilePlayerInfo_button-trophy-8"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="240.297 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="8"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>
		
				</frame>
				<frame
					id="ComponentProfilePlayerInfo_frame-trophies-ranking"
					class="component-navigation-item ComponentProfilePlayerInfo_focus-opacity-container ComponentProfilePlayerInfo_controller-info-pager"
					pos="-15 -16"
					data-nav-group="navgroup-component-profileplayerinfo-main"
					data-nav-inputs="left;right;down"
					data-nav-targets="_;_;ComponentProfilePlayerInfo_frame-trophies-list"
				>
					<frame>
						<frameinstance
							modelid="component-trackmania-button"
							id="ComponentProfilePlayerInfo_button-next-zone"
							pos="-19.5 0"
							data-size="8 8"
							data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
							data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
							data-bgcolor="FFF"
							data-opacityunfocus=".6"
							data-focuscolor="FFF"
							data-halign="center" data-valign="center"
							class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
							data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
							data-nav-inputs="select"
							data-nav-targets="_"
							data-nav-zone="ComponentTrackmania_Button_quad-background"
							data-menusounds-selectsound="ArrowSelect"
							data-ComponentProfilePlayerInfo_opacity-focus="1"
							data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
						/>
						<frameinstance
							modelid="component-trackmania-button"
							id="ComponentProfilePlayerInfo_button-prev-zone"
							pos="19 0"
							data-size="8 8"
							data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
							data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
							data-bgcolor="FFF"
							data-opacityunfocus=".6"
							data-focuscolor="FFF"
							data-halign="center" data-valign="center"
							class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
							data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
							data-nav-inputs="select"
							data-nav-targets="_"
							data-nav-zone="ComponentTrackmania_Button_quad-background"
							data-menusounds-selectsound="ArrowSelect"
							data-ComponentProfilePlayerInfo_opacity-focus="1"
							data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
						/>
						<label size="46 5" pos="3.26205 18.5" text="Global rank" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
						<label size="46 5" pos="1.41062 8." text="|Rank|Top" class="ComponentProfilePlayerInfo_text-info" textsize="2" textfont="GameFontRegular" textcolor="6EFAA0"/>
						<label id="ComponentProfilePlayerInfo_label-trophies-global-ranking-position" size="32 5" pos="-0.352654 -2." class="ComponentProfilePlayerInfo_text-info" textsize="13" textcolor="6EFAA0"/>
						<label id="ComponentProfilePlayerInfo_label-trophies-global-ranking-zone" size="46 5" pos="-3.43838 -19.5" class="ComponentProfilePlayerInfo_text-info" textsize="2.5" maxline="3" textfont="GameFontSemiBold"/>
					</frame>
					<quad size="59.8633 53." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6" data-ComponentProfilePlayerInfo_opacity-focus="0.8" data-ComponentProfilePlayerInfo_opacity-unfocus="0.6" />
					<quad size="59.8633 53." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half_Contour.dds" colorize="6EFAA0" z-index="2" halign="center" valign="center" opacity="0" data-ComponentProfilePlayerInfo_opacity-focus="1" data-ComponentProfilePlayerInfo_opacity-unfocus="0" />
				</frame>
				<frame id="ComponentProfilePlayerInfo_frame-trophies-points" pos="38 -16">
					<frame>
						<quad id="ComponentProfilePlayerInfo_quad-best-trophy" pos="1.23429 7." z-index="2" size="42 42" image="file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_base_00.dds" halign="center" valign="center" autoscale="0"/>
						<quad pos="1.23429 7." z-index="1" size="45 45" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Trophy_selected_light.dds" opacity="0.4" halign="center" valign="center"/>
						<label id="ComponentProfilePlayerInfo_label-trophies-points" size="46 5" pos="-2.55674 -14.5" class="ComponentProfilePlayerInfo_text-info" textsize="5.5" textcolor="6EFAA0"/>
						<label id="ComponentProfilePlayerInfo_label-trophies-points-text" size="46 5" pos="-3.49127 -19.8" text="|Score|Point" class="ComponentProfilePlayerInfo_text-info" textsize="1.8" textfont="GameFontRegular" textcolor="6EFAA0"/>
					</frame>
					<quad size="59.8633 53." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>
				<frame pos="47.5 10.5" hidden="1" id="ComponentProfilePlayerInfo_frame-trophies-history">
					<label id="ComponentProfilePlayerInfo_label-trophy-history" class="ComponentProfilePlayerInfo_text-regular" pos="22 -5" size="162. 10" valign="center2" />
					<frameinstance
						modelid="component-loadingspinner"
						id="ComponentProfilePlayerInfo_spinner-trophies-history"
						pos="97. -26.5"
					/>
					<frameinstance modelid="menu-libs-scroll" data-scroll-parent="ComponentProfilePlayerInfo_scroll-trophies-history" z-index="6" />
					<frame
						id="ComponentProfilePlayerInfo_scroll-trophies-history"
						class="menu-libs-scroll-window"
						pos="22 0" z-index="5"
						data-elements-per-line="1"
						data-element-size="162. 6.71429"
						data-margin-size="1. 1."
						data-window-size="162. 53."
						data-scroll-indicator-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_BOTTOM_OBLIQUE.dds"
						data-scroll-indicator-colorize="FFFFFF"
						data-scroll-indicator-size="8"
						data-scroll-indicator-x-offset="-8"
						data-scroll-indicator-y-offset="-8"
						data-scrollbar-xoffset="2"
						data-scrollpadding="10"
						data-skew="-10"
						data-scroll-grid-size="1 3.75"
						data-pager-page-size="8"
						data-pager-trigger-size="8"
						data-pager-margin-size="4"
					>
						<quad z-index="-1" scriptevents="1" class="menu-libs-scroll-event" />
						<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" />
					</frame>
				</frame>
			</frame>
		</frame>

		<frame id="ComponentProfilePlayerInfo_frame-ranked-stats" pos="-16.2 -4.5" hidden="1" z-index="2">
			<frame id="ComponentProfilePlayerInfo_frame-public-data">
				<frame id="ComponentProfilePlayerInfo_frame-current-season" pos="42.2 -33">
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Current season" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<frameinstance modelid="component-playerrank" id="ComponentProfilePlayerInfo_frame-rank" pos="1.5 0." scale="1.8"/>
					<label id="ComponentProfilePlayerInfo_label-rank" size="40 5" pos="-6.78859 -38.5" class="ComponentProfilePlayerInfo_text-info" textsize="5.8" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-rank-date" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" textfont="GameFontSemiBold" hidden="1"/>
					<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
					<label id="ComponentProfilePlayerInfo_label-ranked-error"	class="ComponentProfilePlayerInfo_text-regular" textprefix="$i"	textsize="2" size="40 40" halign="center" valign="center2" maxline="4" />
				</frame>

				<frame id="ComponentProfilePlayerInfo_frame-previous-season" pos="89.5 -33">
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Previous season" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<frameinstance modelid="component-playerrank" id="ComponentProfilePlayerInfo_frame-rank" pos="1.5 0." scale="1.8"/>
					<label id="ComponentProfilePlayerInfo_label-rank" size="40 5" pos="-6.34777 -36." class="ComponentProfilePlayerInfo_text-info" textsize="4" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-rank-date" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" textfont="GameFontSemiBold"/>
					<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
					<label id="ComponentProfilePlayerInfo_label-ranked-error"	class="ComponentProfilePlayerInfo_text-regular" textprefix="$i"	textsize="2" size="40 40" halign="center" valign="center2" maxline="4" />
				</frame>

				<frame id="ComponentProfilePlayerInfo_frame-best-season" pos="136.8 -33">
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Best season" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<frameinstance modelid="component-playerrank" id="ComponentProfilePlayerInfo_frame-rank" pos="1.5 0." scale="1.8"/>
					<label id="ComponentProfilePlayerInfo_label-rank" size="40 5" pos="-6.34777 -36." class="ComponentProfilePlayerInfo_text-info" textsize="4" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-rank-date" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" textfont="GameFontSemiBold"/>
					<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
					<label id="ComponentProfilePlayerInfo_label-ranked-error"	class="ComponentProfilePlayerInfo_text-regular" textprefix="$i"	textsize="2" size="40 40" halign="center" valign="center2" maxline="4" />
				</frame>
			</frame>

			<frame id="ComponentProfilePlayerInfo_frame-sensible-data">
				<frame id="ComponentProfilePlayerInfo_frame-matches-count">
					<label id="ComponentProfilePlayerInfo_label-matches-count" size="40 5" pos="0.0440817 0.25"  class="ComponentProfilePlayerInfo_text-info" textsize="11" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="-1.49878 -8.5" text="Matches" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<quad size="49.3333 30." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Third.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>

				<frame id="ComponentProfilePlayerInfo_frame-win-rate" pos="-5.83642 -33.1">
					<label id="ComponentProfilePlayerInfo_label-percentage" size="40 5" pos="0.0440817 0.25"  class="ComponentProfilePlayerInfo_text-info" textsize="11" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="-1.49878 -8.5" text="Win rate" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<quad size="49.3333 30." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Third.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>

				<frame id="ComponentProfilePlayerInfo_frame-mvp" pos="-11.6728 -66.2">
					<label id="ComponentProfilePlayerInfo_label-mvp-count" size="40 5" pos="0.0440817 0.25"  class="ComponentProfilePlayerInfo_text-info" textsize="11" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="-1.49878 -8.5" text="MVP" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<quad size="49.3333 30." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Third.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>
			</frame>
		</frame>

		<frame id="ComponentProfilePlayerInfo_frame-royal-stats" pos="-22 -37.5" hidden="1" z-index="2">
			<frame id="ComponentProfilePlayerInfo_frame-royal-victories">
				<label id="ComponentProfilePlayerInfo_label-title" pos="7.22941 41." size="40 5" text="|Profile|Royal" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<frameinstance modelid="component-playerroyalvictories" id="ComponentProfilePlayerInfo_frame-royal-level" pos="0.705308 4." data-imagetype="2" />
				<label id="ComponentProfilePlayerInfo_label-royal-victories" size="40 5" pos="-6.34777 -36." class="ComponentProfilePlayerInfo_text-info" textsize="10" textcolor="6EFAA0"/>
				<label text="Victories" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
				<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
			</frame>

			<frame id="ComponentProfilePlayerInfo_frame-super-royal-victories" pos="48 0">
				<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Super Royal" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<quad id="ComponentProfilePlayerInfo_quad-super-royal-logo" pos="0.705308 4." size="35 35" image="file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Qualifications.dds" halign="center" valign="center"/>
				<label id="ComponentProfilePlayerInfo_label-super-royal-victories" size="40 5" pos="-6.34777 -36." class="ComponentProfilePlayerInfo_text-info" textsize="10" textcolor="6EFAA0"/>
				<label text="Victories" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
				<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full_RoundedLeft.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>

				<frame pos="63.8 36.5">
					<frame>
						<quad size="71.6667 23." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Quarter.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Crown_Bronze.dds" halign="center" valign="center"/>
						<label text="Bronze" pos="-20.5 -7.1" size="21 5" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="1.8"/>
						<label id="ComponentProfilePlayerInfo_label-bronze-victories" pos="-9 0.75" size="38 10" class="ComponentProfilePlayerInfo_text-info" textsize="9" halign="left" textcolor="6EFAA0"/>
						<label text="Victories" pos="-9 -5.5" size="36 5" halign="left" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
					</frame>
					<frame pos="-4.29356 -24.35">
						<quad size="71.6667 23." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Quarter.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Crown_Silver.dds" halign="center" valign="center"/>
						<label text="Silver" pos="-20.5 -7.1" size="21 5" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="1.8"/>
						<label id="ComponentProfilePlayerInfo_label-silver-victories" pos="-9 0.75" size="38 10" class="ComponentProfilePlayerInfo_text-info" textsize="9" halign="left" textcolor="6EFAA0"/>
						<label text="Victories" pos="-9 -5.5" size="36 5" halign="left" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
					</frame>
					<frame pos="-8.58712 -48.7">
						<quad size="71.6667 23." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Quarter.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Crown_Gold.dds" halign="center" valign="center"/>
						<label text="Gold" pos="-20.5 -7.1" size="21 5" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="1.8"/>
						<label id="ComponentProfilePlayerInfo_label-gold-victories" pos="-9 0.75" size="38 10" class="ComponentProfilePlayerInfo_text-info" textsize="9" halign="left" textcolor="6EFAA0"/>
						<label text="Victories" pos="-9 -5.5" size="36 5" halign="left" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
					</frame>
					<frame pos="-12.8807 -73.05">
						<quad size="71.6667 23." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Quarter.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Crown_Master.dds" halign="center" valign="center"/>
						<label text="Master" pos="-20.5 -7.1" size="21 5" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="1.8"/>
						<label id="ComponentProfilePlayerInfo_label-master-victories" pos="-9 0.75" size="38 10" class="ComponentProfilePlayerInfo_text-info" textsize="9" halign="left" textcolor="6EFAA0"/>
						<label text="Victories" pos="-9 -5.5" size="36 5" halign="left" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>

	<frame id="ComponentProfilePlayerInfo_frame-current-skin" pos="-106 -12" z-index="0">
		<camera id="ComponentProfilePlayerInfo_camera-skin" halign="center" valign="center" size="144. 162."/>
	</frame>

	<frame id="ComponentProfilePlayerInfo_frame-general-tab" z-index="3">
		<frame id="ComponentProfilePlayerInfo_frame-main-profile" pos="-24 -7.7">
			<frame
				id="ComponentProfilePlayerInfo_frame-info-ranking"
				class="component-navigation-item ComponentProfilePlayerInfo_focus-opacity-container ComponentProfilePlayerInfo_controller-info-pager"
				pos="-0.627091 24.8"
				data-nav-group="navgroup-component-profileplayerinfo-main"
				data-nav-inputs="left;right;down"
				data-nav-targets="_;_;ComponentProfilePlayerInfo_frame-info-campaign-ranking"
			>
				<quad size="51.9568 46." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6" data-ComponentProfilePlayerInfo_opacity-focus="0.8" data-ComponentProfilePlayerInfo_opacity-unfocus="0.6" />
				<quad size="51.9568 46." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half_Contour.dds" colorize="6EFAA0" z-index="3" halign="center" valign="center" opacity="0" data-ComponentProfilePlayerInfo_opacity-focus="1" data-ComponentProfilePlayerInfo_opacity-unfocus="0" />
				<label z-index="1" size="40 5" pos="2.89176 16.4" text="Global rank" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<frameinstance modelid="component-loadingspinner" id="ComponentProfilePlayerInfo_spinner-ranking" pos="-1 -5" z-index="2" />
				<frame id="ComponentProfilePlayerInfo_frame-info-ranking-loaded" z-index="1">
					<label size="40 5" pos="1.28719 7.3" text="|Rank|Top" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textcolor="6EFAA0" textsize="2"/>
					<label id="ComponentProfilePlayerInfo_label-ranking-position" size="30 5" pos="-0.19396 -1.1" class="ComponentProfilePlayerInfo_text-info" textcolor="6EFAA0" textsize="13"/>
					<label id="ComponentProfilePlayerInfo_label-ranking-category" size="40 5" pos="-2.99756 -17." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" maxline="3" textfont="GameFontSemiBold"/>
					<frameinstance modelid="component-trackmania-button" id="ComponentProfilePlayerInfo_button-general-trophies-next-zone"
						pos="-17.5 0"
						data-size="7 7"
						data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
						data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
						data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="ComponentTrackmania_Button_quad-background"
						data-menusounds-selectsound="ArrowSelect"
						data-ComponentProfilePlayerInfo_opacity-focus="1"
						data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
					/>
					<frameinstance modelid="component-trackmania-button" id="ComponentProfilePlayerInfo_button-general-trophies-previous-zone"
						pos="17 0"
						data-size="7 7"
						data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
						data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
						data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="ComponentTrackmania_Button_quad-background"
						data-menusounds-selectsound="ArrowSelect"
						data-ComponentProfilePlayerInfo_opacity-focus="1"
						data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
					/>
				</frame>
			</frame>

			<frame
				id="ComponentProfilePlayerInfo_frame-info-campaign-ranking"
				class="component-navigation-item ComponentProfilePlayerInfo_focus-opacity-container ComponentProfilePlayerInfo_controller-info-pager"
				pos="-9.37291 -24.8"
				data-nav-group="navgroup-component-profileplayerinfo-main"
				data-nav-inputs="left;right;down;up"
				data-nav-targets="_;_;ComponentProfilePlayerInfo_button-back;ComponentProfilePlayerInfo_frame-info-ranking"
			>
				<frameinstance modelid="component-loadingspinner" id="ComponentProfilePlayerInfo_spinner-campaign" scale="0.8" />
				<frame>
					<frameinstance modelid="component-trackmania-button" id="ComponentProfilePlayerInfo_button-previous-campaign"
						pos="-17.5 0"
						data-size="7 7"
						data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
						data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
						data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="ComponentTrackmania_Button_quad-background"
						data-menusounds-selectsound="ArrowSelect"
						data-ComponentProfilePlayerInfo_opacity-focus="1"
						data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
					/>
					<frameinstance modelid="component-trackmania-button" id="ComponentProfilePlayerInfo_button-next-campaign"
						pos="17 0"
						data-size="7 7"
						data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
						data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
						data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="ComponentTrackmania_Button_quad-background"
						data-menusounds-selectsound="ArrowSelect"
						data-ComponentProfilePlayerInfo_opacity-focus="1"
						data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
					/>
					<label id="ComponentProfilePlayerInfo_label-campaign-name" size="40 5" pos="2.89176 16.4" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<label id="ComponentProfilePlayerInfo_label-campaign-ranking-top" size="40 5" pos="1.28719 7.3" text="|Rank|Top" class="ComponentProfilePlayerInfo_text-info" textsize="2" textfont="GameFontRegular" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-campaign-ranking-position" size="30 5" pos="-0.19396 -1.1" class="ComponentProfilePlayerInfo_text-info" textsize="13" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-campaign-ranking-zone" size="40 5" pos="-2.99756 -17." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" maxline="3" textfont="GameFontSemiBold"/>
				</frame>
				<quad size="51.9568 46." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6" data-ComponentProfilePlayerInfo_opacity-focus="0.8" data-ComponentProfilePlayerInfo_opacity-unfocus="0.6" />
				<quad size="51.9568 46." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half_Contour.dds" colorize="6EFAA0" z-index="2" halign="center" valign="center" opacity="0" data-ComponentProfilePlayerInfo_opacity-focus="1" data-ComponentProfilePlayerInfo_opacity-unfocus="0" />
			</frame>

			<frame id="ComponentProfilePlayerInfo_frame-info-trophies" pos="42 0">
				<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="|Profile|Trophies" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<quad id="ComponentProfilePlayerInfo_quad-highest-trophy" pos="0. 0." size="36 36" image="file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_bronze_1.dds" halign="center" valign="center" autoscale="0"/>
				<label id="ComponentProfilePlayerInfo_label-trophy-number" size="40 5" pos="-6.96492 -39.5" class="ComponentProfilePlayerInfo_text-info" textsize="13" textcolor="6EFAA0"/>
				<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
			</frame>

			<frame id="ComponentProfilePlayerInfo_frame-info-royal" pos="89.5 0">
				<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Royal rank" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<frameinstance modelid="component-playerroyalvictories" id="ComponentProfilePlayerInfo_frame-royal-level" pos="0. 0." z-index="2" data-imagetype="2" />
				<label id="ComponentProfilePlayerInfo_label-royal-level" size="40 5" pos="-6.87675 -39." class="ComponentProfilePlayerInfo_text-info" textsize="4" textcolor="6EFAA0"/>
				<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				<frameinstance modelid="component-loadingspinner" z-index="1" id="ComponentProfilePlayerInfo_spinner-royal" />
			</frame>

			<frame id="ComponentProfilePlayerInfo_frame-info-ranked" pos="137 0">
				<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Best rank" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<frameinstance modelid="component-playerrank" id="ComponentProfilePlayerInfo_frame-best-rank" pos="1.5 0." z-index="2" scale="1.8"/>
				<label id="ComponentProfilePlayerInfo_label-best-rank" size="40 5" pos="-6.34777 -36." class="ComponentProfilePlayerInfo_text-info" textsize="4" textcolor="6EFAA0"/>
				<label id="ComponentProfilePlayerInfo_label-best-rank-date" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" textfont="GameFontSemiBold"/>
				<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				<frameinstance modelid="component-loadingspinner" z-index="1" id="ComponentProfilePlayerInfo_spinner-ranked" />
			</frame>
		</frame>
	</frame>

	<frame id="ComponentProfilePlayerInfo_frame-footer" pos="0 -73">
		<frameinstance modelid="component-button-icon-2" pos="-151.5 0" z-index="3" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="ComponentProfilePlayerInfo_button-back"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button component-menusounds-item"
			pos="-151.5 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-align-center component-trackmania-expendable-button-style-size-expendable component-trackmania-expendable-button-style-page-back"
			data-max-width="60"
			data-nav-inputs="select;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-my-access"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-menusounds-selectsound="BackButtonSelect"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-my-access"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="20 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="My access"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-back;ComponentProfilePlayerInfo_button-update-zone"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-update-zone"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="70 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="Change region"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-my-access;ComponentProfilePlayerInfo_button-garage"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-garage"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="124.5 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="Garage"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-icon-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_CAR_01.dds"
			data-icon-colormode="1"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-update-zone;ComponentProfilePlayerInfo_button-first-party-profile"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-first-party-profile"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="70 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="%1 profile$<$i$<$zUbisoft Connect$>$>"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-garage;ComponentProfilePlayerInfo_button-ubisoft-connect-profile"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-nav-locked="1"
			hidden="1"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-ubisoft-connect-profile"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="100 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="%1 profile$<$i$<$zUbisoft Connect$>$>"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-first-party-profile;ComponentProfilePlayerInfo_button-report"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-nav-locked="1"
			hidden="1"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-report"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="124.5 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="|Verb|Report"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-ubisoft-connect-profile"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-nav-locked="1"
			hidden="1"
		/>
	</frame>
</frame>
		</framemodel>
<!-- @Component end component-profileplayerinfo -->

<!-- @Component start component-medalstack -->
<framemodel id="component-medalstack">
<stylesheet>
	<style class="quad-medal" halign="left" valign="center" size="12 12" />
</stylesheet>

<frame id="ComponentMedalStack_frame-align">
	<frame id="ComponentMedalStack_frame-global">
		<quad pos="0 0" image="" bgcolor="DD824B" class="quad-medal" autoscale="0" z-index="0" hidden="1" />
		<quad pos="5 0" image="" bgcolor="B5BCC6" class="quad-medal" autoscale="0" z-index="1" hidden="1" />
		<quad pos="10 0" image="" bgcolor="E8C11A" class="quad-medal" autoscale="0" z-index="2" hidden="1" />
		<quad pos="15 0" image="" bgcolor="00FF15" class="quad-medal" autoscale="0" z-index="3" hidden="1" />
	</frame>
	<quad id="quad-shadow-stack" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medals_Shadow.dds" size="25 6.5" hidden="1" z-index="-1" colorize="000" opacity=".35" halign="center"/>
	<quad id="quad-shadow-bigmedal" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medals_Shadow.dds" size="30 8.5" hidden="1" z-index="-1" colorize="000" opacity=".35" halign="center"/>
</frame>
</framemodel>
<!-- @Component end component-medalstack -->

<!-- @Component start component-racemapinfos -->
<framemodel id="component-racemapinfos">
<stylesheet>
	<style class="ComponentRaceMapInfos_text-default" halign="center" valign="center2" textsize="4" textprefix="$t$i" textcolor="FFF" textfont="GameFontExtraBold" />
	<style class="ComponentRaceMapInfos_quad-default" halign="center" valign="center" />
</stylesheet>

<frame id="ComponentRaceMapInfos_frame-global">
	<frame id="ComponentRaceMapInfos_frame-header" pos="3.65777 20.7442">
		<quad id="ComponentRaceMapInfos_quad-header-bg" z-index="-1" size="128. 22.9053" colorize="003228" image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_StartEnd_HEADER.dds" class="ComponentRaceMapInfos_quad-default" />
		<label id="ComponentRaceMapInfos_label-campaign-name" pos="-55.471 3." size="113. 10" class="ComponentRaceMapInfos_text-default" textsize="7" textcolor="FFF" halign="left" italicslope=".2" filter-profanities="Always"/>
		<label id="ComponentRaceMapInfos_label-map-author" pos="-56.529 -3." size="113. 10" class="ComponentRaceMapInfos_text-default" textsize="4" textfont="GameFontRegular" halign="left" italicslope=".2" hidden="1"/>
		<label id="ComponentRaceMapInfos_label-map-name" pos="-56.8816 -5." size="113. 10" class="ComponentRaceMapInfos_text-default" textsize="7" textcolor="6EFAA0" halign="left" italicslope=".2" filter-profanities="Always"/>
	</frame>

	<frame id="ComponentRaceMapInfos_frame-content" pos="-1.60757 -11.9526">
		<quad id="ComponentRaceMapInfos_quad-ranking-bg" image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_StartEnd_BODY_BACKGROUND.dds" size="130.5 40.8231" class="ComponentRaceMapInfos_quad-default" z-index="-1" opacity=".9"/>
		<label id="ComponentRaceMapInfos_label-closed" text="Leaderboards are closed" pos="-54.7306 14.2881" size="108. 10." halign="left" textsize="2.5" class="ComponentRaceMapInfos_text-default" italicslope=".2" textcolor="6EFAA0" textfont="GameFontSemiBold" z-index="5" hidden="1" />

		<frame id="ComponentRaceMapInfos_frame-pb" pos="-55.8104 8.16462">
			<label id="ComponentRaceMapInfos_label-time-legend" textcolor="FFF" size="64. 10." halign="left" text="Personal best" textsize="4" class="ComponentRaceMapInfos_text-default" italicslope=".2"/>
			<label id="ComponentRaceMapInfos_label-pb" pos="114.5 0" textcolor="FFF" size="64. 10." halign="right" textsize="4" class="ComponentRaceMapInfos_text-default" italicslope=".2"/>
		</frame>

		<frame id="ComponentRaceMapInfos_frame-royal-segment-race-times" pos="-38.609 -3." hidden="1">
			
			<frame id="ComponentRaceMapInfos_frame-royal-segment-race-time-0" pos="0. 0.">
				<quad id="ComponentRaceMapInfos_quad-background" size="38.34 7.1" class="ComponentRaceMapInfos_quad-default" image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_StartEnd_HOVER_TIME_40.dds" colorize="ffffff" opacity="0.4" z-index="0" />
				<label id="ComponentRaceMapInfos_label-time" pos="0 -0.3" size="34.506 5.68" class="ComponentRaceMapInfos_text-default" text="--:--.---" textsize="4" textfont="GameFontExtraBold" z-index="1" />
			</frame>
		
			<frame id="ComponentRaceMapInfos_frame-royal-segment-race-time-1" pos="19.17 -8.4">
				<quad id="ComponentRaceMapInfos_quad-background" size="38.34 7.1" class="ComponentRaceMapInfos_quad-default" image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_StartEnd_HOVER_TIME_40.dds" colorize="6efaa1" opacity="0.4" z-index="0" />
				<label id="ComponentRaceMapInfos_label-time" pos="0 -0.3" size="34.506 5.68" class="ComponentRaceMapInfos_text-default" text="--:--.---" textsize="4" textfont="GameFontExtraBold" z-index="1" />
			</frame>
		
			<frame id="ComponentRaceMapInfos_frame-royal-segment-race-time-2" pos="38.34 0.">
				<quad id="ComponentRaceMapInfos_quad-background" size="38.34 7.1" class="ComponentRaceMapInfos_quad-default" image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_StartEnd_HOVER_TIME_40.dds" colorize="0070bd" opacity="0.4" z-index="0" />
				<label id="ComponentRaceMapInfos_label-time" pos="0 -0.3" size="34.506 5.68" class="ComponentRaceMapInfos_text-default" text="--:--.---" textsize="4" textfont="GameFontExtraBold" z-index="1" />
			</frame>
		
			<frame id="ComponentRaceMapInfos_frame-royal-segment-race-time-3" pos="57.51 -8.4">
				<quad id="ComponentRaceMapInfos_quad-background" size="38.34 7.1" class="ComponentRaceMapInfos_quad-default" image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_StartEnd_HOVER_TIME_40.dds" colorize="ff0000" opacity="0.4" z-index="0" />
				<label id="ComponentRaceMapInfos_label-time" pos="0 -0.3" size="34.506 5.68" class="ComponentRaceMapInfos_text-default" text="--:--.---" textsize="4" textfont="GameFontExtraBold" z-index="1" />
			</frame>
		
			<frame id="ComponentRaceMapInfos_frame-royal-segment-race-time-4" pos="76.68 0.">
				<quad id="ComponentRaceMapInfos_quad-background" size="38.34 7.1" class="ComponentRaceMapInfos_quad-default" image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_StartEnd_HOVER_TIME_40.dds" colorize="000000" opacity="0.4" z-index="0" />
				<label id="ComponentRaceMapInfos_label-time" pos="0 -0.3" size="34.506 5.68" class="ComponentRaceMapInfos_text-default" text="--:--.---" textsize="4" textfont="GameFontExtraBold" z-index="1" />
			</frame>
		
		</frame>

		<frame id="ComponentRaceMapInfos_frame-rankings">
			<frameinstance id="ComponentRaceMapInfos_spinner-rankings" modelid="component-loadingspinner" pos="40. -7.14404" scale="0.5" />
			<frame id="ComponentRaceMapInfos_frame-ranking" pos="-1.25969 -7.14404" z-index="5" hidden="1">
				<label id="ComponentRaceMapInfos_label-ranking" size="23 10." halign="right" textsize="4" class="ComponentRaceMapInfos_text-default" italicslope=".2" textcolor="6EFAA0"/>
				<label id="ComponentRaceMapInfos_label-zone" pos="57.25 0." size="52 10." halign="right" valign="top" textsize="4" class="ComponentRaceMapInfos_text-default" italicslope=".2" textfont="GameFontRegular" textcolor="6EFAA0" translate="1"/>
			</frame>
			<frame id="ComponentRaceMapInfos_frame-ranking-2" pos="7.84054 -12.2469" scale="0.75" z-index="5" hidden="1">
				<label id="ComponentRaceMapInfos_label-ranking" size="23 10." halign="right" textsize="4" class="ComponentRaceMapInfos_text-default" italicslope=".2" textcolor="6EFAA0"/>
				<label id="ComponentRaceMapInfos_label-zone" pos="57.25 0." size="52 10." halign="right" valign="top" textsize="4" class="ComponentRaceMapInfos_text-default" italicslope=".2" textfont="GameFontRegular" textcolor="6EFAA0" translate="1"/>
			</frame>
			<frame id="ComponentRaceMapInfos_frame-ranking-3" pos="7.08472 -16.5333" scale="0.75" z-index="5" hidden="1">
				<label id="ComponentRaceMapInfos_label-ranking" size="23 10." halign="right" textsize="4" class="ComponentRaceMapInfos_text-default" italicslope=".2" textcolor="6EFAA0"/>
				<label id="ComponentRaceMapInfos_label-zone" pos="57.25 0." size="52 10." halign="right" valign="top" textsize="4" class="ComponentRaceMapInfos_text-default" italicslope=".2" textfont="GameFontRegular" textcolor="6EFAA0" translate="1"/>
			</frame>
		</frame>

		<frameinstance id="ComponentRaceMapInfos_frameinstance-medal-stack" modelid="component-medalstack" pos="-52.2 -5.10288" scale="0.8" data-bigmedaldirection="1" data-iscolorize="0" data-isingame="1" data-displayshadows="1"/>
		<frame id="ComponentRaceMapInfos_frame-next-medal" pos="19.575 -14.2881">
			<quad id="ComponentRaceMapInfos_quad-next-medal" size="6.5 6.5" class="ComponentRaceMapInfos_quad-default" autoscale="0" pos="0 0.5"/>
			<label id="ComponentRaceMapInfos_label-next-medal-time" textcolor="FFF" pos="4 0" size="30. 10." textsize="4" halign="left" class="ComponentRaceMapInfos_text-default" italicslope=".2"/>
		</frame>
	</frame>
</frame>
</framemodel>
<!-- @Component end component-racemapinfos -->

<!-- @Component start component-tmgame-record -->
<framemodel id="component-tmgame-record"></framemodel>
<!-- @Component end component-tmgame-record -->

<!-- @Component start Component_UIModule_Race_ScoresTable_Visibility -->
<framemodel id="Component_UIModule_Race_ScoresTable_Visibility">
</framemodel>
<!-- @Component end Component_UIModule_Race_ScoresTable_Visibility -->

<!-- @Component start component-latency-test -->
<framemodel id="component-latency-test"></framemodel>
<!-- @Component end component-latency-test -->

<!-- @Component start component-cmgame-slider -->
<framemodel id="component-cmgame-slider">
<frame id="CMGame_Slider_frame-counter-rot" class="CMGame_Slider_slider">
	<frame id="CMGame_Slider_frame-slider-align">
		<frame id="CMGame_Slider_frame-vcenter">
			<frame id="CMGame_Slider_frame-bar">
				<frame id="CMGame_Slider_frame-clip-bar-left" valign="center" size="0 0" z-index="0">
					<quad id="CMGame_Slider_quad-bar-left" valign="center" bgcolor="ffffff" />
				</frame>
				<frame id="CMGame_Slider_frame-clip-bar-right" halign="right" valign="center" size="0 0" z-index="0">
					<quad id="CMGame_Slider_quad-bar-right" halign="right" valign="center" bgcolor="ffffff" />
				</frame>
			</frame>
			<quad id="CMGame_Slider_quad-bar-mouse" class="component-navigation-item-zone CMGame_Slider_slider-bar" z-index="1" valign="center" opacity="0" scriptevents="1" />
			<quad id="CMGame_Slider_quad-cursor" class="component-navigation-item-zone" z-index="2" valign="center" bgcolor="ffffff" scriptevents="1" />
		</frame>
	</frame>
</frame>
</framemodel>
<!-- @Component end component-cmgame-slider -->

<!-- @Component start component-display-version -->
<framemodel id="component-display-version">
<label class="ComponentDisplayVersion_label-version" size="72 6" valign="center2" opacity="0.9" textsize="1" textfont="GameFontExtraBold" textprefix="$t$i" focusareacolor1="00000000" focusareacolor2="00000000" scriptevents="1" />
		</framemodel>
<!-- @Component end component-display-version -->

<!-- @Component start onlineservices-status-api -->
<framemodel id="onlineservices-status-api">
		</framemodel>
<!-- @Component end onlineservices-status-api -->

<!-- @Component start lib-online-services-status-store -->
<framemodel id="lib-online-services-status-store">
		</framemodel>
<!-- @Component end lib-online-services-status-store -->

<!-- @Component start component-onlineservicescard -->
<framemodel id="component-onlineservicescard">
<stylesheet>
	<style class="ComponentOnlineServicesStatusCard_text-bold" textsize="4" textprefix="$t$i" textfont="GameFontExtraBold" textcolor="ffffff" halign="center" valign="center2" />
	<style class="ComponentOnlineServicesStatusCard_text-semibold" textsize="2" textprefix="$t$i" textfont="GameFontSemiBold" textcolor="ffffff" halign="center" valign="center2" />
	<style class="ComponentOnlineServicesStatusCard_text-regular" textsize="2" textprefix="$i" textfont="GameFontRegular" textcolor="ffffff" halign="center" valign="center2" />
</stylesheet>

<!-- Online Services status card -->
<frame id="ComponentOnlineServicesStatusCard_frame-global" class="class-component-onlineservicescard" hidden="1">
	<frameinstance
		id="ComponentOnlineServicesStatusCard_expendable-bg-online-services-status"
		modelid="component-cmgame-expendable-asset"
		z-index="-1"
		data-width="80"
		data-height="25"
		data-halign="center"
		data-valign="center"
		data-color="000514"
		data-opacity="0.6"
		data-styles="component-trackmania-expendable-asset-style-edges-rounded"
	/>
	<frameinstance
		id="ComponentOnlineServicesStatusCard_expendable-contour-online-services-status"
		modelid="component-cmgame-expendable-asset"
		z-index="1"
		data-width="80"
		data-height="25"
		data-halign="center"
		data-valign="center"
		data-color="FFF"
		data-opacity="1."
		data-styles="component-trackmania-expendable-asset-style-contour-rounded"
	/>
	<label class="ComponentOnlineServicesStatusCard_text-semibold" text="Online services status" pos="1.41062 8." size="70 8" />
	<label id="ComponentOnlineServicesStatusCard_label-online-services-status-name" class="ComponentOnlineServicesStatusCard_text-bold" pos="0.528981 3." size="70 10" />
	<label id="ComponentOnlineServicesStatusCard_label-online-services-status-details" class="ComponentOnlineServicesStatusCard_text-regular" maxline="3" pos="-0.881635 -5." size="70 20" />
</frame>
		</framemodel>
<!-- @Component end component-onlineservicescard -->

<!-- @Component start component-settings -->
<framemodel id="component-settings">
<stylesheet>
	<style class="ComponentSettings_text-bold" valign="center2" textfont="GameFontExtraBold" textprefix="$t$i" textcolor="ffffff" textsize="3" />
	<style class="ComponentSettings_text-semibold" valign="center2" textfont="GameFontSemiBold" textprefix="$t$i" textcolor="ffffff" textsize="3" />
	<style class="ComponentSettings_text-regular" valign="center2" textfont="GameFontRegular" textprefix="$t$i" textcolor="ffffff" textsize="3" />
</stylesheet>

<!-- Keybind display -->
<framemodel id="ComponentSettings_framemodel-keybind">
	<frameinstance
		id="ComponentSettings_asset-bg-keybind"
		modelid="component-cmgame-expendable-asset"
		z-index="0"
		data-width="20"
		data-height="6.5"
		data-halign="left"
		data-valign="center"
		data-color="000514"
		data-opacity="0.2"
	/>
	<label id="ComponentSettings_label-keybind" class="ComponentSettings_text-bold" z-index="1" size="20 6.5" halign="center" textsize="2.5" opacity="0.6" translate="0" />
	<quad id="ComponentSettings_quad-pad-button-icon" z-index="2" size="7.33333 7.33333" valign="center" hidden="1" />
</framemodel>

<!-- One line of setting in the scroll -->
<framemodel id="ComponentSettings_framemodel-setting-line" class="component-navigation-container">
	<label id="ComponentSettings_label-section-name" class="ComponentSettings_text-bold" pos="1. -9.33333" z-index="0" size="262. 9.33333" valign="bottom" textsize="3.3" hidden="1" />
	<quad id="ComponentSettings_quad-lock" pos="-1 -4.66667" size="8.4 8.4" halign="right" valign="center" image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/icons_128_settings_lock_inc.dds" colorize="ffffff" opacity="0.4" hidden="1" />

	<frame id="ComponentSettings_frame-setting-line-bg" z-index="1">
		<quad class="menu-libs-scroll-activation-zone" size="264. 9.33333" opacity="0" scriptevents="1"/>
		<frameinstance
			id="ComponentSettings_asset-bg-left"
			modelid="component-cmgame-expendable-asset"
			z-index="1"
			data-width="176."
			data-height="9.33333"
			data-halign="left"
			data-valign="top"
			data-color="000514"
			data-image-left="file://Media/Manialinks/Nadeo/CMGame/Utils/ButtonStyles/Rounded/Common_Button_Start_Rounded.dds"
			data-size-left="128 256"
			data-colormode-left="1"
			data-opacity="0.6"
		/>
		<frameinstance
			id="ComponentSettings_asset-bg-right"
			modelid="component-cmgame-expendable-asset"
			pos="174.354 0"
			z-index="2"
			data-width="89.6457"
			data-height="9.33333"
			data-halign="left"
			data-valign="top"
			data-color="009B5F"
			data-image-right="file://Media/Manialinks/Nadeo/CMGame/Utils/ButtonStyles/Rounded/Common_Button_End_Rounded.dds"
			data-size-right="128 256"
			data-colormode-right="1"
			data-opacity="0.6"
		/>
		<frameinstance
			id="ComponentSettings_asset-bg-disabled"
			modelid="component-cmgame-expendable-asset"
			z-index="3"
			data-width="264."
			data-height="9.33333"
			data-halign="left"
			data-valign="top"
			data-color="000514"
			data-styles="component-trackmania-expendable-asset-style-edges-rounded"
			data-opacity="0.6"
			hidden="1"
		/>
	</frame>
	<frame id="ComponentSettings_frame-widget" pos="0 -4.66667" z-index="2">
		<label id="ComponentSettings_label-name" class="ComponentSettings_text-semibold" pos="3. -0.466667" size="170. 9.33333" textsize="2.5" opacity="0.6" />

		<!-- List widget -->
		<frame id="ComponentSettings_frame-type-list" pos="174.354 0." hidden="1">
			<frameinstance
				id="ComponentSettings_button-list-previous"
				modelid="component-trackmania-button"
				class="component-navigation-item component-settings-focus-setting-line component-menusounds-item"
				pos="8. 0."
				data-size="5.6 5.6"
				data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
				data-bgcolor="FFFFFF"
				data-focuscolor="FFFFFF"
				data-opacity="0.6"
				data-opacityunfocus="0.6"
				data-halign="left"
				data-valign="center"
				data-nav-group="navgroup-component-settings-mouseonly"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				data-menusounds-selectsound="ArrowSelect"
				data-menusounds-playsoundonlyformouse="1"
			/>
			<frameinstance
				id="ComponentSettings_button-list-next"
				modelid="component-trackmania-button"
				class="component-navigation-item component-settings-focus-setting-line component-menusounds-item"
				pos="81.6457 0."
				data-size="5.6 5.6"
				data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
				data-bgcolor="FFFFFF"
				data-focuscolor="FFFFFF"
				data-opacity="0.6"
				data-opacityunfocus="0.6"
				data-halign="right"
				data-valign="center"
				data-nav-group="navgroup-component-settings-mouseonly"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				data-menusounds-selectsound="ArrowSelect"
				data-menusounds-playsoundonlyformouse="1"
			/>
			<quad
				id="ComponentSettings_quad-list-previous-disabled"
				pos="8. 0."
				size="5.6 5.6"
				halign="left"
				valign="center"
				image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
				colorize="FFFFFF"
				opacity="0.2"
				hidden="1"
			/>
			<quad
				id="ComponentSettings_quad-list-next-disabled"
				pos="81.6457 0."
				size="5.6 5.6"
				halign="right"
				valign="center"
				image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
				colorize="FFFFFF"
				opacity="0.2"
				hidden="1"
			/>
			<label id="ComponentSettings_label-list-value" class="ComponentSettings_text-semibold" pos="44.8229 -0.466667" size="63.0457 9.33333" halign="center" textsize="2.5" opacity="0.6" translate="1" />
		</frame>

		<!-- Checkbox widget -->
		<frame id="ComponentSettings_frame-type-checkbox" pos="219.177 0." hidden="1">
			<frameinstance
				id="ComponentSettings_checkbox-value"
				modelid="component-checkbox"
				class="component-navigation-item component-settings-focus-setting-line component-settings-no-focus component-menusounds-item"
				data-opacityfocus="0.6"
				data-opacityunfocus="0.6"
				data-iconchecked="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/Icones_128_icon_checkbox_square_active_01_oblique.dds"
				data-iconunchecked="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/Icones_128_icon_checkbox_square_inactive_01_oblique.dds"
				data-iconcolor="FFFFFF"
				data-iconsize="8 8"
				data-texthalign="left"
				data-textfont="GameFontSemiBold"
				data-textcolor="FFFFFF"
				data-textsize="2.5"
				data-textxpos="0.7"
				data-fitlabel="1"
				data-halign="center"
				data-valign="center"
				data-nav-group="navgroup-component-settings-mouseonly"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="trackmania-checkbox_quad-activation"
				data-menusounds-playsoundonlyformouse="1"
			/>
		</frame>

		<!-- Slider widget -->
		<frame id="ComponentSettings_frame-type-slider" pos="219.177 0." hidden="1">
			<frame id="ComponentSettings_frame-slider-align">
				<frameinstance
					id="ComponentSettings_textfield-slider-value"
					modelid="component-textfield"
					class="component-navigation-item component-settings-focus-setting-line component-settings-no-focus component-menusounds-item"
					pos="-35.5 0"
					data-size="14 6.5"
					data-halign="center"
					data-valign="center"
					data-textsize="2.5"
					data-bgopacityfocus="0.8"
					data-bgopacityunfocus="0.2"
					data-textopacityfocus="1."
					data-textopacityunfocus="0.6"
					data-nav-inputs="select"
					data-nav-targets="_"
					data-nav-group="navgroup-component-settings-mouseonly"
					data-nav-zone="CMGame_TextField_quad-activation"
					data-menusounds-playsoundonlyformouse="1"
				/>
				<label id="ComponentSettings_label-slider-value-disabled" class="ComponentSettings_text-semibold" pos="-35.5 -0.466667" size="14 6.5" halign="center" textsize="2.5" textcolor="808080" hidden="1" />
				<frameinstance
					id="ComponentSettings_slider-value"
					modelid="component-cmgame-slider"
					class="component-navigation-item component-settings-focus-setting-line component-menusounds-item"
					data-halign="center"
					data-valign="center"
					data-opacity="0.6"
					data-nav-group="navgroup-component-settings-mouseonly"
					data-nav-zone="CMGame_Slider_quad-bar-left CMGame_Slider_quad-bar-right CMGame_Slider_quad-cursor"
					data-menusounds-playsoundonlyformouse="1"
				/>
			</frame>
		</frame>

		<!-- Text field widget -->
		<frame id="ComponentSettings_frame-type-textfield" pos="219.177 0." hidden="1">
			<frameinstance
				id="ComponentSettings_textfield-value"
				modelid="component-textfield"
				class="component-navigation-item component-settings-focus-setting-line component-settings-no-focus component-menusounds-item"
				data-size="63 6.5"
				data-halign="center"
				data-valign="center"
				data-textsize="2.5"
				data-bgopacityfocus="0.8"
				data-bgopacityunfocus="0.2"
				data-textopacityfocus="1."
				data-textopacityunfocus="0.6"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-settings-mouseonly"
				data-nav-zone="CMGame_TextField_quad-activation"
				data-menusounds-playsoundonlyformouse="1"
			/>
			<label id="ComponentSettings_label-textfield-disabled" class="ComponentSettings_text-semibold" pos="0 -0.466667" size="83.6457 9.33333" halign="center" textsize="2.5" textcolor="808080" hidden="1" />
		</frame>

		<!-- Binding widget -->
		<frame id="ComponentSettings_frame-type-binding" pos="176. 0." size="86.3543 9.33333" halign="left" valign="center" hidden="1">
			<frame id="ComponentSettings_frame-align-keybinds">
				<frameinstance modelid="ComponentSettings_framemodel-keybind" class="ComponentSettings_keybind ComponentSettings_text-to-speech" />
				<frameinstance modelid="ComponentSettings_framemodel-keybind" class="ComponentSettings_keybind" />
				<frameinstance modelid="ComponentSettings_framemodel-keybind" class="ComponentSettings_keybind" />
				<frameinstance modelid="ComponentSettings_framemodel-keybind" class="ComponentSettings_keybind" />
				<frameinstance modelid="ComponentSettings_framemodel-keybind" class="ComponentSettings_keybind" />
			</frame>
		</frame>

		<!-- Button widget -->
		<frame id="ComponentSettings_frame-type-button" pos="219.177 0." hidden="1">
			<label id="ComponentSettings_label-button-value" class="ComponentSettings_text-bold" pos="0 -0.466667" size="83.6457 9.33333" halign="center" textsize="2.5" opacity="0.6" />
		</frame>

		<!-- Latency test widget -->
		<frame id="menu-libs-latency-test_frame-latency-test" pos="219.177 0." hidden="1">
			<label id="menu-libs-latency-test_label-latency-ms" class="ComponentSettings_text-semibold" pos="0 -0.466667" size="22.4114 9.33333" halign="left" textsize="2.5" />
			<label id="menu-libs-latency-test_label-latency-text" class="ComponentSettings_text-regular" pos="0 -0.466667" size="53.7874 9.33333" halign="right" textsize="1.5" />
			<label id="menu-libs-latency-test_label-remaining-inputs" class="ComponentSettings_text-semibold" pos="38.5477 -0.466667" size="17.9291 9.33333" halign="right" textsize="2.5" textcolor="000A05"/>
			<frameinstance id="menu-libs-latency-buttonicon-input" modelid="component-button-icon-2" data-size="8 8" data-bind="A" data-opacity="0"/>
		</frame>
	</frame>
</framemodel>

<frame id="ComponentSettings_frame-global" class="component-navigation-item" data-nav-inputs="cancel;appmenu" data-nav-targets="_;_" data-nav-group="navgroup-component-settings-global">
	<!-- Background -->
	<quad id="ComponentSettings_capture-mouse-events" size="320 180" z-index="-2" halign="center" valign="center" opacity="0" fullscreen="1" scriptevents="1" />
	<quad id="ComponentSettings_quad-background" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_profile_background_map_gradients.dds" size="320 180" z-index="-1" halign="center" valign="center" fullscreen="1" />

	<!-- Dimmer -->
	<quad id="ComponentSettings_quad-dimmer" size="320 180" z-index="2" halign="center" valign="center" fullscreen="1" bgcolor="000514" opacity="0" hidden="1" />

	<!-- Discard changes pop-up -->
	<frameinstance
		id="ComponentSettings_pop-up-discard-changes"
		modelid="component-popupmultichoice"
		z-index="3"
		data-title="Discard changes"
		data-description="[{&quot;TextFitLabelEnabled&quot;:true,&quot;TextFontSize&quot;:3,&quot;TextFont&quot;:&quot;GameFontRegular&quot;,&quot;TextPrefix&quot;:&quot;$t$i&quot;,&quot;TextValue&quot;:&quot;You have not applied your new settings.&quot;,&quot;TextSize&quot;:[130,15],&quot;TextColor&quot;:[1,1,1]},{&quot;TextFitLabelEnabled&quot;:true,&quot;TextFontSize&quot;:3,&quot;TextFont&quot;:&quot;GameFontSemiBold&quot;,&quot;TextPrefix&quot;:&quot;$t$i&quot;,&quot;TextValue&quot;:&quot;Are you sure you want to discard your changes?&quot;,&quot;TextSize&quot;:[130,10],&quot;TextColor&quot;:[0.431373,0.980392,0.627451]}]"
		data-choices="{&quot;0&quot;:&quot;Cancel&quot;,&quot;1&quot;:&quot;|Infinitive|Confirm&quot;}"
		data-styles-secondchoice="component-trackmania-expendable-button-style-size-expendable component-trackmania-expendable-button-style-align-center component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-warning"
		data-close-after-selection="0"
		hidden="1"
	/>

	<!-- Activate key confirmation -->
	<frameinstance
		id="ComponentSettings_popupmultichoice-activate-key" z-index="6."
		modelid="component-popupmultichoice"
		data-title="Activate a key"
		data-choices="{&quot;0&quot;:&quot;Cancel&quot;,&quot;1&quot;:&quot;Activate&quot;}"
		hidden="1"
	/>

	<!-- Player card -->
	<frame id="ComponentSettings_frame-player-card" pos="-104.5 73">
		<quad z-index="0" size="91.56 11.76" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Overlays/Common_Widget_Double.dds" />
		<quad id="ComponentSettings_quad-player-card-flag" pos="-46.6956 0" z-index="1" size="19.488 11.76" keepratio="Clip" image="file://ZoneFlags/Path/World" alphamask="file://Media/Manialinks/Nadeo/Trackmania/Menus/Overlays/Menu_Widget_Profile_Flag_Mask.dds" valign="center" />
		<frameinstance id="ComponentSettings_playername-player-card-name" modelid="component-cmgame-player-name" pos="-21 1.75" z-index="2" data-size="64 10" data-textsize="3" data-valign="center2" data-textfont="GameFontExtraBold" data-textprefix="$t$i" data-textcolor="ffffff" />
		<label id="ComponentSettings_label-player-card-zone" class="ComponentSettings_text-semibold" pos="-21.5 -3.9" z-index="2" size="62 10" textsize="1" textcolor="6EFAA0" />
	</frame>

	<!-- Online services status card -->
	<frameinstance id="ComponentSettings_online-services-status-card" modelid="component-onlineservicescard"	pos="107.5 73" />

	<!-- Game restart required message -->
	<label id="ComponentSettings_label-restart-required" class="ComponentSettings_text-semibold" pos="149 73" size="200 6" halign="right" textsize="2" textcolor="ff0000" text="Game restart required" hidden="1" />

	<!-- Tabs -->
	<frameinstance
		id="ComponentSettings_navigationtabs-categories"
		modelid="component-navigationtabs"
		pos="-123 49.5"
		data-halign="left"
	/>

	<!-- Display area calibration -->
	<frame id="ComponentSettings_frame-area-calibration">
		<quad id="ComponentSettings_quad-arrow-top-left" pos="-160 90" size="20. 20." halign="left" valign="bottom" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Settings/Menu_Settings_Arrow.dds" colorize="FFFFFF" rot="90" opacity="0." />
		<quad id="ComponentSettings_quad-arrow-top-right" pos="160 90" size="20. 20." halign="left" valign="bottom" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Settings/Menu_Settings_Arrow.dds" colorize="FFFFFF" rot="180" opacity="0." />
		<quad id="ComponentSettings_quad-arrow-bottom-left" pos="-160 -90" size="20. 20." halign="left" valign="bottom" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Settings/Menu_Settings_Arrow.dds" colorize="FFFFFF" rot="0" opacity="0." />
		<quad id="ComponentSettings_quad-arrow-bottom-right" pos="160 -90" size="20. 20." halign="left" valign="bottom" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Settings/Menu_Settings_Arrow.dds" colorize="FFFFFF" rot="-90" opacity="0." />
	</frame>

	<!-- Settings scroll -->
	<frameinstance modelid="menu-libs-scroll" data-scroll-parent="ComponentSettings_scroll-settings" z-index="1" />
	<frame
		id="ComponentSettings_scroll-settings"
		class="menu-libs-scroll-window component-navigation-item"
		pos="-124.5 41.9"
		data-elements-per-line="1"
		data-element-size="264. 9.33333"
		data-margin-size="1. 2."
		data-window-size="264. 100."
		data-skew="-10"
		data-scrollpadding="25"
		data-scrollbar-xoffset="2"
		data-scroll-indicator-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_BOTTOM_OBLIQUE.dds"
		data-scroll-indicator-colorize="FFFFFF"
		data-scroll-indicator-size="12"
		data-scroll-indicator-x-offset="-16"
		data-scroll-indicator-y-offset="-10"
		data-nav-group="navgroup-component-settings-main"
	>
		<quad z-index="-1" scriptevents="1" class="menu-libs-scroll-event" />
		
			<frameinstance
				modelid="ComponentSettings_framemodel-setting-line"
				class="menu-libs-scroll-element component-menusounds-item"
				data-menusounds-selectsound="MenuSounds_UseSoundName_None"
				hidden="1"
			/>
		
			<frameinstance
				modelid="ComponentSettings_framemodel-setting-line"
				class="menu-libs-scroll-element component-menusounds-item"
				data-menusounds-selectsound="MenuSounds_UseSoundName_None"
				hidden="1"
			/>
		
			<frameinstance
				modelid="ComponentSettings_framemodel-setting-line"
				class="menu-libs-scroll-element component-menusounds-item"
				data-menusounds-selectsound="MenuSounds_UseSoundName_None"
				hidden="1"
			/>
		
			<frameinstance
				modelid="ComponentSettings_framemodel-setting-line"
				class="menu-libs-scroll-element component-menusounds-item"
				data-menusounds-selectsound="MenuSounds_UseSoundName_None"
				hidden="1"
			/>
		
			<frameinstance
				modelid="ComponentSettings_framemodel-setting-line"
				class="menu-libs-scroll-element component-menusounds-item"
				data-menusounds-selectsound="MenuSounds_UseSoundName_None"
				hidden="1"
			/>
		
			<frameinstance
				modelid="ComponentSettings_framemodel-setting-line"
				class="menu-libs-scroll-element component-menusounds-item"
				data-menusounds-selectsound="MenuSounds_UseSoundName_None"
				hidden="1"
			/>
		
			<frameinstance
				modelid="ComponentSettings_framemodel-setting-line"
				class="menu-libs-scroll-element component-menusounds-item"
				data-menusounds-selectsound="MenuSounds_UseSoundName_None"
				hidden="1"
			/>
		
			<frameinstance
				modelid="ComponentSettings_framemodel-setting-line"
				class="menu-libs-scroll-element component-menusounds-item"
				data-menusounds-selectsound="MenuSounds_UseSoundName_None"
				hidden="1"
			/>
		
			<frameinstance
				modelid="ComponentSettings_framemodel-setting-line"
				class="menu-libs-scroll-element component-menusounds-item"
				data-menusounds-selectsound="MenuSounds_UseSoundName_None"
				hidden="1"
			/>
		
			<frameinstance
				modelid="ComponentSettings_framemodel-setting-line"
				class="menu-libs-scroll-element component-menusounds-item"
				data-menusounds-selectsound="MenuSounds_UseSoundName_None"
				hidden="1"
			/>
		
	</frame>

	<!-- Info labels -->
	<frame pos="0 -68.5">
		<label id="ComponentSettings_label-info-title" class="ComponentSettings_text-bold" size="160 6" halign="center" textcolor="6EFAA0" />
		<label id="ComponentSettings_label-info-description" class="ComponentSettings_text-semibold" pos="0 -3" size="160 20" halign="center" valign="top" textsize="2" maxline="3" />
		<label id="ComponentSettings_label-info-alert" class="ComponentSettings_text-semibold" pos="0 -3" size="160 20" halign="center" valign="top" textsize="2.5" textcolor="6EFAA0" autonewline="1" maxline="3"/>
	</frame>

	<!-- Bottom buttons -->
	<frame pos="0 -73">
		<frameinstance id="ComponentSettings_button-icon-back" modelid="component-button-icon-2" pos="-151.5 0" z-index="3" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="ComponentSettings_button-back"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item component-settings-bottom-button component-menusounds-item"
			pos="-151.5 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable component-trackmania-expendable-button-style-page-back"
			data-valign="center"
			data-max-width="70"
			data-nav-inputs="select;right;up"
			data-nav-targets="_;ComponentSettings_button-apply;ComponentSettings_scroll-settings"
			data-nav-group="navgroup-component-settings-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-menusounds-selectsound="BackButtonSelect"
		/>
		<frameinstance
			id="ComponentSettings_button-apply"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item component-settings-bottom-button"
			pos="151 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="|Settings|Apply"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;up"
			data-nav-targets="_;ComponentSettings_button-back;ComponentSettings_scroll-settings"
			data-nav-group="navgroup-component-settings-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
		<quad id="ComponentSettings_quad-pending-changes" pos="150.25 5.75" z-index="3" size="3 3" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Settings/Menu_Settings_PendingChanges.dds" colorize="6EFAA0" hidden="1" />
		<frameinstance modelid="component-button-icon-2" pos="155 0" z-index="4" data-size="8 8" data-bind="menu" data-hideformouse="1" />
	</frame>

	<!-- Version number -->
	<frame pos="-155 -84.1">
		<frameinstance modelid="component-display-version" />
	</frame>

	<!-- Controller info -->
	<frameinstance id="ComponentSettings_button-list-settings" modelid="component-menu-button-list" z-index="4" />
</frame>
		</framemodel>
<!-- @Component end component-settings -->

<frame z-index="3" hidden="1" id="frame-global">
	<quad bgcolor="000" size="320 180" fullscreen="1" halign="center" valign="center" z-index="-3" opacity=".6"/>
	<frameinstance id="menubuttonlist-pause-menu-campaign" modelid="component-menu-button-list" z-index="1" />

	<frameinstance
		id="popupmultichoice-leave-stunt-session" z-index="3" hidden="1"
		modelid="component-popupmultichoice"
		data-title="Leave stunt session "
		data-choices="{&quot;0&quot;:&quot;Cancel&quot;,&quot;1&quot;:&quot;Leave&quot;}"
		data-description="[{&quot;TextFitLabelEnabled&quot;:true,&quot;TextFontSize&quot;:3,&quot;TextFont&quot;:&quot;GameFontRegular&quot;,&quot;TextPrefix&quot;:&quot;$t$i&quot;,&quot;TextValue&quot;:&quot;Your stunt session is not yet validated. Your current score will be lost because you have not crossed the finish line.&quot;,&quot;TextSize&quot;:[130,15],&quot;TextColor&quot;:[1,1,1]},{&quot;TextFitLabelEnabled&quot;:true,&quot;TextFontSize&quot;:3,&quot;TextFont&quot;:&quot;GameFontSemiBold&quot;,&quot;TextPrefix&quot;:&quot;$t$i&quot;,&quot;TextValue&quot;:&quot;Are you sure you want to leave this stunt session?&quot;,&quot;TextSize&quot;:[130,20],&quot;TextColor&quot;:[0.431373,0.980392,0.627451]}]"
		data-styles-secondchoice="choice-style-button-default component-trackmania-expendable-button-style-warning"
	/>

	<frame id="frame-report-system" z-index="1" hidden="1">
		<frameinstance id="frame-report-system-pause-menu-campaign" modelid="component-popupreportsystem" />
	</frame>

	<frame id="frame-settings" z-index="2" hidden="1">
		<frameinstance modelid="component-settings" />
	</frame>

	<frame id="frame-credits" z-index="3" hidden="1">
		<frameinstance modelid="component-credits" />
	</frame>

	<frame id="frame-profile" z-index="4" hidden="1">
		<frameinstance
			modelid="component-profileplayerinfo"
			data-enable-players-pager="0"
			data-enable-zone-selection="0"
			data-enable-my-access-info="0"
			data-enable-garage="0"
		/>
	</frame>

	<frame id="frame-menu">
		<frameinstance id="frame-race-map-infos" modelid="component-racemapinfos" z-index="-2"/>
		<frame id="frame-buttons-container" class="component-grid-container">
			<frameinstance
				modelid="component-trackmania-button" id="button-resume"
				class="component-navigation-item component-menusounds-item component-grid-element"
				data-grid-row="0"
				data-text="Resume"
				data-size="125. 10.6952"
				data-textcolor="6EFAA0"
				data-textfocuscolor="003228"
				data-image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner_Focused.dds"
				data-backgroundcolortype="0"
				data-textfont="GameFontExtraBold"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right;pageup;pagedown"
				data-nav-targets="_;_;_;button-exit;button-restart;frame-maniapubs;_;_"
				data-nav-group="navgroup-campaign-pausemenu-default"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				data-menusounds-selectsound="IngameSelectStartRace"
			/>
			<frameinstance
				modelid="component-trackmania-button" id="button-restart"
				class="component-navigation-item component-menusounds-item component-grid-element"
				data-grid-row="1"
				data-text="Change opponents"
				data-size="125. 10.6952"
				data-textcolor="6EFAA0"
				data-textfocuscolor="003228"
				data-image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner_Focused.dds"
				data-backgroundcolortype="0"
				data-textfont="GameFontExtraBold"
				data-opacityunfocus=".9"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-textitalicslope=".2"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right;pageup;pagedown"
				data-nav-targets="_;_;_;button-resume;button-favorite-map;frame-maniapubs;_;_"
				data-nav-group="navgroup-campaign-pausemenu-default"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				z-index="2"
				data-menusounds-selectsound="IngameSelectChangeOpponent"
			/>
			<frame id="frame-favorite-map" class="component-grid-element" data-grid-row="2">
				<frameinstance
					modelid="component-trackmania-button" id="button-favorite-map"
					class="component-navigation-item component-menusounds-item"
					data-text="Add track to favorites"
					data-size="125. 10.6952"
					data-labelsize="100. 10.6952"
					data-textcolor="6EFAA0"
					data-textfocuscolor="003228"
					data-image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner.dds"
					data-imagefocus="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner_Focused.dds"
					data-backgroundcolortype="0"
					data-textfont="GameFontExtraBold"
					data-opacityunfocus=".9"
					data-textsize="4"
					data-textopacityunfocus=".4"
					data-textitalicslope=".2"
					data-halign="center" data-valign="center"
					data-nav-inputs="select;cancel;appmenu;up;down;right;pageup;pagedown"
					data-nav-targets="_;_;_;button-restart;button-scorestable;frame-maniapubs;_;_"
					data-nav-group="navgroup-campaign-pausemenu-default"
					data-nav-zone="ComponentTrackmania_Button_quad-background"
					z-index="2"
				/>
				<frameinstance id="frame-loading-spinner" z-index="3" scale="0.5" pos="55 0" data-color="003228" modelid="component-loadingspinner"/>
			</frame>
			<frameinstance
				modelid="component-trackmania-button" id="button-scorestable"
				class="component-navigation-item component-menusounds-item component-grid-element"
				data-grid-row="3"
				data-text="Consult scores table"
				data-size="125. 10.6952"
				data-textcolor="6EFAA0"
				data-textfocuscolor="003228"
				data-image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner_Focused.dds"
				data-backgroundcolortype="0"
				data-textfont="GameFontExtraBold"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right;pageup;pagedown"
				data-nav-targets="_;_;_;button-favorite-map;button-records;frame-maniapubs;_;_"
				data-nav-group="navgroup-campaign-pausemenu-default"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				data-menusounds-selectsound="IngameSelectStartRace"
			/>
			<frameinstance
				modelid="component-trackmania-button" id="button-records"
				class="component-navigation-item component-menusounds-item component-grid-element"
				data-grid-row="4"
				data-text="Access records"
				data-size="125. 10.6952"
				data-textcolor="6EFAA0"
				data-textfocuscolor="003228"
				data-image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner_Focused.dds"
				data-backgroundcolortype="0"
				data-textfont="GameFontExtraBold"
				data-opacityunfocus=".9"
				data-textitalicslope=".2"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right;pageup;pagedown"
				data-nav-targets="_;_;_;button-scorestable;button-settings;frame-maniapubs;_;_"
				data-nav-group="navgroup-campaign-pausemenu-default"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				data-menusounds-selectsound="IngameSelectStartRace"
			/>
			<frameinstance
				modelid="component-trackmania-button" id="button-settings"
				class="component-navigation-item component-menusounds-item component-grid-element"
				data-grid-row="5"
				data-text="Settings"
				data-size="125. 10.6952"
				data-textcolor="6EFAA0"
				data-textfocuscolor="003228"
				data-image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner_Focused.dds"
				data-backgroundcolortype="0"
				data-textfont="GameFontExtraBold"
				data-opacityunfocus=".9"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-textitalicslope=".2"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right;pageup;pagedown"
				data-nav-targets="_;_;_;button-records;button-report;frame-maniapubs;_;_"
				data-nav-group="navgroup-campaign-pausemenu-default"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				z-index="2"
			/>
			<frameinstance
				modelid="component-trackmania-button" id="button-report"
				class="component-navigation-item component-menusounds-item component-grid-element"
				data-grid-row="6"
				data-text="Report"
				data-size="125. 10.6952"
				data-textcolor="6EFAA0"
				data-textfocuscolor="003228"
				data-image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner_Focused.dds"
				data-backgroundcolortype="0"
				data-textfont="GameFontExtraBold"
				data-opacityunfocus=".9"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-textitalicslope=".2"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right;pageup;pagedown"
				data-nav-targets="_;_;_;button-settings;button-ubi-connect;frame-maniapubs;_;_"
				data-nav-group="navgroup-campaign-pausemenu-default"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				z-index="2"
			/>
			<frameinstance
				modelid="component-trackmania-button" id="button-ubi-connect"
				class="component-navigation-item component-menusounds-item component-grid-element"
				data-grid-row="7"
				data-text="Ubisoft Connect"
				data-size="125. 10.6952"
				data-textcolor="6EFAA0"
				data-textfocuscolor="003228"
				data-image="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_RoundCorner.dds"
				data-imagefocus="file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_RoundCorner_Focused.dds"
				data-backgroundcolortype="0"
				data-textfont="GameFontExtraBold"
				data-opacityunfocus=".9"
				data-textsize="4"
				data-textopacityunfocus=".4"
				data-textitalicslope=".2"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel;appmenu;up;down;right;pageup;pagedown"
				data-nav-targets="_;_;_;button-report;button-exit;frame-maniapubs;_;_"
				data-nav-group="navgroup-campaign-pausemenu-default"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				z-index="2"
			/>
			<frame id="frame-footer" class="component-grid-element" data-grid-row="9">
				<frameinstance
					id="button-exit" pos="-62.8944 0." z-index="1"
					modelid="component-cmgame-expendable-button"
					class="component-navigation-item component-menusounds-item"
					data-text="Exit"
					data-styles="component-trackmania-expendable-button-style-stack component-trackmania-expendable-button-style-page-previous component-trackmania-expendable-button-style-in-game-menu-footer-button"
					data-width="48.9795" data-height="14.5"
					data-icon-size="10 10" data-icon-offset="-5 0"
					data-icon-align="0"
					data-text-size="34.2856 14.5"
					data-text-offset="-7 -0.4"
					data-halign="left" data-valign="center"
					data-nav-inputs="select;cancel;appmenu;up;down;right;pageup;pagedown"
					data-nav-targets="_;_;_;button-ubi-connect;button-resume;button-vote-dislike;_;_"
					data-nav-group="navgroup-campaign-pausemenu-default"
					data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
					data-menusounds-selectsound="IngameSelectQuit"
				/>
				<frameinstance
					id="button-vote-dislike" pos="-15.4716 0." z-index="1"
					modelid="component-cmgame-expendable-button"
					class="component-navigation-item"
					data-styles="component-trackmania-expendable-button-style-stack component-trackmania-expendable-button-style-in-game-menu-footer-button"
					data-width="16.25" data-height="14.5"
					data-text-size="16.25 14.5"
					data-text-textsize="7"
					data-text-offset="-7 -1"
					data-halign="left" data-valign="center"
					data-nav-inputs="select;cancel;appmenu;up;down;left;right;pageup;pagedown"
					data-nav-targets="_;_;_;button-ubi-connect;button-resume;button-exit;button-vote-like;_;_"
					data-nav-group="navgroup-campaign-pausemenu-default"
					data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				/>
				<frameinstance
					id="button-vote-like" pos="-0.778369 0." z-index="1"
					modelid="component-cmgame-expendable-button"
					class="component-navigation-item"
					data-styles="component-trackmania-expendable-button-style-stack component-trackmania-expendable-button-style-in-game-menu-footer-button"
					data-width="16.25" data-height="14.5"
					data-text-size="16.25 14.5"
					data-text-offset="-7 -1"
					data-text-textsize="7"
					data-halign="left" data-valign="center"
					data-nav-inputs="select;cancel;appmenu;up;down;left;right;pageup;pagedown"
					data-nav-targets="_;_;_;button-ubi-connect;button-resume;button-vote-dislike;button-next-map;_;_"
					data-nav-group="navgroup-campaign-pausemenu-default"
					data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				/>
				<frameinstance
					id="button-next-map" pos="13.9149 0." z-index="1" hidden="1"
					modelid="component-cmgame-expendable-button"
					class="component-navigation-item component-menusounds-item"
					data-text="Next"
					data-styles="component-trackmania-expendable-button-style-stack component-trackmania-expendable-button-style-stack-bottom component-trackmania-expendable-button-style-page-next component-trackmania-expendable-button-style-in-game-menu-footer-button"
					data-width="48.9795" data-height="14.5"
					data-icon-size="10 10" data-icon-offset="-5.5 0"
					data-icon-align="1"
					data-text-size="34.2856 14.5"
					data-text-offset="-4.5 -0.4"
					data-halign="left" data-valign="center"
					data-nav-inputs="select;cancel;up;left;right;down;pageup;pagedown"
					data-nav-targets="_;_;button-ubi-connect;button-vote-like;frame-maniapubs;button-resume;_;_"
					data-nav-group="navgroup-campaign-pausemenu-default"
					data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
					data-nav-locked="1"
					data-menusounds-selectsound="IngameSelectNextMap"
				/>

				<frame id="frame-error-message" pos="-3 -14">
					<frameinstance id="frame-bg-error" modelid="component-cmgame-expendable-asset" data-width="118.75" data-height="7.48663" data-color="CE0000" data-opacity="0." data-halign="center" data-valign="center2" z-index="-1"/>
					<label id="label-error" size="112.5 10.6952" halign="center" valign="center2" textprefix="$i" textfont="GameFontSemiBold" textsize="3" textcolor="FFF"/>
				</frame>
			</frame>
		</frame>
	</frame>

	<frameinstance
		modelid="component-maniapubs" id="frame-maniapubs" hidden="1"
		pos="75. 16."
		class="component-navigation-item"
		data-nav-inputs="select;cancel;left;pageup;pagedown"
		data-nav-targets="_;_;button-resume;_;_"
		data-nav-group="navgroup-campaign-pausemenu-default"
		data-nav-zone="ComponentManiapubs_quad-activation"
		data-nav-locked="1"
	/>
</frame>

<script><!--

// @Component start share-menu-navigation
// /*

#Include "Libs/Nadeo/CMGame/Menus/ShareMenuNavigation_ML.Script.txt" as ShareMenuNavigation_ShareMenuNavigation
		
// */
// @Component end share-menu-navigation

// @Component start component-navigation
// /*

#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as ComponentNavigation_ComponentNavigation
		
// */
// @Component end component-navigation

// @Component start component-loadingspinner
// /*

#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as CMGame_LoadingSpinner
		
// */
// @Component end component-loadingspinner

// @Component start component-trackmania-button
// /*

#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Trackmania_Button
		
// */
// @Component end component-trackmania-button

// @Component start component-cmgame-expendable-button
// /*

#Include "Libs/Nadeo/CMGame/Components/ExpendableButtonBase.Script.txt" as CMGame_ExpendableButton
		
// */
// @Component end component-cmgame-expendable-button

// @Component start component-trackmania-expendable-button
// /*

#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as CMGame_ExpendableButton
		
// */
// @Component end component-trackmania-expendable-button

// @Component start menu-libs-scroll
// /*

#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as CMGame_Scroll
		
// */
// @Component end menu-libs-scroll

// @Component start component-button-icon-2
// /*

#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon2_ButtonIcon2
		
// */
// @Component end component-button-icon-2

// @Component start component-buttonslist2
// /*

#Include "TextLib" as ComponentButtonsList2_TL
#Include "MathLib" as ComponentButtonsList2_ML
#Include "ColorLib" as ComponentButtonsList2_CL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentButtonsList2_Tools

#Struct ComponentButtonsList2_K_Data {
	CMlFrame Frame_Align;
	CMlFrame[] Frames_Button;
	Text[] Binds;
	Text[] Actions;
	CMlControl::AlignHorizontal HAlign;
	CMlControl::AlignVertical VAlign;
	Vec3 Color;
	Real ButtonMaxWidth;
	Real Width;
	Text TextPrefix;
	Text TextFont;
	Real ButtonsSpacing;
	Integer[] DirtyProperties;
}

#Const ComponentButtonsList2_C_Property_Buttons 0
#Const ComponentButtonsList2_C_Property_HAlign 1
#Const ComponentButtonsList2_C_Property_VAlign 2
#Const ComponentButtonsList2_C_Property_Color 3
#Const ComponentButtonsList2_C_Property_ButtonMaxWidth 4
#Const ComponentButtonsList2_C_Property_TextPrefix 5
#Const ComponentButtonsList2_C_Property_TextFont 6
#Const ComponentButtonsList2_C_Property_ButtonsSpacing 7
		
// */
// @Component end component-buttonslist2

// @Component start component-menu-button-list
// /*

#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentMenuButtonList_Tools

// */
// @Component end component-menu-button-list

// @Component start component-cmgame-menusounds
// /*

#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as CMGame_MenuSounds

// */
// @Component end component-cmgame-menusounds

// @Component start component-credits
// /*

#Include "MathLib" as ComponentCredits_ML
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as ComponentCredits_Http

#Struct ComponentCredits_K_Controls {
	CMlFrame Scroll_Credits;
	CMlLabel Label_Licenses;
	CMlFrame Button_Back;
	CMlFrame ButtonList_Credits;
}
#Struct ComponentCredits_K_CreditSource {
	Text Location;
	Text Entity;
	Text JobTitle;
	Text Person;
}
#Struct ComponentCredits_K_CreditLine {
	Text Name;
	Integer Type;
}
#Struct ComponentCredits_K_State {
	ComponentCredits_K_Controls Controls;
	Boolean ComponentEnabled;
	ComponentCredits_Http::K_Request Request_LoadCredits;
	ComponentCredits_Http::K_Request Request_LoadLicenses;
	Boolean IsLoadingCredits;
	ComponentCredits_K_CreditLine[] CreditLines;
}
#Struct ComponentCredits_K_Event {
	Integer Type;
}

#Const ComponentCredits_C_CreditsJsonPath "file://Media/Config/Nadeo/Trackmania/Credits/Credits.json"
#Const ComponentCredits_C_LicensesTextPath "file://Media/Config/Nadeo/Trackmania/Credits/Licenses.txt"

#Const ComponentCredits_C_NavGroup_Global "navgroup-component-credits-global"
#Const ComponentCredits_C_NavGroup_Main "navgroup-component-credits-main"

#Const ComponentCredits_C_LabelType_None 0
#Const ComponentCredits_C_LabelType_Location 1
#Const ComponentCredits_C_LabelType_Entity 2
#Const ComponentCredits_C_LabelType_JobTitle 3
#Const ComponentCredits_C_LabelType_Person 4

#Const ComponentCredits_C_EventType_CloseCredits 1
		
// */
// @Component end component-credits

// @Component start structures-matchmaking
// /*

#Struct LibStructuresMatchmaking_K_Heartbeat { Text Status; Integer CreationDate; Integer MatchmakingWaitingTime; Text MatchLiveId; Integer BanEndDate; }
#Struct LibStructuresMatchmaking_K_Penalty { Integer CreationDate; Integer Points; }
#Struct LibStructuresMatchmaking_K_Inactivity { Boolean InactivityPenaltyEnabled; Real ImmunityDays; Integer Penalty; }
#Struct LibStructuresMatchmaking_K_PlayerStatus { LibStructuresMatchmaking_K_Heartbeat CurrentHeartbeat; LibStructuresMatchmaking_K_Penalty Penalty; LibStructuresMatchmaking_K_Inactivity Inactivity; Text CurrentDivision; Integer CurrentProgression; Text MatchmakingStatus; Integer MatchGenerationTimer; }
#Struct LibStructuresMatchmaking_K_PlayerRank { Integer MatchmakingId; Text AccountId; Integer Score; }
#Struct LibStructuresMatchmaking_K_PlayerProgression { Text AccountId; Text CurrentDivision; Integer CurrentProgression; }
#Struct LibStructuresMatchmaking_K_MatchParticipants { Boolean IsCompleted; LibStructuresMatchmaking_K_PlayerProgression[Text] Participants; }
#Struct LibStructuresMatchmaking_K_TeamMember { Text AccountId; Text Name; Text ClubTag; Text FlagUrl; Integer Score; Integer BestTime; Boolean IsFakeUser; }
#Struct LibStructuresMatchmaking_K_Division { Text Id; Integer Position; Text RuleType; Integer MinimumPoints; Integer MaximumPoints; Integer MinimumRank; }
#Struct LibStructuresMatchmaking_K_Mode { Text Id; Text Name; Text Info; Text QueueName; Integer MusicSection; }
#Struct LibStructuresMatchmaking_K_Queue { Text Id; Text Path; Text Name; }
#Struct LibStructuresMatchmaking_K_SuperRoyal { Integer StartsIn; Text Status; Text MatchLiveId; }
#Struct LibStructuresMatchmaking_K_SuperRoyalStatistics { Integer BronzeVictories; Integer SilverVictories; Integer GoldVictories; Integer MasterVictories; }
#Struct LibStructuresMatchmaking_K_PlayerStatistics { Integer MatchmakingId; Text AccountId; Text CurrentDivision; Integer CurrentProgression; Text BestDivision; Integer BestProgressionDate; Integer BestProgression; Text PreviousDivision; Integer PreviousProgression; Integer PreviousProgressionDate; Integer MVPCount; Integer Victories; Integer PlayedMatches; }
#Struct LibStructuresMatchmaking_K_PlayerLeaderboard { Text AccountId; Integer Rank; Integer Score; }

#Const LibStructuresMatchmaking_C_Status_NotInQueue ""
#Const LibStructuresMatchmaking_C_Status_Pending "pending"
#Const LibStructuresMatchmaking_C_Status_SkillGapCanceled "skill_gap_canceled"
#Const LibStructuresMatchmaking_C_Status_DifferentCodeCanceled "different_code_canceled"
#Const LibStructuresMatchmaking_C_Status_CrossplayCanceled "crossplay_canceled"
#Const LibStructuresMatchmaking_C_Status_MaintenanceCanceled "maintenance_canceled"
#Const LibStructuresMatchmaking_C_Status_Queued "queued"
#Const LibStructuresMatchmaking_C_Status_MatchFound "match_found"
#Const LibStructuresMatchmaking_C_Status_MatchAccepted "match_accepted"
#Const LibStructuresMatchmaking_C_Status_MatchReady "match_ready"
#Const LibStructuresMatchmaking_C_Status_Canceled "canceled"
#Const LibStructuresMatchmaking_C_Status_Banned "banned"
#Const LibStructuresMatchmaking_C_Status_UnderMaintenance "matchmaking_under_maintenance"
#Const LibStructuresMatchmaking_C_Status_OldGameVersion "old_game_version"
#Const LibStructuresMatchmaking_C_Status_Unknown "Unknown"

#Const LibStructuresMatchmaking_C_Matchmaking_Status_Enabled "enabled"
#Const LibStructuresMatchmaking_C_Matchmaking_Status_Under_Maintenance "under_maintenance"
#Const LibStructuresMatchmaking_C_Matchmaking_Status_Too_Many_Matches "too_many_matches"

#Const LibStructuresMatchmaking_C_SuperRoyal_Status_NotRegistered "not_registered"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Pending "pending"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Qualified "qualified"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Eliminated "eliminated"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Over "over"

#Const LibStructuresMatchmaking_C_RuleType_Points "points_range"
#Const LibStructuresMatchmaking_C_RuleType_MinPointsAndRank "minimum_rank_and_points"
#Const LibStructuresMatchmaking_C_RuleType_MinPoints "minimum_points"

#Const LibStructuresMatchmaking_C_MatchmakingQueueId_None "none"
#Const LibStructuresMatchmaking_C_MatchmakingQueueId_Debug "dev-ranked"

#Const LibStructuresMatchmaking_C_MatchmakingQueuePath_None ""
#Const LibStructuresMatchmaking_C_MatchmakingQueuePath_Debug "debug"

#Const LibStructuresMatchmaking_C_MatchmakingQueueName_None ""
#Const LibStructuresMatchmaking_C_MatchmakingQueueName_Debug "Official debug"

#Const LibStructuresMatchmaking_C_Status_PartyCode_NotFound 404
#Const LibStructuresMatchmaking_C_Status_PartyCode_IncompatiblePlatform 500

#Const LibStructuresMatchmaking_C_MatchmakingQueue_None LibStructuresMatchmaking_K_Queue {
	Id = "none",
	Path = "",
	Name = ""
}
#Const LibStructuresMatchmaking_C_MatchmakingQueue_Debug LibStructuresMatchmaking_K_Queue {
	Id = "dev-ranked",
	Path = "debug",
	Name = "Official debug"
}

#Const LibStructuresMatchmaking_C_Mode_Null ""
#Const LibStructuresMatchmaking_C_Mode_Teams3v3 "Teams 3v3"
#Const LibStructuresMatchmaking_C_Mode_Royal "Royal"
#Const LibStructuresMatchmaking_C_Mode_SuperRoyal "SuperRoyal"

#Const LibStructuresMatchmaking_C_Ranked_QueueId "ranked"
#Const LibStructuresMatchmaking_C_Royal_QueueId "royal"
#Const LibStructuresMatchmaking_C_SuperRoyal_QueueId "super-royal"

#Const LibStructuresMatchmaking_C_Modes [
	"Teams 3v3" => LibStructuresMatchmaking_K_Mode {
		Id = "Teams 3v3",
		Name = "Teams 3v3",
		Info = """The players are divided into two competing teams: Blue versus Red.
As the match progresses, players drive several times on the same track. Each time they earn points for their team according to their position at the finish. The distribution of points is adjusted according to the number of players starting the race. At the end of each race, the points of the players on each team are added up and the team with the most points wins the race. The first team to win 5 races wins the match.""",
		QueueName = "ranked",
		MusicSection = 1
	},
	"Royal" => LibStructuresMatchmaking_K_Mode {
		Id = "Royal",
		Name = "Royal",
		Info = """%1 teams of %2 players compete for the win.
The game is played in several rounds. Each round, the first teams to finish the race are qualified for the next round while the last ones are eliminated. After a few rounds, only %3 teams will remain. The team that wins this last race wins the match.2034""",
		QueueName = "royal",
		MusicSection = 2
	},
	"SuperRoyal" => LibStructuresMatchmaking_K_Mode {
		Id = "SuperRoyal",
		Name = "SuperRoyal",
		Info = "",
		QueueName = "super-royal",
		MusicSection = 2
	}
]
		
// */
// @Component end structures-matchmaking

// @Component start lib-user-store
// /*

#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as Trackmania_UserStore
		
// */
// @Component end lib-user-store

// @Component start lib-http-struct
// /*

#Struct LibHttpStruct_K_HttpMedia { Text buttonBackgroundUrl; Text buttonForegroundUrl; Text decalUrl; Text popUpBackgroundUrl; Text popUpImageUrl; Text liveButtonBackgroundUrl; Text liveButtonForegroundUrl; }
#Struct LibHttpStruct_K_HttpMap { Integer id; Integer position; Text mapUid; }
#Struct LibHttpStruct_K_HttpCampaign { Integer id; Text seasonUid; Text name; Integer useCase; Integer clubId; Integer year; Integer week; Integer day; Integer monthYear; Integer month; Integer monthDay; Integer startTimestamp; Integer endTimestamp; Integer rankingSentTimestamp; Integer publicationTimestamp; Integer editionTimestamp; LibHttpStruct_K_HttpMap[] playlist; }
#Struct LibHttpStruct_K_HttpDailyMap { Integer campaignId; Text mapUid; Integer day; Integer monthDay; Text seasonUid; Integer startTimestamp; Integer endTimestamp; Integer relativeStart; Integer relativeEnd; }
#Struct LibHttpStruct_K_HttpMonthlyCampaign { Integer year; Integer month; Integer lastDay; LibHttpStruct_K_HttpDailyMap[] days; LibHttpStruct_K_HttpMedia media; }
		
// */
// @Component end lib-http-struct

// @Component start structures-club
// /*

#Include "TextLib" as LibStructuresClub_TL

#Struct LibStructuresClub_K_Member { Text AccountId; Text DisplayName; Text Role; Integer JoinDate; Boolean VIP; }
#Struct LibStructuresClub_K_Activity { Integer Id; Integer ClubId; Text Name; Text Type; Integer ExternalId; Integer Position; Boolean Public; Boolean Active; Text MediaUrl; Boolean Password; Boolean Featured; Text CreatorAccountId; Text LatestEditorAccountId; }
#Struct LibStructuresClub_K_Club { Integer Id; Text Name; Text Tag; Text Description; Text AuthorAccountId; Integer CreationTimestamp; Integer EditionTimestamp; Text IconUrl; Text LogoUrl; Text DecalUrl; Text BgUrl; Text VerticalUrl; Text DecoImageUrl_DecalSponsor4x1; Text DecoImageUrl_Screen16x9; Text DecoImageUrl_Screen8x1; Text DecoImageUrl_Screen16x1; Text PrivacyState; Integer PopularityLevel; Boolean IsVerified; LibStructuresClub_K_Member[][Text][Text] VIPListOnMap; LibStructuresClub_K_Activity FeaturedActivity; }
#Struct LibStructuresClub_K_ScriptSetting { Text Key; Text Value; Text Type; }
#Struct LibStructuresClub_K_ServerInfo { Text JoinLink; Integer PlayerCount; Text CurrentMapUid; Boolean IsStarting; }
#Struct LibStructuresClub_K_Room { Integer Id; Integer RoomId; Integer ClubId; Text ClubName; Integer ActivityId; Boolean IsHostedByNadeo; Text PlayerServerLogin; Text ServerAccountId; Text Name; Text Region; Integer MaxPlayers; Text ScriptName; Integer CampaignId; Text[] MapUids; Text MediaUrl; Integer PopularityLevel; Integer CreationTimestamp; Boolean Scalable; Boolean HasPassword; LibStructuresClub_K_ScriptSetting[] ScriptSettings; LibStructuresClub_K_ServerInfo ServerInfo; Text CreatorAccountId; Text LatestEditorAccountId; }
#Struct LibStructuresClub_K_BucketItem { Text ItemId; Integer Position; Text Description; Text[] MediaUrls; }
#Struct LibStructuresClub_K_BucketActivity { Integer Id; Text Type; Text Name; Text ClubName; Text MediaUrl; Integer ClubId; Integer CreationTimestamp; LibStructuresClub_K_BucketItem[] BucketItemList; Integer BucketItemCount; Integer PopularityLevel; Integer PopularityValue; Text CreatorAccountId; Text LatestEditorAccountId; }
#Struct LibStructuresClub_K_Skin { Text Id; Text Type; Text Name; Text DisplayName; Text CreatorAccountId; Text CreatorDisplayName; Boolean CreatorIsFirstPartyDisplayName; Text FileName; Text FileUrl; Text ThumbnailUrl; Integer TimeStamp; Boolean IsFavorite; Boolean IsUsed; Text PrestigeOptions; Text CharacterOptions; }
#Struct LibStructuresClub_K_News { Integer Id; Text Headline; Text Body; Text MediaUrl; Integer ClubId; Text Name; Integer CreationTimestamp; }
#Struct LibStructuresClub_K_MapReview { LibStructuresClub_K_Activity Activity; Text ClubName; Integer TimeLimit; Boolean Scalable; Integer MaxPlayer; Boolean AllowVoteSkipMap; Boolean Public; Text Game2WebUrl; Boolean SubmissionLimitation; Integer PopularityValue; Integer PopularityValueBonus; Integer PopularityLevel; Integer PlayerCount; Integer SubmittedMapCount; Integer CreationTimestamp; }
#Struct LibStructuresClub_K_Advertisement { Text AdUid; Text Name; Text ExternalUrl; Text[Text] MediaUrl; Text CreatorAccountId; Text LatestEditorAccountId; }

#Const LibStructuresClub_C_ClubNullId 0
#Const LibStructuresClub_C_AccountNullId ""
#Const LibStructuresClub_C_ActivityNullId 0
#Const LibStructuresClub_C_ClubRoleNone ""
#Const LibStructuresClub_C_RoomNullId 0

#Const LibStructuresClub_C_ClubActivity_Campaign "campaign"
#Const LibStructuresClub_C_ClubActivity_Room "room"
#Const LibStructuresClub_C_ClubActivity_MapUpload "map-upload"
#Const LibStructuresClub_C_ClubActivity_MapReview "map-review"
#Const LibStructuresClub_C_ClubActivity_SkinUpload "skin-upload"
#Const LibStructuresClub_C_ClubActivity_ItemUpload "item-upload"
#Const LibStructuresClub_C_ClubActivity_Competition "competition"
#Const LibStructuresClub_C_ClubActivity_News "news"
#Const LibStructuresClub_C_ClubActivity_RankingOfficial "ranking-official"
#Const LibStructuresClub_C_ClubActivity_RankingDaily "ranking-daily"
#Const LibStructuresClub_C_ClubActivity_RankingClub "ranking-club"
#Const LibStructuresClub_C_ClubActivity_Ad "ad"
#Const LibStructuresClub_C_ClubActivity_Team "team"

#Const LibStructuresClub_C_ClubActivity_DisplayNames ["campaign"=>"Campaign", "room"=>"Room", "map-review"=>"Track review", "map-upload"=>"Track uploads", "skin-upload"=>"Skin uploads", "item-upload"=>"Item collection", "news"=>"News", "competition"=>"Competition", "ranking-official"=>"Official rankings", "ranking-daily"=>"Daily rankings", "ranking-club"=>"Rankings", "ad"=>"|ActivityType|Advertisement", "team"=>"|ActivityType|Team"]
#Const LibStructuresClub_C_ClubActivity_FeaturedAd ["campaign"=>"Play the new '$<%1$>' campaign!", "room"=>"Play online in the new '$<%1$>' room!", "map-review"=>"Review tracks in '$<%1$>'!", "map-upload"=>"Let's see the new '$<%1$>' tracks!", "skin-upload"=>"Let's see the new '$<%1$>' skins!", "item-upload"=>"Check the new '$<%1$>' collection!", "news"=>"Check this news '$<%1$>'!", "competition"=>"Participate in the new '$<%1$>' competition!", "ranking-official"=>"Go see '$<%1$>' ranking!", "ranking-daily"=>"Go see '$<%1$>' ranking!", "ranking-club"=>"Go see '$<%1$>' ranking!", "ad"=>"Check the new '$<%1$>'!"]

#Const LibStructuresClub_C_ClubState_Public "public"
#Const LibStructuresClub_C_ClubState_PrivateOpen "private-open"
#Const LibStructuresClub_C_ClubState_PrivateClosed "private-closed"

#Const LibStructuresClub_C_MediaType_Icon "icon"
#Const LibStructuresClub_C_MediaType_Decal "decal"
#Const LibStructuresClub_C_MediaType_Bg "background"
#Const LibStructuresClub_C_MediaType_Vertical "vertical"
#Const LibStructuresClub_C_MediaType_DecalSponsor "decal_sponsor_4x1"
#Const LibStructuresClub_C_MediaType_Screen16x9 "screen_16x9"
#Const LibStructuresClub_C_MediaType_Screen8x1 "screen_8x1"
#Const LibStructuresClub_C_MediaType_Screen16x1 "screen_16x1"
#Const LibStructuresClub_C_MediaType_Translations ["icon"=>"|ImageType|Icon", "decal"=>"|ImageType|Decal", "background"=>"|ImageType|Background", "vertical"=>"|ImageType|Vertical", "decal_sponsor_4x1"=>"|ImageType|Decal sponsor", "screen_16x9"=>"|ImageType|Big screen", "screen_8x1"=>"|ImageType|Screen 8x1", "screen_16x1"=>"|ImageType|Screen 16x1"]
#Const LibStructuresClub_C_ClubThemes_Path "Media/Manialinks/Nadeo/CMGame/OfficialThemes"
#Const LibStructuresClub_C_ClubThemes_DisplayNames ["animals"=>"|Club Theme|Animals", "food"=>"|Club Theme|Food", "fullSpeed"=>"|Club Theme|Full speed", "manga"=>"|Club Theme|Manga", "racing"=>"|Club Theme|Racing", "space"=>"|Club Theme|Space", "skull&bones1"=>"Long Live Piracy", "skull&bones2"=>"Raging Tides", "industrialRevolution"=>"|Club Theme|Industrial Revolution", "valhalla"=>"Valhalla", "mirage"=>"Mirage", "rabbids"=>"Rabbids", "hungry"=>"Hungry", "honor"=>"Honor", "crew"=>"Crew", "division"=>"Division", "justDance"=>"Just Dance", "laserhawk"=>"Laserhawk"]
#Const LibStructuresClub_C_ClubThemes_Folders ["animals"=>"/Animals", "food"=>"/Food", "fullSpeed"=>"/FullSpeed", "manga"=>"/Manga", "racing"=>"/Racing", "space"=>"/Space", "skull&bones1"=>"/LongLivePiracy", "skull&bones2"=>"/RagingTides", "industrialRevolution"=>"/IndustrialRevolution", "valhalla"=>"/Valhalla", "mirage"=>"/Mirage", "rabbids"=>"/Rabbids", "hungry"=>"/Hungry", "honor"=>"/Honor", "crew"=>"/Crew", "division"=>"/Division", "justDance"=>"/JustDance", "laserhawk"=>"/Laserhawk"]
#Const LibStructuresClub_C_ClubThemes_Files ["decal"=>"/1x1.dds", "screen_8x1"=>"/8x1.dds", "screen_16x1"=>"/16x1.dds", "screen_16x9"=>"/64x41.dds", "background"=>"/Background.dds", "icon"=>"/Icon.dds", "vertical"=>"/Vertical.dds"]

#Const LibStructuresClub_C_ChoiceList_AddActivity ["campaign"=>"Campaign", "room"=>"Room", "skin-upload"=>"Skin uploads", "map-upload"=>"Track uploads", "map-review"=>"Track review", "news"=>"News", "competition"=>"%1 Competition", "ranking-club"=>"Rankings", "item-upload"=>"Item collection", "ad"=>"%1 |ActivityType|Advertisement", "team"=>"%1 |ActivityType|Team"]

#Const LibStructuresClub_C_CreateAdvertisement_Link "/clubs/{ClubId}/maniapubs/create"
#Const LibStructuresClub_C_CreateTeam_Link "/clubs/{ClubId}/teams/create"
#Const LibStructuresClub_C_DisplayTeam_Link "/clubs/{ClubId}/teams/{ActivityId}"
#Const LibStructuresClub_C_ActivityLink_ToReplace_ClubId "{ClubId}"
#Const LibStructuresClub_C_ActivityLink_ToReplace_ActivityId "{ActivityId}"
#Const LibStructuresClub_C_CreateCompetition_Link "/create"
		
// */
// @Component end structures-club

// @Component start lib-campaign-struct
// /*

#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as LibCampaignStruct_Config
#Include "Libs/Nadeo/TMGame/Utils/Constants.Script.txt" as LibCampaignStruct_TM_Const
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as LibCampaignStruct_Const
#Include "Libs/Nadeo/Trackmania/MainMenu/TitleControl.Script.txt" as LibCampaignStruct_TitleControl
#Include "TextLib" as LibCampaignStruct_TL
#Include "TimeLib" as LibCampaignStruct_TiL

#Const LibCampaignStruct_TM_Const::C_ScoreTextOptions_Null as LibCampaignStruct_C_ScoreTextOptions_Null

#Const LibCampaignStruct_C_CampaignType_None -1
#Const LibCampaignStruct_C_CampaignType_Quarterly 0
#Const LibCampaignStruct_C_CampaignType_Monthly 1
#Const LibCampaignStruct_C_CampaignType_WeeklyShorts 5
#Const LibCampaignStruct_C_CampaignType_Club 2
#Const LibCampaignStruct_C_CampaignType_Royal 3

#Const LibCampaignStruct_C_CampaignType_ContextNames [-1=>"Unknown", 0=>"Quarterly", 1=>"Monthly", 2=>"Club", 3=>"Royal", 5=>"Weekly shorts"]

#Const LibCampaignStruct_C_Campaign_NullId 0
#Const LibCampaignStruct_C_MonthlyCampaign_NullId 0

#Const LibCampaignStruct_C_MapsByCategory 5

#Const LibCampaignStruct_C_LoadStatus_NotLoaded 0
#Const LibCampaignStruct_C_LoadStatus_Loaded 1
#Const LibCampaignStruct_C_LoadStatus_Error 2

#Const LibCampaignStruct_C_Season_Names ["Winter"=>"|Season|Winter", "Spring"=>"|Season|Spring", "Summer"=>"|Season|Summer", "Fall"=>"|Season|Fall"]

#Const LibCampaignStruct_C_CategoryWhite 0
#Const LibCampaignStruct_C_CategoryGreen 1
#Const LibCampaignStruct_C_CategoryBlue 2
#Const LibCampaignStruct_C_CategoryRed 3
#Const LibCampaignStruct_C_CategoryBlack 4

#Const LibCampaignStruct_C_MinBronzeMedalsToPlayBlueSection 10
#Const LibCampaignStruct_C_MinSilverMedalsToPlayRedSection 15
#Const LibCampaignStruct_C_MinGoldMedalsToPlayBlackSection 20

#Const LibCampaignStruct_C_MinBronzeMedalsToPlayBlueSectionDebug 1
#Const LibCampaignStruct_C_MinSilverMedalsToPlayRedSectionDebug 2
#Const LibCampaignStruct_C_MinGoldMedalsToPlayBlackSectionDebug 3

#Const LibCampaignStruct_C_CategoriesToMedalsNames [2=>"Bronze", 3=>"Silver", 4=>"Gold"]

#Struct LibCampaignStruct_TM_Const::K_ScoreTextOptions as LibCampaignStruct_K_ScoreTextOptions

#Struct LibCampaignStruct_K_Top { Text AccountId; Text DisplayName; Text ZoneId; Integer Position; Text SP; }
#Struct LibCampaignStruct_K_TopScore { Text AccountId; Text DisplayName; Text ZoneId; Integer Position; Integer Score; }
#Struct LibCampaignStruct_K_TopRanking { Text ZoneName; LibCampaignStruct_K_Top[] Tops; }
#Struct LibCampaignStruct_K_MapTopRanking { Text ZoneName; LibCampaignStruct_K_TopScore[] Tops; }
#Struct LibCampaignStruct_K_PlayerCloseToMedal { Text Medal; Text AccountId; Text ZoneId; Text ZoneName; Integer Score; }
#Struct LibCampaignStruct_K_Ranking { Text ZoneId; Text ZoneName; Integer Position; Integer Length; }
#Struct LibCampaignStruct_K_CampaignRanking { LibCampaignStruct_K_Ranking[] Rankings; Text SP; }
#Struct LibCampaignStruct_K_Map { Integer Position; Text Uid; Text Name; Text Type; Text Style; Text AuthorLogin; Text AuthorDisplayName; Boolean AuthorIsFirstPartyDisplayName; Text SubmitterAccountId; Integer AuthorTime; Integer GoldTime; Integer SilverTime; Integer BronzeTime; Integer NbLaps; Text LocalFileName; Text DownloadUrl; Text ThumbnailUrl; Integer UploadTimestamp; Integer Score; Integer Points; Integer RespawnCount; Integer[Text] ScoreBySeason; LibCampaignStruct_K_Ranking[] Rankings; Integer[Integer] ClubRankings; LibCampaignStruct_K_MapTopRanking[] TopRankings; LibCampaignStruct_K_TopScore[][Integer] ClubTopRankings; LibCampaignStruct_K_TopScore[][Text] SurroundingRankings; LibCampaignStruct_K_TopScore[][Text] RankingLevels; Integer UpdateTime_Rankings; Integer[Integer] UpdateTime_ClubRankings; Integer UpdateTime_TopRankings; Integer[Integer] UpdateTime_ClubTopRankings; Integer UpdateTime_SurroundingRankings; Integer UpdateTime_RankingLevels; Integer Medal; Integer Top; Text Zone; Boolean IsPlayable; Boolean IsFavorite; Text CollectionName; Boolean CreatedWithSimpleEditor; Boolean CreatedWithGamepadEditor; }
#Struct LibCampaignStruct_K_Media { Text ButtonBackgroundUrl; Text ButtonForegroundUrl; Text DecalUrl; Text PopUpBackgroundUrl; Text PopUpImageUrl; Text LiveButtonBackgroundUrl; Text LiveButtonForegroundUrl; }
#Struct LibCampaignStruct_K_Campaign { Integer Id; Text Name; Text SeasonUid; Integer ActivityId; Integer Type; Integer Day; Integer Week; Integer Month; Integer MonthDay; Integer MonthYear; Integer Year; Integer SeasonName; LibStructuresClub_K_Club Club; Boolean Published; Boolean IsSeasonLive; Boolean IsLoaded; Boolean IsFetched; Boolean FailedToGetMapUrl; Boolean IsPrivate; LibCampaignStruct_K_Map[] Playlist; LibCampaignStruct_K_CampaignRanking CampaignRanking; LibCampaignStruct_K_TopRanking[] TopRankings; LibCampaignStruct_K_Top[][Integer] ClubTopRankings; LibCampaignStruct_K_Top[Integer] ClubPlayerRanking; Integer UpdateTime_CampaignRanking; Integer UpdateTime_TopRankings; Integer[Integer] UpdateTime_ClubTopRankings; Integer[Integer] UpdateTime_ClubPlayerRanking; LibCampaignStruct_K_Media Media; Integer PopularityLevel; Boolean ClubOfficialTrophiesEnabled; Integer StartTimestamp; Integer EndTimestamp; Integer EditionTimestamp; Integer RankingSentTimestamp; Integer PublicationTimestamp; Text CreatorAccountId; Text LatestEditorAccountId; }
#Struct LibCampaignStruct_K_DailyMap { Integer CampaignId; Text SeasonId; Integer Day; Integer MonthDay; LibCampaignStruct_K_Map Map; Integer StartTimestamp; Integer EndTimestamp; Integer RelativeStart; Integer RelativeEnd; Integer RelativeNow; Integer LoadStatus; }
#Struct LibCampaignStruct_K_MonthlyCampaign { Integer Id; Integer Year; Integer Month; Integer LastDay; LibCampaignStruct_K_DailyMap[Integer] DailyMaps; LibCampaignStruct_K_Media Media; Boolean IsLoaded; Boolean IsLive; }
#Struct LibCampaignStruct_K_CampaignName { Boolean IsValid; Text Season; Text Year; Text Name; Text TranslatedName; }
		
// */
// @Component end lib-campaign-struct

// @Component start lib-map-store
// /*

#Include "Libs/Nadeo/Trackmania/Stores/MapStore_ML.Script.txt" as Trackmania_MapStore
		
// */
// @Component end lib-map-store

// @Component start component-trackmania-favoritemapstools
// /*

#Include "ColorLib" as Trackmania_FavoriteMapsTools_CL
		
// */
// @Component end component-trackmania-favoritemapstools

// @Component start component-maniapubs
// /*

#Include "Libs/Nadeo/Trackmania/Components/PluginAdverts.Script.txt" as ComponentManiapubs_PluginAdverts
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentManiapubs_Tools

#Const Size_Ads ["2x3"=><47.4849, 71.2273>, "64x41"=><86.246, 55.2513>, "64x10"=><86.246, 13.4759>]
#Const C_InfoPanels_Sizes ["2x3", "64x41", "64x10"]
#Const C_ImageUrl_Ads_Contour ["2x3"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Menus/CommunityAds_2x3_contour.dds", "64x41"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Menus/CommunityAds_64x41_contour.dds", "64x10"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Menus/CommunityAds_64x10_contour.dds"]
#Const C_Thickness_Ads_Contour 10. //< Thickness of the contour in pixels
#Const C_Size_Ads_Contour [ //< Assets size in pixels
	"2x3" => <512., 768.>,
	"64x41" => <1080., 692.>,
	"64x10" => <992., 156.>
]

#Const ComponentManiapubs_C_Maniapub_Interval 10000
#Const ComponentManiapubs_C_Maniapub_Previous -1
#Const ComponentManiapubs_C_Maniapub_Reset 0
#Const ComponentManiapubs_C_Maniapub_Next 1

#Const ComponentManiapubs_C_Anim_Duration 250

#Struct ComponentManiapubs_K_State {
	CMlControl LastControlFocused;
	CMlFrame Frame_CurrentSlide;
	Integer CurrentKey;
	Integer Timer;
	ComponentManiapubs_PluginAdverts::K_Maniapub CurrentManiapub;
	ComponentManiapubs_PluginAdverts::K_Maniapub[] Maniapubs;
}

#Struct ComponentManiapubs_K_Properties {
	Boolean IsFocused;
	Boolean IsLocked;
	Boolean IsManiapubs;
	Integer Interval;
	Text HAlign;
	Text VAlign;
	Vec2 Size;
	ComponentManiapubs_K_State State;
}
		
// */
// @Component end component-maniapubs

// @Component start pause-menu-online
// /*

		
// */
// @Component end pause-menu-online

// @Component start component-checkbox
// /*

#Include "Libs/Nadeo/CMGame/Components/Checkbox.Script.txt" as Trackmania_Checkbox
		
// */
// @Component end component-checkbox

// @Component start component-trackmania-pop-up-background-2
// /*

#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground2.Script.txt" as Trackmania_PopUpBackground2
		
// */
// @Component end component-trackmania-pop-up-background-2

// @Component start component-cmgame-selector
// /*

#Include "Libs/Nadeo/CMGame/Components/Selector.Script.txt" as CMGame_Selector
		
// */
// @Component end component-cmgame-selector

// @Component start component-textfield
// /*

#Include "Libs/Nadeo/CMGame/Components/TextField.Script.txt" as CMGame_TextField
		
// */
// @Component end component-textfield

// @Component start component-popupmultichoice
// /*

#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as Trackmania_PopUpMultiChoice
		
// */
// @Component end component-popupmultichoice

// @Component start component-transition
// /*

#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as CMGame_Transition
		
// */
// @Component end component-transition

// @Component start component-form-select
// /*

#Include "Libs/Nadeo/CMGame/Components/FormSelect.Script.txt" as CMGame_FormSelect
		
// */
// @Component end component-form-select

// @Component start component-popupreportsystem
// /*

#Include "Libs/Nadeo/Trackmania/Components/PopUpReportSystem.Script.txt" as ComponentPopUpReportSystem
		
// */
// @Component end component-popupreportsystem

// @Component start lib-campaign-store
// /*

#Include "Libs/Nadeo/Trackmania/Stores/CampaignStore_ML.Script.txt" as Trackmania_CampaignStore
		
// */
// @Component end lib-campaign-store

// @Component start component-playerroyalvictories
// /*

#Include "Libs/Nadeo/Trackmania/Components/PlayerRoyalVictories.Script.txt" as Trackmania_PlayerRoyalVictories
		
// */
// @Component end component-playerroyalvictories

// @Component start component-playerrank
// /*

#Include "MathLib" as ComponentPlayerRank_ML

#Const ComponentPlayerRank_C_Rank_Icons [1=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/B1.dds", 2=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/B2.dds", 3=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/B3.dds", 4=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/S1.dds", 5=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/S2.dds", 6=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/S3.dds", 7=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/G1.dds", 8=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/G2.dds", 9=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/G3.dds", 10=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/M1.dds", 11=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/M2.dds", 12=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/M3.dds", 13=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/TM.dds", 14=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/TM.dds"]
#Const ComponentPlayerRank_C_RankAnim_Delay 500
#Const ComponentPlayerRank_C_RankAnim_Duration 500


// */
// @Component end component-playerrank

// @Component start component-cmgame-expendable-asset
// /*

#Include "Libs/Nadeo/CMGame/Components/ExpendableAssetBase.Script.txt" as CMGame_ExpendableAsset
		
// */
// @Component end component-cmgame-expendable-asset

// @Component start component-trackmania-expendable-asset
// /*

#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as CMGame_ExpendableAsset
		
// */
// @Component end component-trackmania-expendable-asset

// @Component start component-navigationtabs
// /*

#Include "Libs/Nadeo/Trackmania/Components/NavigationTabs.Script.txt" as Trackmania_NavigationTabs
		
// */
// @Component end component-navigationtabs

// @Component start component-cmgame-player-name
// /*

#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as CMGame_PlayerName
		
// */
// @Component end component-cmgame-player-name

// @Component start component-profileplayerinfo
// /*

#Include "TextLib" as ComponentProfilePlayerInfo_TL
#Include "MathLib" as ComponentProfilePlayerInfo_ML
#Include "ColorLib" as ComponentProfilePlayerInfo_CL
#Include "TimeLib" as ComponentProfilePlayerInfo_TiL
#Include "Libs/Nadeo/CMGame/Utils/Privileges.Script.txt" as ComponentProfilePlayerInfo_Privileges
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as ComponentProfilePlayerInfo_Http
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as ComponentProfilePlayerInfo_Task
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as ComponentProfilePlayerInfo_Platform
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as ComponentProfilePlayerInfo_MainUser
#Include "Libs/Nadeo/CMGame/Utils/AudioManager_ML.Script.txt" as ComponentProfilePlayerInfo_AudioManager
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentProfilePlayerInfo_Tools
#Include "Libs/Nadeo/CMGame/Components/Pager2.Script.txt" as ComponentProfilePlayerInfo_Pager
#Include "Libs/Nadeo/CMGame/Utils/MenuSceneManager.Script.txt" as ComponentProfilePlayerInfo_MenuSceneManager
#Include "Libs/Nadeo/CMGame/Modes/Bot.Script.txt" as ComponentProfilePlayerInfo_Bot
#Include "Libs/Nadeo/Trackmania/API/LeaderboardAPI.Script.txt" as ComponentProfilePlayerInfo_LeaderboardAPI
#Include "Libs/Nadeo/Trackmania/API/MatchmakingAPI.Script.txt" as ComponentProfilePlayerInfo_MatchmakingAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ComponentProfilePlayerInfo_ControllerInfo
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ReportSystem.Script.txt" as ComponentProfilePlayerInfo_ReportSystem
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as ComponentProfilePlayerInfo_Config
#Include "Libs/Nadeo/Trackmania/Structures/PrestigeStruct.Script.txt" as ComponentProfilePlayerInfo_PrestigeStruct
#Include "Libs/Nadeo/Trackmania/Structures/ReportStruct.Script.txt" as ComponentProfilePlayerInfo_ReportStruct

#Struct ComponentProfilePlayerInfo_K_Controls {
	CMlFrame Frame_Global;
	CMlQuad Quad_PlayerCardFlag;
	CMlFrame PlayerName_PlayerCardName;
	CMlFrame Button_MyAccess;
	CMlFrame Button_UpdateZone;
	CMlFrame Button_NextPlayer;
	CMlFrame Button_PrevPlayer;
	CMlFrame ButtonIcon_PrevPlayer;
	CMlFrame ButtonIcon_NextPlayer;
	CMlLabel Label_DisplayHistory;
	CMlLabel Label_TrophiesGlobalRankingPosition;
	CMlLabel Label_TrophiesGlobalRankingZone;
	CMlLabel Label_TrophiesPoints;
	CMlLabel Label_TrophiesPointsText;
	CMlFrame Button_NextZone;
	CMlFrame Button_PrevZone;
	CMlFrame Frame_Trophies;
	CMlLabel Label_TrophiesError;
	CMlFrame Frame_TrophiesLoaded;
	CMlFrame Frame_TrophiesHistory;
	CMlLabel Label_TrophyHistory;
	CMlFrame Spinner_TrophiesHistory;
	CMlFrame Scroll_TrophiesHistory;
	CMlFrame Frame_InfoRankingLoaded;
	CMlFrame Spinner_Trophies;
	CMlFrame Spinner_Ranking;
	CMlFrame Spinner_Campaign;
	CMlFrame Spinner_Ranked;
	CMlFrame Spinner_Royal;
	CMlFrame Frame_TrophiesList;
	CMlFrame Frame_MainProfile;
	CMlLabel Label_TrophyTopRank;
	CMlLabel Label_TrophyTopRankZone;
	CMlQuad Quad_TopTrophy;
	CMlQuad Quad_BestTrophy;
	CMlLabel Label_TopTrophyCount;
	CMlLabel Label_TopCampaignName;
	CMlLabel Label_TopText;
	CMlLabel Label_TopCampaignRank;
	CMlLabel Label_TopCampaignZone;
	CMlFrame Frame_MyQuarterlyCampaignsRankings;
	CMlFrame Frame_PreviousCampaign;
	CMlFrame Frame_NextCampaign;
	CMlFrame Button_GeneralTrophiesPreviousZone;
	CMlFrame Button_GeneralTrophiesNextZone;
	CMlFrame Button_Back;
	CMlFrame Frame_CurrentSkin;
	CMlQuad Quad_Lights;
	CMlQuad Quad_PlayerCardEchelon;
	CMlLabel Label_PlayerCardEchelon;
	CMlFrame Spinner_PlayerCardEchelon;
	CMlFrame Button_Garage;
	CMlFrame Button_FirstPartyProfile;
	CMlFrame Button_UbisoftConnectProfile;
	CMlFrame Button_Report;
	CMlFrame Frame_PlayerBestRank;
	CMlLabel Label_BestRank;
	CMlLabel Label_BestRankDate;
	CMlFrame Frame_RankedStats;
	CMlFrame Frame_RankedCurrentSeason;
	CMlFrame Frame_PlayerCurrentSeason;
	CMlLabel Label_CurrentSeason;
	CMlLabel Label_CurrentSeasonDate;
	CMlFrame Frame_RankedPreviousSeason;
	CMlFrame Frame_PlayerPreviousSeason;
	CMlLabel Label_PreviousSeason;
	CMlLabel Label_PreviousSeasonDate;
	CMlLabel Label_PreviousRankedError;
	CMlFrame Frame_RankedBestSeason;
	CMlFrame Frame_PlayerBestSeason;
	CMlLabel Label_BestSeason;
	CMlLabel Label_BestSeasonDate;
	CMlLabel Label_BestRankedError;
	CMlFrame Frame_PublicData;
	CMlFrame Frame_SensibleData;
	CMlLabel Label_MatchesCount;
	CMlLabel Label_WinRate;
	CMlLabel Label_MVPCount;
	CMlFrame Frame_MainRoyalLevel;
	CMlLabel Label_MainRoyalLevel;
	CMlFrame Frame_RoyalStats;
	CMlFrame Frame_RoyalLevel;
	CMlLabel Label_RoyalVictories;
	CMlQuad Quad_SuperRoyalLogo;
	CMlLabel Label_SuperRoyalVictories;
	CMlLabel Label_BronzeVictories;
	CMlLabel Label_SilverVictories;
	CMlLabel Label_GoldVictories;
	CMlLabel Label_MasterVictories;
	CMlFrame Frame_ButtonList;
	CMlLabel Label_Error;
	CMlFrame NavigationTabs_Categories;
	CMlQuad Quad_Background;
	CMlFrame Frame_Content;
	CMlFrame Frame_ContentTrophiesRanking;
	CMlFrame Frame_GeneralTab;
	CMlFrame Frame_GeneralTabInfoRanking;
	CMlFrame Spinner_PrivilegeCheck;
	CMlLabel Label_PrivilegeCheck;
	CMlFrame Frame_ReportSystem;
}

#Struct ComponentProfilePlayerInfo_K_Scene {
	Ident SceneId;
	Ident CurrentItemId;
	Ident CurrentExtraItemId;
}

#Struct ComponentProfilePlayerInfo_K_TrophiesRanking {
	Text ZoneName;
	Integer Rank;
	Integer Total;
}

#Struct ComponentProfilePlayerInfo_K_TrophiesRankingsPager {
	LibCampaignStruct_K_Ranking[] TrophiesRankings;
	Integer CurrentPage;
	Integer MaxPage;
}

#Struct ComponentProfilePlayerInfo_K_TrophyHistoryEntry {
	Text Description;
	Text Date;
	Integer Amount;
	Integer TimeStamp;
}

#Struct ComponentProfilePlayerInfo_K_TrophyHistoryScroll {
	ComponentProfilePlayerInfo_K_TrophyHistoryEntry[Integer] Content;
	Integer Total;
}

#Struct ComponentProfilePlayerInfo_K_TrophiesHistory {
	ComponentProfilePlayerInfo_K_TrophyHistoryScroll TrophyScroll;
	Ident TaskId_GetTrophyHistory;
	Integer RequestedTrophyType;
	Integer RequestedOffset;
	Boolean IsLoading;
}

#Struct ComponentProfilePlayerInfo_K_MatchmakingStats {
	ComponentProfilePlayerInfo_Http::K_Request GetPlayerStats;
	LibStructuresMatchmaking_K_PlayerStatistics Stats;
	Text QueueId;
}

#Struct ComponentProfilePlayerInfo_K_SuperRoyalStats {
	ComponentProfilePlayerInfo_Http::K_Request GetPlayerStats;
	LibStructuresMatchmaking_K_SuperRoyalStatistics Stats;
}

#Struct ComponentProfilePlayerInfo_K_Zone {
	Text Id;
	Text ParentId;
	Text Name;
	Text Path;
	Text FullPath;
	Text FlagUrl;
	Text CountryFlagUrl;
	Text CarSkinName;
	Text CarSkinUrl;
	Text PilotSkinName;
	Text PilotSkinUrl;
}

#Struct ComponentProfilePlayerInfo_K_Record {
	Text Detail;
	Text Id;
}

#Struct ComponentProfilePlayerInfo_K_PlayerProfile {
	Boolean IsFakeUser;
	Boolean IsFirstPartyDisplayName;
	Integer SuccessfulTaskNumber;
	Ident UserId;
	Text AccountId;
	Text ClubTag;
	Text Trigram;
	Text Name;
	ComponentProfilePlayerInfo_K_Zone Zone;
	LibStructuresClub_K_Skin CarSkin;
	LibStructuresClub_K_Skin PilotSkin;
	Vec3 SkinLightColor;
	Boolean CanViewGameHistory;
	Boolean IsReportable;
	ComponentProfilePlayerInfo_K_Record RecordData;
	Boolean IsGhost;
}

#Struct ComponentProfilePlayerInfo_K_PrivilegeCheck {
	ComponentProfilePlayerInfo_K_PlayerProfile User;
	ComponentProfilePlayerInfo_Privileges::K_PrivilegeCheck PrivilegeCheck;
}

#Struct ComponentProfilePlayerInfo_K_State {
	ComponentProfilePlayerInfo_K_Controls Controls;
	Boolean Enabled;
	Boolean MyAccessButtonEnabled;
	Boolean GarageButtonEnabled;
	Boolean PlayersPagerEnabled;
	Boolean ZoneSelectionEnabled;
	Boolean IsPlayerProfileUpdated;
	Boolean IsTTSContextUpdateNeeded;
	ComponentProfilePlayerInfo_K_TrophiesRankingsPager TrophiesRankingsPager;
	Ident TaskId_GetAccountLastYearSummary;
	Boolean TrophiesLoadingError;
	Integer[Integer] TrophiesCount;
	ComponentProfilePlayerInfo_Http::K_Request GetPlayersTrophyRanking;
	Text TrophyRankingLoadingError;
	Integer TabDisplayed;
	Integer NextPrevPlayerCooldown;
	ComponentProfilePlayerInfo_K_Scene Scene;
	Integer FocusedTrophyKey;
	Integer SelectedTrophyKey;
	Integer HistoryTrophyType;
	ComponentProfilePlayerInfo_K_PlayerProfile PlayerProfile;
	ComponentProfilePlayerInfo_K_TrophiesHistory TrophiesHistory;
	ComponentProfilePlayerInfo_K_MatchmakingStats Ranked;
	ComponentProfilePlayerInfo_K_MatchmakingStats Royal;
	ComponentProfilePlayerInfo_K_SuperRoyalStats SuperRoyal;
	ComponentProfilePlayerInfo_Task::K_Task Task_GetClubTagList;
	ComponentProfilePlayerInfo_Task::K_Task Task_GetSkinList;
	ComponentProfilePlayerInfo_Task::K_Task Task_GetPrestigeSkin;
	ComponentProfilePlayerInfo_Task::K_Task Task_RetrieveDisplayName;
	ComponentProfilePlayerInfo_Task::K_Task Task_RetrieveUserZoneList;
	ComponentProfilePlayerInfo_Pager::K_Pager MyQuarterlyCampaignsRankingsPager;
	CMlControl[Integer] TabsFocuses;
	ComponentProfilePlayerInfo_K_PrivilegeCheck PrivilegeCheck;
	Text MatchId;
	Text MatchmakingId;
}

#Struct ComponentProfilePlayerInfo_K_Event {
	Integer Type;
	Ident CurrentUserId;
}

#Const ComponentProfilePlayerInfo_C_EventType_Close 0
#Const ComponentProfilePlayerInfo_C_EventType_NextPlayer 1
#Const ComponentProfilePlayerInfo_C_EventType_PrevPlayer 2
#Const ComponentProfilePlayerInfo_C_EventType_EditPlayer 3
#Const ComponentProfilePlayerInfo_C_EventType_Garage 4
#Const ComponentProfilePlayerInfo_C_EventType_MyAccessInfo 5

#Const ComponentProfilePlayerInfo_C_Zone_Translations ["World"=>"|Zone|World", "Europe"=>"|Zone|Europe", "Middle East"=>"|Zone|Middle East", "North America"=>"|Zone|North America", "South America"=>"|Zone|South America", "Oceania"=>"|Zone|Oceania", "Africa"=>"|Zone|Africa", "Asia"=>"|Zone|Asia", "Algeria"=>"|Zone|Algeria", "Angola"=>"|Zone|Angola", "Benin"=>"|Zone|Benin", "Botswana"=>"|Zone|Botswana", "Burkina Faso"=>"|Zone|Burkina Faso", "Burundi"=>"|Zone|Burundi", "Cameroon"=>"|Zone|Cameroon", "Cabo Verde"=>"|Zone|Cabo Verde", "Central African Republic"=>"|Zone|Central African Republic", "Chad"=>"|Zone|Chad", "Comoros"=>"|Zone|Comoros", "Congo"=>"|Zone|Congo", "Djibouti"=>"|Zone|Djibouti", "DR Congo"=>"|Zone|DR Congo", "Equatorial Guinea"=>"|Zone|Equatorial Guinea", "Eritrea"=>"|Zone|Eritrea", "Ethiopia"=>"|Zone|Ethiopia", "Gabon"=>"|Zone|Gabon", "Ghana"=>"|Zone|Ghana", "Guinea"=>"|Zone|Guinea", "Guinea-Bissau"=>"|Zone|Guinea-Bissau", "Ivory Coast"=>"|Zone|Ivory Coast", "Kenya"=>"|Zone|Kenya", "Lesotho"=>"|Zone|Lesotho", "Afghanistan"=>"|Zone|Afghanistan", "Armenia"=>"|Zone|Armenia", "Azerbaijan"=>"|Zone|Azerbaijan", "Bangladesh"=>"|Zone|Bangladesh", "Bhutan"=>"|Zone|Bhutan", "Brunei"=>"|Zone|Brunei", "Cambodia"=>"|Zone|Cambodia", "Mainland China"=>"|Zone|Mainland China", "Georgia"=>"|Zone|Georgia", "Hong Kong"=>"|Zone|Hong Kong", "India"=>"|Zone|India", "Indonesia"=>"|Zone|Indonesia", "Japan"=>"|Zone|Japan", "Kazakhstan"=>"|Zone|Kazakhstan", "Kyrgyzstan"=>"|Zone|Kyrgyzstan", "Laos"=>"|Zone|Laos", "Malaysia"=>"|Zone|Malaysia", "Maldives"=>"|Zone|Maldives", "Mongolia"=>"|Zone|Mongolia", "Myanmar"=>"|Zone|Myanmar", "Nepal"=>"|Zone|Nepal", "North Korea"=>"|Zone|North Korea", "Pakistan"=>"|Zone|Pakistan", "Philippines"=>"|Zone|Philippines", "Albania"=>"|Zone|Albania", "Andorra"=>"|Zone|Andorra", "Austria"=>"|Zone|Austria", "Belarus"=>"|Zone|Belarus", "Belgium"=>"|Zone|Belgium", "Bosnia and Herzegovina"=>"|Zone|Bosnia and Herzegovina", "Bulgaria"=>"|Zone|Bulgaria", "Croatia"=>"|Zone|Croatia", "Cyprus"=>"|Zone|Cyprus", "Czechia"=>"|Zone|Czechia", "Denmark"=>"|Zone|Denmark", "Estonia"=>"|Zone|Estonia", "Finland"=>"|Zone|Finland", "France"=>"|Zone|France", "Germany"=>"|Zone|Germany", "Greece"=>"|Zone|Greece", "Hungary"=>"|Zone|Hungary", "Iceland"=>"|Zone|Iceland", "Ireland"=>"|Zone|Ireland", "Italy"=>"|Zone|Italy", "Latvia"=>"|Zone|Latvia", "Liechtenstein"=>"|Zone|Liechtenstein", "Lithuania"=>"|Zone|Lithuania", "Luxembourg"=>"|Zone|Luxembourg", "Bahrain"=>"|Zone|Bahrain", "Egypt"=>"|Zone|Egypt", "Iran"=>"|Zone|Iran", "Iraq"=>"|Zone|Iraq", "Israel"=>"|Zone|Israel", "Jordan"=>"|Zone|Jordan", "Kuwait"=>"|Zone|Kuwait", "Lebanon"=>"|Zone|Lebanon", "Oman"=>"|Zone|Oman", "Qatar"=>"|Zone|Qatar", "Saudi Arabia"=>"|Zone|Saudi Arabia", "Syria"=>"|Zone|Syria", "United Arab Emirates"=>"|Zone|United Arab Emirates", "Yemen"=>"|Zone|Yemen", "Antigua and Barbuda"=>"|Zone|Antigua and Barbuda", "Bahamas"=>"|Zone|Bahamas", "Barbados"=>"|Zone|Barbados", "Belize"=>"|Zone|Belize", "Canada"=>"|Zone|Canada", "Costa Rica"=>"|Zone|Costa Rica", "Cuba"=>"|Zone|Cuba", "Dominica"=>"|Zone|Dominica", "Dominican Republic"=>"|Zone|Dominican Republic", "El Salvador"=>"|Zone|El Salvador", "Grenada"=>"|Zone|Grenada", "Haiti"=>"|Zone|Haiti", "Honduras"=>"|Zone|Honduras", "Jamaica"=>"|Zone|Jamaica", "Mexico"=>"|Zone|Mexico", "Nicaragua"=>"|Zone|Nicaragua", "Saint Kitts and Nevis"=>"|Zone|Saint Kitts and Nevis", "Saint Lucia"=>"|Zone|Saint Lucia", "Saint Vincent and the Grenadines"=>"|Zone|Saint Vincent and the Grenadines", "Trinidad and Tobago"=>"|Zone|Trinidad and Tobago", "United States"=>"|Zone|United States", "Australia"=>"|Zone|Australia", "Fiji"=>"|Zone|Fiji", "Marshall Islands"=>"|Zone|Marshall Islands", "Micronesia"=>"|Zone|Micronesia", "Nauru"=>"|Zone|Nauru", "New Zealand"=>"|Zone|New Zealand", "Palau"=>"|Zone|Palau", "Papua New Guinea"=>"|Zone|Papua New Guinea", "Samoa"=>"|Zone|Samoa", "Solomon Islands"=>"|Zone|Solomon Islands", "Tonga"=>"|Zone|Tonga", "Tuvalu"=>"|Zone|Tuvalu", "Vanuatu"=>"|Zone|Vanuatu", "Argentina"=>"|Zone|Argentina", "Bolivia"=>"|Zone|Bolivia", "Brazil"=>"|Zone|Brazil", "Chile"=>"|Zone|Chile", "Colombia"=>"|Zone|Colombia", "Ecuador"=>"|Zone|Ecuador", "Guatemala"=>"|Zone|Guatemala", "Guyana"=>"|Zone|Guyana", "Panama"=>"|Zone|Panama", "Paraguay"=>"|Zone|Paraguay", "Peru"=>"|Zone|Peru", "Suriname"=>"|Zone|Suriname", "Uruguay"=>"|Zone|Uruguay", "Venezuela"=>"|Zone|Venezuela", "Liberia"=>"|Zone|Liberia", "Libya"=>"|Zone|Libya", "Madagascar"=>"|Zone|Madagascar", "Malawi"=>"|Zone|Malawi", "Mali"=>"|Zone|Mali", "Mauritania"=>"|Zone|Mauritania", "Mauritius"=>"|Zone|Mauritius", "Morocco"=>"|Zone|Morocco", "Mozambique"=>"|Zone|Mozambique", "Namibia"=>"|Zone|Namibia", "Niger"=>"|Zone|Niger", "Nigeria"=>"|Zone|Nigeria", "Rwanda"=>"|Zone|Rwanda", "São Tomé and Príncipe"=>"|Zone|São Tomé and Príncipe", "Senegal"=>"|Zone|Senegal", "Seychelles"=>"|Zone|Seychelles", "Sierra Leone"=>"|Zone|Sierra Leone", "Somalia"=>"|Zone|Somalia", "South Africa"=>"|Zone|South Africa", "South Sudan"=>"|Zone|South Sudan", "Sudan"=>"|Zone|Sudan", "Tanzania"=>"|Zone|Tanzania", "The Gambia"=>"|Zone|The Gambia", "Togo"=>"|Zone|Togo", "Tunisia"=>"|Zone|Tunisia", "Uganda"=>"|Zone|Uganda", "Zambia"=>"|Zone|Zambia", "Zimbabwe"=>"|Zone|Zimbabwe", "Singapore"=>"|Zone|Singapore", "South Korea"=>"|Zone|South Korea", "Sri Lanka"=>"|Zone|Sri Lanka", "Taïwan"=>"|Zone|Taïwan", "Tajikistan"=>"|Zone|Tajikistan", "Thailand"=>"|Zone|Thailand", "Timor-Leste"=>"|Zone|Timor-Leste", "Turkmenistan"=>"|Zone|Turkmenistan", "Uzbekistan"=>"|Zone|Uzbekistan", "Vietnam"=>"|Zone|Vietnam", "North Macedonia"=>"|Zone|North Macedonia", "Malta"=>"|Zone|Malta", "Moldova"=>"|Zone|Moldova", "Monaco"=>"|Zone|Monaco", "Montenegro"=>"|Zone|Montenegro", "Netherlands"=>"|Zone|Netherlands", "Norway"=>"|Zone|Norway", "Poland"=>"|Zone|Poland", "Portugal"=>"|Zone|Portugal", "Romania"=>"|Zone|Romania", "Russia"=>"|Zone|Russia", "San Marino"=>"|Zone|San Marino", "Serbia"=>"|Zone|Serbia", "Slovakia"=>"|Zone|Slovakia", "Slovenia"=>"|Zone|Slovenia", "Spain"=>"|Zone|Spain", "Sweden"=>"|Zone|Sweden", "Switzerland"=>"|Zone|Switzerland", "Türkiye"=>"|Zone|Türkiye", "Ukraine"=>"|Zone|Ukraine", "United Kingdom"=>"|Zone|United Kingdom"]

#Const ComponentProfilePlayerInfo_C_DelayBetweenPagerRequest 250

#Const ComponentProfilePlayerInfo_C_ErrorCode_None "0"
#Const ComponentProfilePlayerInfo_C_ErrorCode_CouldNotCreateTask "1"
#Const ComponentProfilePlayerInfo_C_ErrorCode_TaskDeleted "2"

#Const ComponentProfilePlayerInfo_C_TTSContextLevel_Page 11
#Const ComponentProfilePlayerInfo_C_TTSContextLevel_Section 12

#Const ComponentProfilePlayerInfo_C_TabDisplayed_General 0
#Const ComponentProfilePlayerInfo_C_TabDisplayed_Trophies 1
#Const ComponentProfilePlayerInfo_C_TabDisplayed_Ranked 3
#Const ComponentProfilePlayerInfo_C_TabDisplayed_Royal 2

#Const ComponentProfilePlayerInfo_C_TrophyAchievementType_SoloMedal "SoloMedal"
#Const ComponentProfilePlayerInfo_C_TrophyAchievementType_SoloRanking "SoloRanking"
#Const ComponentProfilePlayerInfo_C_TrophyAchievementType_LiveMatch "LiveMatch"
#Const ComponentProfilePlayerInfo_C_TrophyAchievementType_CompetitionMatch "CompetitionMatch"
#Const ComponentProfilePlayerInfo_C_TrophyAchievementType_CompetitionRanking "CompetitionRanking"

#Const ComponentProfilePlayerInfo_C_SoloRankingAchievementTypes [
	"OfficialQuarterly" => "|TrophyUnlock|Seasonal campaign",
	"TrackOfTheDay" => "|TrophyUnlock|Track of the Day"
]

#Const ComponentProfilePlayerInfo_C_SoloMedalAchievementTypes [
	"TrackOfTheDay" => "|TrophyUnlock|Track of the Day",
	"SoloWhite" => "|TrophyUnlock|All medals on white tracks",
	"SoloGreen" => "|TrophyUnlock|All medals on green tracks",
	"SoloBlue" => "|TrophyUnlock|All medals on blue tracks",
	"SoloRed" => "|TrophyUnlock|All medals on red tracks",
	"SoloBlack" => "|TrophyUnlock|All medals on black tracks"
]

#Const ComponentProfilePlayerInfo_C_Echelon_Null 0
#Const ComponentProfilePlayerInfo_C_Echelon_Bronze1 1
#Const ComponentProfilePlayerInfo_C_Echelon_Bronze2 2
#Const ComponentProfilePlayerInfo_C_Echelon_Bronze3 3
#Const ComponentProfilePlayerInfo_C_Echelon_Silver1 4
#Const ComponentProfilePlayerInfo_C_Echelon_Silver2 5
#Const ComponentProfilePlayerInfo_C_Echelon_Silver3 6
#Const ComponentProfilePlayerInfo_C_Echelon_Gold1 7
#Const ComponentProfilePlayerInfo_C_Echelon_Gold2 8
#Const ComponentProfilePlayerInfo_C_Echelon_Gold3 9

#Const ComponentProfilePlayerInfo_C_Rank_Bar_Colors [1=><0.761, 0.506, 0.333>, 2=><0.761, 0.506, 0.333>, 3=><0.761, 0.506, 0.333>, 4=><0.682, 0.69, 0.69>, 5=><0.682, 0.69, 0.69>, 6=><0.682, 0.69, 0.69>, 7=><0.8745, 0.663, 0.086>, 8=><0.8745, 0.663, 0.086>, 9=><0.8745, 0.663, 0.086>, 10=><0.502, 0.871, 0.035>, 11=><0.502, 0.871, 0.035>, 12=><0.502, 0.871, 0.035>, 13=><0.502, 0.871, 0.0352>]
#Const ComponentProfilePlayerInfo_C_Rank_Names [1=>"|MatchmakingRank|Bronze I", 2=>"|MatchmakingRank|Bronze II", 3=>"|MatchmakingRank|Bronze III", 4=>"|MatchmakingRank|Silver I", 5=>"|MatchmakingRank|Silver II", 6=>"|MatchmakingRank|Silver III", 7=>"|MatchmakingRank|Gold I", 8=>"|MatchmakingRank|Gold II", 9=>"|MatchmakingRank|Gold III", 10=>"|MatchmakingRank|Master I", 11=>"|MatchmakingRank|Master II", 12=>"|MatchmakingRank|Master III", 13=>"|MatchmakingRank|Trackmaster"]
#Const ComponentProfilePlayerInfo_C_Royal_Level_Names [1=>"Unranked", 2=>"Bronze", 3=>"Silver", 4=>"Gold", 5=>"Master"]
#Const ComponentProfilePlayerInfo_C_SuperRoyal_Logos [""=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Qualifications.dds", "Bronze"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Bronze.dds", "Silver"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Silver.dds", "Gold"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Gold.dds", "Master"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Master.dds"]
#Const ComponentProfilePlayerInfo_C_SuperRoyal_Division_Bronze "Bronze"
#Const ComponentProfilePlayerInfo_C_SuperRoyal_Division_Silver "Silver"
#Const ComponentProfilePlayerInfo_C_SuperRoyal_Division_Gold "Gold"
#Const ComponentProfilePlayerInfo_C_SuperRoyal_Division_Master "Master"
		
// */
// @Component end component-profileplayerinfo

// @Component start component-medalstack
// /*

#Include "TextLib" as ComponentMedalStack_TL
#Include "MathLib" as ComponentMedalStack_ML
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentMedalStack_Tools

// */
// @Component end component-medalstack

// @Component start component-racemapinfos
// /*

#Include "Libs/Nadeo/CMGame/Utils/AudioManager_ML.Script.txt" as ComponentRaceMapInfos_AudioManager
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as ComponentRaceMapInfos_MainUser
#Include "Libs/Nadeo/CMGame/Utils/Medals.Script.txt" as ComponentRaceMapInfos_Medals
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentRaceMapInfos_Tools
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as ComponentRaceMapInfos_MV_Utils
#Include "Libs/Nadeo/Trackmania/MainMenu/TitleControl.Script.txt" as ComponentRaceMapInfos_TitleControl
#Include "Libs/Nadeo/Trackmania/Modes/RoyalTimeAttack/PlayerData.Script.txt" as ComponentRaceMapInfos_RoyalPlayerData
#Include "Libs/Nadeo/Trackmania/Modes/UIModules/NetShare_Client.Script.txt" as ComponentRaceMapInfos_NetShare
#Include "MathLib" as ComponentRaceMapInfos_ML
#Include "TextLib" as ComponentRaceMapInfos_TL

#Const ComponentRaceMapInfos_C_FormatLimit 10000

#Const ComponentRaceMapInfos_C_Sound_PlacementCounter "IngamePlacementCounter"
#Const ComponentRaceMapInfos_C_Sound_SecondaryPlacementCounter "IngameSecondaryPlacementCounter"
#Const ComponentRaceMapInfos_C_Sound_StartPlacementCounter "StartIngamePlacementCounter"
#Const ComponentRaceMapInfos_C_Sound_StartSecondaryPlacementCounter "StartIngameSecondaryPlacementCounter"

#Const ComponentRaceMapInfos_C_Zone_Translations ["World"=>"|Zone|World", "Europe"=>"|Zone|Europe", "Middle East"=>"|Zone|Middle East", "North America"=>"|Zone|North America", "South America"=>"|Zone|South America", "Oceania"=>"|Zone|Oceania", "Africa"=>"|Zone|Africa", "Asia"=>"|Zone|Asia", "Algeria"=>"|Zone|Algeria", "Angola"=>"|Zone|Angola", "Benin"=>"|Zone|Benin", "Botswana"=>"|Zone|Botswana", "Burkina Faso"=>"|Zone|Burkina Faso", "Burundi"=>"|Zone|Burundi", "Cameroon"=>"|Zone|Cameroon", "Cabo Verde"=>"|Zone|Cabo Verde", "Central African Republic"=>"|Zone|Central African Republic", "Chad"=>"|Zone|Chad", "Comoros"=>"|Zone|Comoros", "Congo"=>"|Zone|Congo", "Djibouti"=>"|Zone|Djibouti", "DR Congo"=>"|Zone|DR Congo", "Equatorial Guinea"=>"|Zone|Equatorial Guinea", "Eritrea"=>"|Zone|Eritrea", "Ethiopia"=>"|Zone|Ethiopia", "Gabon"=>"|Zone|Gabon", "Ghana"=>"|Zone|Ghana", "Guinea"=>"|Zone|Guinea", "Guinea-Bissau"=>"|Zone|Guinea-Bissau", "Ivory Coast"=>"|Zone|Ivory Coast", "Kenya"=>"|Zone|Kenya", "Lesotho"=>"|Zone|Lesotho", "Afghanistan"=>"|Zone|Afghanistan", "Armenia"=>"|Zone|Armenia", "Azerbaijan"=>"|Zone|Azerbaijan", "Bangladesh"=>"|Zone|Bangladesh", "Bhutan"=>"|Zone|Bhutan", "Brunei"=>"|Zone|Brunei", "Cambodia"=>"|Zone|Cambodia", "Mainland China"=>"|Zone|Mainland China", "Georgia"=>"|Zone|Georgia", "Hong Kong"=>"|Zone|Hong Kong", "India"=>"|Zone|India", "Indonesia"=>"|Zone|Indonesia", "Japan"=>"|Zone|Japan", "Kazakhstan"=>"|Zone|Kazakhstan", "Kyrgyzstan"=>"|Zone|Kyrgyzstan", "Laos"=>"|Zone|Laos", "Malaysia"=>"|Zone|Malaysia", "Maldives"=>"|Zone|Maldives", "Mongolia"=>"|Zone|Mongolia", "Myanmar"=>"|Zone|Myanmar", "Nepal"=>"|Zone|Nepal", "North Korea"=>"|Zone|North Korea", "Pakistan"=>"|Zone|Pakistan", "Philippines"=>"|Zone|Philippines", "Albania"=>"|Zone|Albania", "Andorra"=>"|Zone|Andorra", "Austria"=>"|Zone|Austria", "Belarus"=>"|Zone|Belarus", "Belgium"=>"|Zone|Belgium", "Bosnia and Herzegovina"=>"|Zone|Bosnia and Herzegovina", "Bulgaria"=>"|Zone|Bulgaria", "Croatia"=>"|Zone|Croatia", "Cyprus"=>"|Zone|Cyprus", "Czechia"=>"|Zone|Czechia", "Denmark"=>"|Zone|Denmark", "Estonia"=>"|Zone|Estonia", "Finland"=>"|Zone|Finland", "France"=>"|Zone|France", "Germany"=>"|Zone|Germany", "Greece"=>"|Zone|Greece", "Hungary"=>"|Zone|Hungary", "Iceland"=>"|Zone|Iceland", "Ireland"=>"|Zone|Ireland", "Italy"=>"|Zone|Italy", "Latvia"=>"|Zone|Latvia", "Liechtenstein"=>"|Zone|Liechtenstein", "Lithuania"=>"|Zone|Lithuania", "Luxembourg"=>"|Zone|Luxembourg", "Bahrain"=>"|Zone|Bahrain", "Egypt"=>"|Zone|Egypt", "Iran"=>"|Zone|Iran", "Iraq"=>"|Zone|Iraq", "Israel"=>"|Zone|Israel", "Jordan"=>"|Zone|Jordan", "Kuwait"=>"|Zone|Kuwait", "Lebanon"=>"|Zone|Lebanon", "Oman"=>"|Zone|Oman", "Qatar"=>"|Zone|Qatar", "Saudi Arabia"=>"|Zone|Saudi Arabia", "Syria"=>"|Zone|Syria", "United Arab Emirates"=>"|Zone|United Arab Emirates", "Yemen"=>"|Zone|Yemen", "Antigua and Barbuda"=>"|Zone|Antigua and Barbuda", "Bahamas"=>"|Zone|Bahamas", "Barbados"=>"|Zone|Barbados", "Belize"=>"|Zone|Belize", "Canada"=>"|Zone|Canada", "Costa Rica"=>"|Zone|Costa Rica", "Cuba"=>"|Zone|Cuba", "Dominica"=>"|Zone|Dominica", "Dominican Republic"=>"|Zone|Dominican Republic", "El Salvador"=>"|Zone|El Salvador", "Grenada"=>"|Zone|Grenada", "Haiti"=>"|Zone|Haiti", "Honduras"=>"|Zone|Honduras", "Jamaica"=>"|Zone|Jamaica", "Mexico"=>"|Zone|Mexico", "Nicaragua"=>"|Zone|Nicaragua", "Saint Kitts and Nevis"=>"|Zone|Saint Kitts and Nevis", "Saint Lucia"=>"|Zone|Saint Lucia", "Saint Vincent and the Grenadines"=>"|Zone|Saint Vincent and the Grenadines", "Trinidad and Tobago"=>"|Zone|Trinidad and Tobago", "United States"=>"|Zone|United States", "Australia"=>"|Zone|Australia", "Fiji"=>"|Zone|Fiji", "Marshall Islands"=>"|Zone|Marshall Islands", "Micronesia"=>"|Zone|Micronesia", "Nauru"=>"|Zone|Nauru", "New Zealand"=>"|Zone|New Zealand", "Palau"=>"|Zone|Palau", "Papua New Guinea"=>"|Zone|Papua New Guinea", "Samoa"=>"|Zone|Samoa", "Solomon Islands"=>"|Zone|Solomon Islands", "Tonga"=>"|Zone|Tonga", "Tuvalu"=>"|Zone|Tuvalu", "Vanuatu"=>"|Zone|Vanuatu", "Argentina"=>"|Zone|Argentina", "Bolivia"=>"|Zone|Bolivia", "Brazil"=>"|Zone|Brazil", "Chile"=>"|Zone|Chile", "Colombia"=>"|Zone|Colombia", "Ecuador"=>"|Zone|Ecuador", "Guatemala"=>"|Zone|Guatemala", "Guyana"=>"|Zone|Guyana", "Panama"=>"|Zone|Panama", "Paraguay"=>"|Zone|Paraguay", "Peru"=>"|Zone|Peru", "Suriname"=>"|Zone|Suriname", "Uruguay"=>"|Zone|Uruguay", "Venezuela"=>"|Zone|Venezuela", "Liberia"=>"|Zone|Liberia", "Libya"=>"|Zone|Libya", "Madagascar"=>"|Zone|Madagascar", "Malawi"=>"|Zone|Malawi", "Mali"=>"|Zone|Mali", "Mauritania"=>"|Zone|Mauritania", "Mauritius"=>"|Zone|Mauritius", "Morocco"=>"|Zone|Morocco", "Mozambique"=>"|Zone|Mozambique", "Namibia"=>"|Zone|Namibia", "Niger"=>"|Zone|Niger", "Nigeria"=>"|Zone|Nigeria", "Rwanda"=>"|Zone|Rwanda", "São Tomé and Príncipe"=>"|Zone|São Tomé and Príncipe", "Senegal"=>"|Zone|Senegal", "Seychelles"=>"|Zone|Seychelles", "Sierra Leone"=>"|Zone|Sierra Leone", "Somalia"=>"|Zone|Somalia", "South Africa"=>"|Zone|South Africa", "South Sudan"=>"|Zone|South Sudan", "Sudan"=>"|Zone|Sudan", "Tanzania"=>"|Zone|Tanzania", "The Gambia"=>"|Zone|The Gambia", "Togo"=>"|Zone|Togo", "Tunisia"=>"|Zone|Tunisia", "Uganda"=>"|Zone|Uganda", "Zambia"=>"|Zone|Zambia", "Zimbabwe"=>"|Zone|Zimbabwe", "Singapore"=>"|Zone|Singapore", "South Korea"=>"|Zone|South Korea", "Sri Lanka"=>"|Zone|Sri Lanka", "Taïwan"=>"|Zone|Taïwan", "Tajikistan"=>"|Zone|Tajikistan", "Thailand"=>"|Zone|Thailand", "Timor-Leste"=>"|Zone|Timor-Leste", "Turkmenistan"=>"|Zone|Turkmenistan", "Uzbekistan"=>"|Zone|Uzbekistan", "Vietnam"=>"|Zone|Vietnam", "North Macedonia"=>"|Zone|North Macedonia", "Malta"=>"|Zone|Malta", "Moldova"=>"|Zone|Moldova", "Monaco"=>"|Zone|Monaco", "Montenegro"=>"|Zone|Montenegro", "Netherlands"=>"|Zone|Netherlands", "Norway"=>"|Zone|Norway", "Poland"=>"|Zone|Poland", "Portugal"=>"|Zone|Portugal", "Romania"=>"|Zone|Romania", "Russia"=>"|Zone|Russia", "San Marino"=>"|Zone|San Marino", "Serbia"=>"|Zone|Serbia", "Slovakia"=>"|Zone|Slovakia", "Slovenia"=>"|Zone|Slovenia", "Spain"=>"|Zone|Spain", "Sweden"=>"|Zone|Sweden", "Switzerland"=>"|Zone|Switzerland", "Türkiye"=>"|Zone|Türkiye", "Ukraine"=>"|Zone|Ukraine", "United Kingdom"=>"|Zone|United Kingdom"]
#Const ComponentRaceMapInfos_C_Season_Names ["Winter"=>"|Season|Winter", "Spring"=>"|Season|Spring", "Summer"=>"|Season|Summer", "Fall"=>"|Season|Fall"]

#Struct ComponentRaceMapInfos_K_RankAnim {
	CMlLabel Label_Ranking;
	Integer IntroTime;
	Integer StartTime;
	Integer AnimDuration;
	Integer InitialPosition;
	Integer PositionDifference;
	Integer MaxUpdateFrequency;
	Integer NextUpdate;
	Boolean IsSecondary;
}

#Struct ComponentRaceMapInfos_K_ZoneAnim {
	Integer PunchSoundPlayTime;
	Boolean IsSecondary;
}

// */
// @Component end component-racemapinfos

// @Component start component-tmgame-record
// /*

// */
// @Component end component-tmgame-record

// @Component start Component_UIModule_Race_ScoresTable_Visibility
// /*

#Include "Libs/Nadeo/TMGame/Modes/InputPriority.Script.txt" as InputPriority

#Const Component_UIModule_Race_ScoresTable_Visibility_C_ScoresTable_PauseMenu_None -1
#Const Component_UIModule_Race_ScoresTable_Visibility_C_ScoresTable_PauseMenu_Solo 0
#Const Component_UIModule_Race_ScoresTable_Visibility_C_ScoresTable_PauseMenu_Online 1
#Const Component_UIModule_Race_ScoresTable_Visibility_C_ScoresTable_PauseMenu_Splitscreen 2

#Struct Component_UIModule_Race_ScoresTable_Visibility_K_ScoresTableIsVisible {
	Boolean FromLayer;
	Boolean FromMenu;
}

// */
// @Component end Component_UIModule_Race_ScoresTable_Visibility

// @Component start component-latency-test
// /*

#Include "Libs/Nadeo/CMGame/Components/LatencyTest.Script.txt" as CMGame_LatencyTest
		
// */
// @Component end component-latency-test

// @Component start component-cmgame-slider
// /*

#Include "TextLib" as CMGame_Slider_TL
#Include "MathLib" as CMGame_Slider_ML
#Include "ColorLib" as CMGame_Slider_CL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as CMGame_Slider_Tools

#Struct CMGame_Slider_K_Controls {
	CMlFrame Frame_CounterRot;
	CMlFrame Frame_SliderAlign;
	CMlFrame Frame_VCenter;
	CMlFrame Frame_Bar;
	CMlFrame Frame_ClipBarLeft;
	CMlFrame Frame_ClipBarRight;
	CMlQuad Quad_BarLeft;
	CMlQuad Quad_BarRight;
	CMlQuad Quad_BarMouse;
	CMlQuad Quad_Cursor;
}
#Struct CMGame_Slider_K_RangeColor {
	Vec2 RangeHue;
	Real Saturation;
	Real Value;
}
#Struct CMGame_Slider_K_Properties {
	Integer[] Enabled;
	CMlControl::AlignHorizontal HAlign;
	CMlControl::AlignVertical VAlign;
	Vec2 BarSize;
	Vec2 CursorSize;
	Vec3 BarColor;
	Vec3 CursorColor;
	Integer BarColorMode;
	Integer CursorColorMode;
	Real Opacity;
	Real Rotation;
	Vec2 RangeReal;
	Int2 RangeInteger;
	CMGame_Slider_K_RangeColor RangeColor;
	Boolean ApplyColorOnCursor;
	Text BarImageUrl;
	Text SoundUpdate;
}
#Struct CMGame_Slider_K_State {
	CMGame_Slider_K_Controls Controls;
	CMGame_Slider_K_Properties CustomizedProperties;
	CMGame_Slider_K_Properties MergedProperties;
	Integer[] DirtyProperties;
	Text[] Styles;
	Boolean IsSlider;
	Vec2 SliderDirection;
	Vec2 SliderDirectionNormalized;
	Real SliderLength;
	Vec2 BoundingBox;
	Real Ratio;
	Integer Steps;
	Boolean MouseInteractionDisabled;
}
#Struct CMGame_Slider_K_MovingCursor {
	Boolean IsMoving;
	CMlFrame Slider;
	Vec2 MouseShift;
}
#Struct CMGame_Slider_K_Event {
	Integer Type;
	CMlFrame Slider;
}

// The properties indexing must be a continuous sequence starting from 0
// 0,1,2,3,... not 0,1,3,... for example
#Const CMGame_Slider_C_Property_HAlign 0
#Const CMGame_Slider_C_Property_VAlign 1
#Const CMGame_Slider_C_Property_BarSize 2
#Const CMGame_Slider_C_Property_CursorSize 3
#Const CMGame_Slider_C_Property_Opacity 4
#Const CMGame_Slider_C_Property_Rotation 5
#Const CMGame_Slider_C_Property_RangeReal 6
#Const CMGame_Slider_C_Property_RangeInteger 7
#Const CMGame_Slider_C_Property_RangeColor 8
#Const CMGame_Slider_C_Property_ApplyColorOnCursor 9
#Const CMGame_Slider_C_Property_BarImageUrl 10
#Const CMGame_Slider_C_Property_Styles 11
#Const CMGame_Slider_C_Property_BarColor 12
#Const CMGame_Slider_C_Property_CursorColor 13
#Const CMGame_Slider_C_Property_BarColorMode 14
#Const CMGame_Slider_C_Property_CursorColorMode 15
#Const CMGame_Slider_C_Property_SoundUpdate 16

#Const CMGame_Slider_C_EventType_CursorDragStart 0
#Const CMGame_Slider_C_EventType_CursorDragStop 1

#Const CMGame_Slider_C_ColorMode_None 0
#Const CMGame_Slider_C_ColorMode_Colorize 1
#Const CMGame_Slider_C_ColorMode_Modulate 2
#Const CMGame_Slider_C_ColorMode_Background 3

#Const CMGame_Slider_C_Default_Colorize <-1., -1., -1.>
#Const CMGame_Slider_C_Default_ModulateColor <1., 1., 1.>
#Const CMGame_Slider_C_Default_BgColor <0., 0., 0.>

#Const CMGame_Slider_C_DefaultProperties CMGame_Slider_K_Properties {
	HAlign = CMlControl::AlignHorizontal::Left,
	VAlign = CMlControl::AlignVertical::Top,
	BarSize = <55., 1.8>,
	CursorSize = <2.5, 6.>,
	BarColor = <1., 1., 1.>,
	CursorColor = <1., 1., 1.>,
	BarColorMode = 3,
	CursorColorMode = 3,
	Opacity = 1.,
	Rotation = 0.,
	RangeReal = <0., 1.>,
	RangeInteger = <0, 100>,
	RangeColor = CMGame_Slider_K_RangeColor {
		RangeHue = <0., 1.>,
		Saturation = 1.,
		Value = 1.
	},
	ApplyColorOnCursor = False,
	BarImageUrl = "",
	SoundUpdate = "ArrowSelect"
}

// */
// @Component end component-cmgame-slider

// @Component start component-display-version
// /*

#Include "TextLib" as ComponentDisplayVersion_TL
#Include "Libs/Nadeo/CMGame/Utils/BuildInfo@2.Script.txt" as ComponentDisplayVersion_BuildInfo
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as ComponentDisplayVersion_Config
		
// */
// @Component end component-display-version

// @Component start onlineservices-status-api
// /*

#Struct OnlineServicesStatusAPI_K_OnlineService { Text Name; Integer StatusCode; Text ImpactedByEvent; }
#Struct OnlineServicesStatusAPI_K_OnlineServiceGroup { Text Type; OnlineServicesStatusAPI_K_OnlineService[] Services; }
#Struct OnlineServicesStatusAPI_K_OnlineServiceEvent { Text Type; Integer StartTimestamp; Integer EndTimestamp; }
#Struct OnlineServicesStatusAPI_K_OnlineServiceOverview { OnlineServicesStatusAPI_K_OnlineServiceGroup[] ServicesGroups; OnlineServicesStatusAPI_K_OnlineServiceEvent Event; }
		
// */
// @Component end onlineservices-status-api

// @Component start lib-online-services-status-store
// /*

#Include "Libs/Nadeo/Trackmania/Stores/OnlineServicesStatusStore_ML.Script.txt" as Trackmania_OnlineServicesStatusStore
		
// */
// @Component end lib-online-services-status-store

// @Component start component-onlineservicescard
// /*

#Include "TextLib" as ComponentOnlineServicesStatusCard_TL
#Include "TimeLib" as ComponentOnlineServicesStatusCard_TiL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentOnlineServicesStatusCard_Tools

#Struct ComponentOnlineServicesStatusCard_K_Controls {
	CMlFrame Frame_Global;
	CMlFrame Contour_OnlineServicesStatusCard;
	CMlLabel Label_OnlineServicesStatusName;
	CMlLabel Label_OnlineServicesStatusDetails;
}

#Const ComponentOnlineServicesStatusCard_C_OneDay_InSecs 86400
		
// */
// @Component end component-onlineservicescard

// @Component start component-settings
// /*

#Include "TextLib" as ComponentSettings_TL
#Include "TimeLib" as ComponentSettings_TiL
#Include "MathLib" as ComponentSettings_ML
#Include "ColorLib" as ComponentSettings_CL
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as ComponentSettings_Http
#Include "Libs/Nadeo/CMGame/Utils/Privileges.Script.txt" as ComponentSettings_Privileges
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as ComponentSettings_Platform
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as ComponentSettings_MainUser
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentSettings_Tools
#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ComponentSettings_ButtonIcon
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as ComponentSettings_Config
#Include "Libs/Nadeo/Trackmania/API/ActivateKeyAPI.Script.txt" as ComponentSettings_ActivateKeyAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ComponentSettings_ControllerInfo
#Include "Libs/Nadeo/CMGame/Utils/RequestRedraw.Script.txt" as ComponentSettings_RequestRedraw
#Include "Libs/Nadeo/CMGame/Stores/SplashscreenStore_ML.Script.txt" as ComponentSettings_SplashscreenStore

#Struct ComponentSettings_K_Values {
	Text ValueText;
	Real ValueReal;
	Boolean ValueBoolean;
	Integer ValueInteger;
	Text[] ValueBinds;
	Text[] ValueButtonIcons;
	Real[Text] ValueControlAnalogReal;
	Boolean[Text] ValueControlAnalogBoolean;
}
#Struct ComponentSettings_K_List {
	Boolean CanLoop;
	Text[] Labels;
	Text[] ValuesText;
	Int2[] ValuesInt2;
	Integer[] ValuesInteger;
	Boolean[] ValuesBoolean;
	CDisplaySettings::EDisplayMode[] ValuesDisplayMode;
	CDisplaySettings::EDisplaySync[] ValuesDisplaySync;
	CDisplaySettings::EGpuSync[] ValuesGpuSync;
	CDisplaySettings::EForwardAA[] ValuesForwardAA;
	CDisplaySettings::EDeferredAA[] ValuesDeferredAA;
	CDisplaySettings::EPreset[] ValuesPreset;
	CDisplaySettings::EShaderQuality[] ValuesShaderQuality;
	CDisplaySettings::EShadows[] ValuesShadows;
	CDisplaySettings::ETextureFilter[] ValuesTextureFiltering;
	CDisplaySettings::EVehicleReflect[] ValuesVehicleReflect;
	CDisplaySettings::EWaterReflect[] ValuesWaterReflect;
	CDisplaySettings::EFxBloomHdr[] ValuesFxBloomHdr;
	CUserV2Profile::ECustomPlayerModels[] ValuesCustomPlayerModels;
	CManiaPlanet::EPlayerInfoDisplayType[] ValuesPlayerInfoDisplayType;
	CUserV2Profile::EPlayerVisibility[] ValuesPlayerVisibility;
	CUserV2Profile::ERoadsideSpectatorVisibility[] ValuesRoadsideSpectatorVisibility;
	CUserV2Profile::EDisplayRecords[] ValuesDisplayRecords;
	CDisplaySettings::EShowPerformance[] ValuesShowPerformance;
	CManiaPlanet::ENetworkSpeed[] ValuesNetworkSpeed;
	CUserV2Profile::EMapEditorMood[] ValuesMapEditorMood;
	CUserV2Profile::EMapEditorDifficulty[] MapEditorDifficulty;
	CDisplaySettings::EScreenshotExt[] ValuesScreenshotExt;
	CDisplaySettings::EConsoleResolution[] ValuesConsoleResolution;
	NSystemConfig::EVoiceDetectionMode[] ValuesVoiceDetectionMode;
	CUserV2Profile::EIngameChatBackground[] ValuesChatBackground;
	CUserV2Profile::EIngameChatTextSize[] ValuesChatTextSize;
}
#Struct ComponentSettings_K_Slider {
	Integer Type;
	Vec2 RangeReal;
	Int2 RangeInteger;
	Integer Steps;
	Boolean DisplayTextField;
}
#Struct ComponentSettings_K_Checkbox {
	Text TextLeft;
	Text TextRight;
}
#Struct ComponentSettings_K_Setting {
	Integer Id;
	Integer Category;
	Integer SectionId;
	Integer SectionKey;
	Text Name;
	Integer Type;
	Text InfoTitle;
	Text InfoDescription;
	Text ButtonText;
	Integer ActionIndex;
	ComponentSettings_K_Slider Slider;
	ComponentSettings_K_List List;
	ComponentSettings_K_Checkbox Checkbox;
	ComponentSettings_K_Values Old;
	ComponentSettings_K_Values New;
	Boolean IsDirty;
	Boolean IgnoreDirty;
	Integer Status;
	Boolean NeedRestart;
	Boolean HasDisplaySettingsPreset;
	Boolean NeedEditorQuickStart;
	Boolean NeedManualVoiceChatVoiceDetection;
	Text[] Permissions;
	Integer[] PlatformFamily;
	CSystemPlatform::ESystemPlatform[] Platforms;
	CPrivilegeMgr::EPrivilege[] Privileges;
}
#Struct ComponentSettings_K_Binding {
	Integer ActionIndex;
	Text ActionName;
	Text[] Binds;
	Text[] ButtonIcons;
}
#Struct ComponentSettings_K_Controls {
	CMlFrame NavigationTabs_Categories;
	CMlFrame Scroll_Settings;
	CMlLabel Label_InfoTitle;
	CMlLabel Label_InfoDescription;
	CMlLabel Label_InfoAlert;
	CMlFrame ButtonIcon_Back;
	CMlFrame Button_Back;
	CMlFrame Button_Apply;
	CMlFrame Frame_PlayerCard;
	CMlQuad Quad_PlayerFlag;
	CMlFrame PlayerName_Name;
	CMlLabel Label_PlayerZone;
	CMlFrame Frame_OnlineServicesStatusCard;
	CMlFrame PopUp_DiscardChanges;
	CMlFrame ButtonList_Settings;
	CMlQuad Quad_Dimmer;
	CMlLabel Label_RestartRequired;
	CMlQuad Quad_PendingChanges;
	CMlQuad Quad_Background;
	CMlFrame PopUp_ActivateKey;
	CMlFrame Frame_AreaCalibration;
}
#Struct ComponentSettings_K_AfterDiscardPopUp {
	Integer Action;
	Integer DisplayedCategory;
}
#Struct ComponentSettings_K_DraggedSlider {
	Boolean IsDragged;
	CMlFrame Slider;
	CMlFrame TextField;
	Integer SliderType;
}
#Struct ComponentSettings_K_DisplaySettingsPreset {
	CDisplaySettings::EShaderQuality ShaderQuality_NextStart;
	CDisplaySettings::EShadows Shadows_NextStart;
	Integer TexturesQuality_NextStart;
	CDisplaySettings::EEverywhereReflect EverywhereReflect;
	CDisplaySettings::EWaterReflect WaterReflect;
	CDisplaySettings::EVehicleReflect VehicleReflect;
	CDisplaySettings::EFxBloomHdr FxBloomHdr;
	CDisplaySettings::EFxMotionBlur FxMotionBlur;
	CDisplaySettings::EFxBlur FxBlur;
}
#Struct ComponentSettings_K_PrivilegesCheck {
	ComponentSettings_Privileges::K_PrivilegesCheck Check;
	Integer SettingId;
	Integer SettingType;
	CMlFrame Frame_Setting;
	Integer Direction;
	Boolean PlaySound;
}
#Struct ComponentSettings_K_State {
	ComponentSettings_K_Controls Controls;
	Boolean ComponentEnabled;
	CMlControl LastBottomButtonFocused;
	Integer[][Integer] ScrollSettingIds;
	ComponentSettings_K_Setting[Integer] Settings;
	Integer DisplayedCategory;
	Text[] ControlVehicleModels;
	Text ControlVehicleModel;
	Integer ControlControllerId;
	ComponentSettings_K_Binding[] Bindings;
	Integer BindingsKeyShift;
	Integer IsEditingTextField;
	Integer CanResetIsEditingTextField;
	Boolean IsWaitingBind;
	Boolean IsWaitingBind_PlaySound;
	Int2 WindowSize;
	Real MasterVolume;
	Real EffectVolume;
	Real UIVolume;
	Real MusicVolume;
	Integer[Integer] LastFocusedSettingKey;
	Integer DefaultCategory;
	Boolean DiscardPopUpDisplayed;
	Boolean ActivateKeyPopUpDisplayed;
	ComponentSettings_K_AfterDiscardPopUp AfterDiscardPopUp;
	Integer FocusedSectionId;
	Boolean CanTryToReloadDisplaySettings;
	Boolean CanTryToReloadAudioSettings;
	Boolean CreditsEnabled;
	Boolean ProfileEnabled;
	Boolean LatencyTestEnabled;
	Boolean VehicleSelectionEnabled;
	Integer InputPadsCount;
	Integer FocusedSettingType;
	Boolean ScrollIsFocused;
	Boolean ControllerInfoEnabled;
	Boolean CanEditSlider;
	Boolean SettingIsLocked;
	Boolean SettingsAreDirty;
	Boolean GameNeedRestart;
	Boolean ShowSettingsThatHaveDisplaySettingsPreset;
	Boolean TrackEditorQuickStartEnabled;
	Boolean IsCrossPlayActive;
	Boolean VoiceChatVoiceDetectionManualSensitivity;
	Integer AlertMessageEndTime;
	Integer PreviouslyFocusedTabId;
	Integer PreviouslyFocusedSectionId;
	Integer PreviouslyFocusedSettingId;
	Boolean IsAreaCalibrationDisplayed;
	Boolean IsPlayerCardForcedHide;
	Boolean IsOnboardingModeEnabled;
	ComponentSettings_K_DraggedSlider DraggedSlider;
	ComponentSettings_K_DisplaySettingsPreset[CDisplaySettings::EPreset] DisplaySettingsPresets;
	ComponentSettings_K_PrivilegesCheck PrivilegesCheck;
}
#Struct ComponentSettings_K_Event {
	Integer Type;
}

#Const ComponentSettings_C_EventType_Back 1
#Const ComponentSettings_C_EventType_Continue 2
#Const ComponentSettings_C_EventType_OpenCredits 3
#Const ComponentSettings_C_EventType_OpenProfile 4

#Const ComponentSettings_C_ActionAfterDiscardPopUp_Null 0
#Const ComponentSettings_C_ActionAfterDiscardPopUp_GoToCategory 1
#Const ComponentSettings_C_ActionAfterDiscardPopUp_CloseSettings 2
#Const ComponentSettings_C_ActionAfterDiscardPopUp_OpenCredits 3
#Const ComponentSettings_C_ActionAfterDiscardPopUp_OpenProfile 4

#Const ComponentSettings_C_TTSContextLevel_Page 11
#Const ComponentSettings_C_TTSContextLevel_Section 12
#Const ComponentSettings_C_TTSContextLevel_Setting 13

#Const ComponentSettings_C_Zone_Translations ["World"=>"|Zone|World", "Europe"=>"|Zone|Europe", "Middle East"=>"|Zone|Middle East", "North America"=>"|Zone|North America", "South America"=>"|Zone|South America", "Oceania"=>"|Zone|Oceania", "Africa"=>"|Zone|Africa", "Asia"=>"|Zone|Asia", "Algeria"=>"|Zone|Algeria", "Angola"=>"|Zone|Angola", "Benin"=>"|Zone|Benin", "Botswana"=>"|Zone|Botswana", "Burkina Faso"=>"|Zone|Burkina Faso", "Burundi"=>"|Zone|Burundi", "Cameroon"=>"|Zone|Cameroon", "Cabo Verde"=>"|Zone|Cabo Verde", "Central African Republic"=>"|Zone|Central African Republic", "Chad"=>"|Zone|Chad", "Comoros"=>"|Zone|Comoros", "Congo"=>"|Zone|Congo", "Djibouti"=>"|Zone|Djibouti", "DR Congo"=>"|Zone|DR Congo", "Equatorial Guinea"=>"|Zone|Equatorial Guinea", "Eritrea"=>"|Zone|Eritrea", "Ethiopia"=>"|Zone|Ethiopia", "Gabon"=>"|Zone|Gabon", "Ghana"=>"|Zone|Ghana", "Guinea"=>"|Zone|Guinea", "Guinea-Bissau"=>"|Zone|Guinea-Bissau", "Ivory Coast"=>"|Zone|Ivory Coast", "Kenya"=>"|Zone|Kenya", "Lesotho"=>"|Zone|Lesotho", "Afghanistan"=>"|Zone|Afghanistan", "Armenia"=>"|Zone|Armenia", "Azerbaijan"=>"|Zone|Azerbaijan", "Bangladesh"=>"|Zone|Bangladesh", "Bhutan"=>"|Zone|Bhutan", "Brunei"=>"|Zone|Brunei", "Cambodia"=>"|Zone|Cambodia", "Mainland China"=>"|Zone|Mainland China", "Georgia"=>"|Zone|Georgia", "Hong Kong"=>"|Zone|Hong Kong", "India"=>"|Zone|India", "Indonesia"=>"|Zone|Indonesia", "Japan"=>"|Zone|Japan", "Kazakhstan"=>"|Zone|Kazakhstan", "Kyrgyzstan"=>"|Zone|Kyrgyzstan", "Laos"=>"|Zone|Laos", "Malaysia"=>"|Zone|Malaysia", "Maldives"=>"|Zone|Maldives", "Mongolia"=>"|Zone|Mongolia", "Myanmar"=>"|Zone|Myanmar", "Nepal"=>"|Zone|Nepal", "North Korea"=>"|Zone|North Korea", "Pakistan"=>"|Zone|Pakistan", "Philippines"=>"|Zone|Philippines", "Albania"=>"|Zone|Albania", "Andorra"=>"|Zone|Andorra", "Austria"=>"|Zone|Austria", "Belarus"=>"|Zone|Belarus", "Belgium"=>"|Zone|Belgium", "Bosnia and Herzegovina"=>"|Zone|Bosnia and Herzegovina", "Bulgaria"=>"|Zone|Bulgaria", "Croatia"=>"|Zone|Croatia", "Cyprus"=>"|Zone|Cyprus", "Czechia"=>"|Zone|Czechia", "Denmark"=>"|Zone|Denmark", "Estonia"=>"|Zone|Estonia", "Finland"=>"|Zone|Finland", "France"=>"|Zone|France", "Germany"=>"|Zone|Germany", "Greece"=>"|Zone|Greece", "Hungary"=>"|Zone|Hungary", "Iceland"=>"|Zone|Iceland", "Ireland"=>"|Zone|Ireland", "Italy"=>"|Zone|Italy", "Latvia"=>"|Zone|Latvia", "Liechtenstein"=>"|Zone|Liechtenstein", "Lithuania"=>"|Zone|Lithuania", "Luxembourg"=>"|Zone|Luxembourg", "Bahrain"=>"|Zone|Bahrain", "Egypt"=>"|Zone|Egypt", "Iran"=>"|Zone|Iran", "Iraq"=>"|Zone|Iraq", "Israel"=>"|Zone|Israel", "Jordan"=>"|Zone|Jordan", "Kuwait"=>"|Zone|Kuwait", "Lebanon"=>"|Zone|Lebanon", "Oman"=>"|Zone|Oman", "Qatar"=>"|Zone|Qatar", "Saudi Arabia"=>"|Zone|Saudi Arabia", "Syria"=>"|Zone|Syria", "United Arab Emirates"=>"|Zone|United Arab Emirates", "Yemen"=>"|Zone|Yemen", "Antigua and Barbuda"=>"|Zone|Antigua and Barbuda", "Bahamas"=>"|Zone|Bahamas", "Barbados"=>"|Zone|Barbados", "Belize"=>"|Zone|Belize", "Canada"=>"|Zone|Canada", "Costa Rica"=>"|Zone|Costa Rica", "Cuba"=>"|Zone|Cuba", "Dominica"=>"|Zone|Dominica", "Dominican Republic"=>"|Zone|Dominican Republic", "El Salvador"=>"|Zone|El Salvador", "Grenada"=>"|Zone|Grenada", "Haiti"=>"|Zone|Haiti", "Honduras"=>"|Zone|Honduras", "Jamaica"=>"|Zone|Jamaica", "Mexico"=>"|Zone|Mexico", "Nicaragua"=>"|Zone|Nicaragua", "Saint Kitts and Nevis"=>"|Zone|Saint Kitts and Nevis", "Saint Lucia"=>"|Zone|Saint Lucia", "Saint Vincent and the Grenadines"=>"|Zone|Saint Vincent and the Grenadines", "Trinidad and Tobago"=>"|Zone|Trinidad and Tobago", "United States"=>"|Zone|United States", "Australia"=>"|Zone|Australia", "Fiji"=>"|Zone|Fiji", "Marshall Islands"=>"|Zone|Marshall Islands", "Micronesia"=>"|Zone|Micronesia", "Nauru"=>"|Zone|Nauru", "New Zealand"=>"|Zone|New Zealand", "Palau"=>"|Zone|Palau", "Papua New Guinea"=>"|Zone|Papua New Guinea", "Samoa"=>"|Zone|Samoa", "Solomon Islands"=>"|Zone|Solomon Islands", "Tonga"=>"|Zone|Tonga", "Tuvalu"=>"|Zone|Tuvalu", "Vanuatu"=>"|Zone|Vanuatu", "Argentina"=>"|Zone|Argentina", "Bolivia"=>"|Zone|Bolivia", "Brazil"=>"|Zone|Brazil", "Chile"=>"|Zone|Chile", "Colombia"=>"|Zone|Colombia", "Ecuador"=>"|Zone|Ecuador", "Guatemala"=>"|Zone|Guatemala", "Guyana"=>"|Zone|Guyana", "Panama"=>"|Zone|Panama", "Paraguay"=>"|Zone|Paraguay", "Peru"=>"|Zone|Peru", "Suriname"=>"|Zone|Suriname", "Uruguay"=>"|Zone|Uruguay", "Venezuela"=>"|Zone|Venezuela", "Liberia"=>"|Zone|Liberia", "Libya"=>"|Zone|Libya", "Madagascar"=>"|Zone|Madagascar", "Malawi"=>"|Zone|Malawi", "Mali"=>"|Zone|Mali", "Mauritania"=>"|Zone|Mauritania", "Mauritius"=>"|Zone|Mauritius", "Morocco"=>"|Zone|Morocco", "Mozambique"=>"|Zone|Mozambique", "Namibia"=>"|Zone|Namibia", "Niger"=>"|Zone|Niger", "Nigeria"=>"|Zone|Nigeria", "Rwanda"=>"|Zone|Rwanda", "São Tomé and Príncipe"=>"|Zone|São Tomé and Príncipe", "Senegal"=>"|Zone|Senegal", "Seychelles"=>"|Zone|Seychelles", "Sierra Leone"=>"|Zone|Sierra Leone", "Somalia"=>"|Zone|Somalia", "South Africa"=>"|Zone|South Africa", "South Sudan"=>"|Zone|South Sudan", "Sudan"=>"|Zone|Sudan", "Tanzania"=>"|Zone|Tanzania", "The Gambia"=>"|Zone|The Gambia", "Togo"=>"|Zone|Togo", "Tunisia"=>"|Zone|Tunisia", "Uganda"=>"|Zone|Uganda", "Zambia"=>"|Zone|Zambia", "Zimbabwe"=>"|Zone|Zimbabwe", "Singapore"=>"|Zone|Singapore", "South Korea"=>"|Zone|South Korea", "Sri Lanka"=>"|Zone|Sri Lanka", "Taïwan"=>"|Zone|Taïwan", "Tajikistan"=>"|Zone|Tajikistan", "Thailand"=>"|Zone|Thailand", "Timor-Leste"=>"|Zone|Timor-Leste", "Turkmenistan"=>"|Zone|Turkmenistan", "Uzbekistan"=>"|Zone|Uzbekistan", "Vietnam"=>"|Zone|Vietnam", "North Macedonia"=>"|Zone|North Macedonia", "Malta"=>"|Zone|Malta", "Moldova"=>"|Zone|Moldova", "Monaco"=>"|Zone|Monaco", "Montenegro"=>"|Zone|Montenegro", "Netherlands"=>"|Zone|Netherlands", "Norway"=>"|Zone|Norway", "Poland"=>"|Zone|Poland", "Portugal"=>"|Zone|Portugal", "Romania"=>"|Zone|Romania", "Russia"=>"|Zone|Russia", "San Marino"=>"|Zone|San Marino", "Serbia"=>"|Zone|Serbia", "Slovakia"=>"|Zone|Slovakia", "Slovenia"=>"|Zone|Slovenia", "Spain"=>"|Zone|Spain", "Sweden"=>"|Zone|Sweden", "Switzerland"=>"|Zone|Switzerland", "Türkiye"=>"|Zone|Türkiye", "Ukraine"=>"|Zone|Ukraine", "United Kingdom"=>"|Zone|United Kingdom"]
#Const ComponentSettings_C_Inputs_Vehicles_Translations ["CarSport"=>"|Vehicle|Stadium car", "CarSnow"=>"|Vehicle|Snow car", "CarRally"=>"|Vehicle|Rally car", "CarDesert"=>"|Vehicle|Desert car"]

#Const ComponentSettings_C_PopUpDiscardChangesChoices_No 0
#Const ComponentSettings_C_PopUpDiscardChangesChoices_Yes 1

#Const ComponentSettings_C_SettingType_Null 0
#Const ComponentSettings_C_SettingType_Section 1
#Const ComponentSettings_C_SettingType_List 2
#Const ComponentSettings_C_SettingType_TextField 3
#Const ComponentSettings_C_SettingType_Checkbox 4
#Const ComponentSettings_C_SettingType_Slider 5
#Const ComponentSettings_C_SettingType_Binding 6
#Const ComponentSettings_C_SettingType_Button 7

#Const ComponentSettings_C_SettingStatus_Enabled 0
#Const ComponentSettings_C_SettingStatus_Disabled 1
#Const ComponentSettings_C_SettingStatus_Hidden 2
#Const ComponentSettings_C_SettingStatus_MissingPermission 3

#Const ComponentSettings_C_SliderType_Real 0
#Const ComponentSettings_C_SliderType_Integer 1
#Const ComponentSettings_C_SliderType_Color 2

#Const ComponentSettings_C_SettingCategory_Null 0
#Const ComponentSettings_C_SettingCategory_Profile 1
#Const ComponentSettings_C_SettingCategory_Video 2
#Const ComponentSettings_C_SettingCategory_Sound 3
#Const ComponentSettings_C_SettingCategory_Controls 4
#Const ComponentSettings_C_SettingCategory_HUD 5
#Const ComponentSettings_C_SettingCategory_System 6
#Const ComponentSettings_C_SettingCategories [
	//L16N [Settings] Title of the profile settings category (trigram, privacy, ...)
	1 => _("|Settings|Profile"),
	//L16N [Settings] Title of the video settings category (resolution, texture quality, ...)
	2 => _("|Settings|Video"),
	//L16N [Settings] Title of the sound settings category (audio output, music volume, ...)
	3 => _("|Settings|Sound"),
	//L16N [Settings] Title of the input settings category (mouse sensibility, bindings, ...)
	4 => _("|Settings|Controls"),
	//L16N [Settings] Title of the HUD settings category (special block alerts, track editor quick start, ...)
	5 => _("|Settings|HUD"),
	//L16N [Settings] Title of the system settings category (language, network speed, ...)
	6 => _("|Settings|System")
]

#Const ComponentSettings_C_SettingId_NullId 0
// Profile settings
#Const ComponentSettings_C_SettingId_ProfileSectionAccount 101
#Const ComponentSettings_C_SettingId_ProfileTrigram 102
#Const ComponentSettings_C_SettingId_ProfileTrailsColor 103
#Const ComponentSettings_C_SettingId_ProfileCopyAccountId 104
#Const ComponentSettings_C_SettingId_ProfileOpenPlayerPage 105
#Const ComponentSettings_C_SettingId_ProfileOpenProfilePage 106
#Const ComponentSettings_C_SettingId_ProfileActivateKey 107
#Const ComponentSettings_C_SettingId_ProfileSectionPrivacy 108
#Const ComponentSettings_C_SettingId_ProfileDisplaySplashscreen 109
#Const ComponentSettings_C_SettingId_ProfileDisplayAds 110
#Const ComponentSettings_C_SettingId_ProfileEnablePersonalizedAds 111
// Video settings
#Const ComponentSettings_C_SettingId_VideoSectionDisplay 201
#Const ComponentSettings_C_SettingId_VideoDevice 202
#Const ComponentSettings_C_SettingId_VideoDisplayMode 203
#Const ComponentSettings_C_SettingId_VideoFullscreenResolution 204
#Const ComponentSettings_C_SettingId_VideoWindowResolutionX 205
#Const ComponentSettings_C_SettingId_VideoWindowResolutionY 206
#Const ComponentSettings_C_SettingId_VideoShowWindowBorder 207
#Const ComponentSettings_C_SettingId_VideoAutomaticQuality 208
#Const ComponentSettings_C_SettingId_VideoAutomaticMinFPS 209
#Const ComponentSettings_C_SettingId_VideoAutomaticMaxFPS 210
#Const ComponentSettings_C_SettingId_VideoLimitFPS 211
#Const ComponentSettings_C_SettingId_VideoDisplaySync 212
#Const ComponentSettings_C_SettingId_VideoGPUSync 213
#Const ComponentSettings_C_SettingId_VideoTrippleBuffer 214
#Const ComponentSettings_C_SettingId_VideoAGPUseFactor 215
#Const ComponentSettings_C_SettingId_VideoSectionAA 216
#Const ComponentSettings_C_SettingId_VideoForwardAA 217
#Const ComponentSettings_C_SettingId_VideoDeferredAA 218
#Const ComponentSettings_C_SettingId_VideoRealtimeSSAA 219
#Const ComponentSettings_C_SettingId_VideoRealtimeSSAAMotion 220
#Const ComponentSettings_C_SettingId_VideoRealtimeSSAAMinFPS 221
#Const ComponentSettings_C_SettingId_VideoSectionAdvanced 222
#Const ComponentSettings_C_SettingId_VideoCanSelectPreset 223
#Const ComponentSettings_C_SettingId_VideoPreset 224
#Const ComponentSettings_C_SettingId_VideoShaderQuality 225
#Const ComponentSettings_C_SettingId_VideoTexturesQuality 226
#Const ComponentSettings_C_SettingId_VideoShadows 227
#Const ComponentSettings_C_SettingId_VideoTextureFiltering 228
#Const ComponentSettings_C_SettingId_VideoVehicleReflect 229
#Const ComponentSettings_C_SettingId_VideoWaterReflect 230
#Const ComponentSettings_C_SettingId_VideoEverywhereReflect 231
#Const ComponentSettings_C_SettingId_VideoBloomHDR 232
#Const ComponentSettings_C_SettingId_VideoMotionBlur 233
#Const ComponentSettings_C_SettingId_VideoMotionBlurIntensity 234
#Const ComponentSettings_C_SettingId_VideoSlowMotionBlur 235
#Const ComponentSettings_C_SettingId_VideoCarCustomizationLevel 236
#Const ComponentSettings_C_SettingId_VideoPerformanceQuality 237
#Const ComponentSettings_C_SettingId_VideoOutputScale 238
// Sound settings
#Const ComponentSettings_C_SettingId_SoundSectionGeneral 301
#Const ComponentSettings_C_SettingId_SoundEnable 302
#Const ComponentSettings_C_SettingId_SoundDevice 303
#Const ComponentSettings_C_SettingId_SoundMusicVolume 304
#Const ComponentSettings_C_SettingId_SoundMasterVolume 305
#Const ComponentSettings_C_SettingId_SoundEffectVolume 306
#Const ComponentSettings_C_SettingId_SoundUIVolume 307
#Const ComponentSettings_C_SettingId_SoundMuteUnfocused 309
#Const ComponentSettings_C_SettingId_SoundSectionVoiceChatAndTTS 310
#Const ComponentSettings_C_SettingId_SoundVoiceChat 311
#Const ComponentSettings_C_SettingId_SoundVoiceChatDeviceIn 312
#Const ComponentSettings_C_SettingId_SoundVoiceChatDeviceOut 313
#Const ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionMode 314
#Const ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionSensitivity 315
#Const ComponentSettings_C_SettingId_SoundVoiceChatLoopback 316
#Const ComponentSettings_C_SettingId_SoundVoiceChatAndTTSVolume 308
#Const ComponentSettings_C_SettingId_SoundSpeechToText 317
#Const ComponentSettings_C_SettingId_SoundTextToSpeech 318
#Const ComponentSettings_C_SettingId_SendTextAsVoice 319
// Control settings
#Const ComponentSettings_C_SettingId_ControlSectionLatency 401
#Const ComponentSettings_C_SettingId_ControlLatencyTest 402
#Const ComponentSettings_C_SettingId_ControlSectionAnalogSettings 403
#Const ComponentSettings_C_SettingId_ControlAnalogVehicleSelection 404
#Const ComponentSettings_C_SettingId_ControlAnalogSensitivity 405
#Const ComponentSettings_C_SettingId_ControlAnalogDeadZone 406
#Const ComponentSettings_C_SettingId_ControlAnalogRumbleIntensity 407
#Const ComponentSettings_C_SettingId_ControlTriggerHapticFeedbackEnabled 408
#Const ComponentSettings_C_SettingId_ControlInvertSteer 409
#Const ComponentSettings_C_SettingId_ControlAccelIsToggleMode 410
#Const ComponentSettings_C_SettingId_ControlBrakeIsToggleMode 411
#Const ComponentSettings_C_SettingId_ControlAnalogCenterSpringIntensity 412
#Const ComponentSettings_C_SettingId_ControlSectionDevices 413
#Const ComponentSettings_C_SettingId_ControlDevice 414
#Const ComponentSettings_C_SettingId_ControlUnbindAll 415
#Const ComponentSettings_C_SettingId_ControlUnbindOne 416
#Const ComponentSettings_C_SettingId_ControlBindDefault 417
#Const ComponentSettings_C_SettingId_ControlSectionBindings 418
#Const ComponentSettings_C_SettingId_ControlEditBind 419
// HUD settings
#Const ComponentSettings_C_SettingId_HUDSectionMarkers 501
#Const ComponentSettings_C_SettingId_HUDMarkersType 502
#Const ComponentSettings_C_SettingId_HUDMarkersSize 503
#Const ComponentSettings_C_SettingId_HUDSectionCamera 504
#Const ComponentSettings_C_SettingId_HUDPrioritizeAlternateCam1 505
#Const ComponentSettings_C_SettingId_HUDPrioritizeAlternateCam2 506
#Const ComponentSettings_C_SettingId_HUDPrioritizeAlternateCam3 507
#Const ComponentSettings_C_SettingId_HUDInternalCamCarVisibility 508
#Const ComponentSettings_C_SettingId_HUDSectionTextChat 509
#Const ComponentSettings_C_SettingId_HUDChatAllowHide 510
#Const ComponentSettings_C_SettingId_HUDChatBackground 511
#Const ComponentSettings_C_SettingId_HUDChatTextSize 512
#Const ComponentSettings_C_SettingId_HUDSectionMiscellaneous 513
#Const ComponentSettings_C_SettingId_HUDDefaultOpponentVisibility 514
#Const ComponentSettings_C_SettingId_HUDRoadsideSpectatorVisibility 515
#Const ComponentSettings_C_SettingId_HUDEnableSpecialBlockMessage 516
#Const ComponentSettings_C_SettingId_HUDTrackRecordsVisibility 517
#Const ComponentSettings_C_SettingId_HUDDisplayCheckpointCounter 518
#Const ComponentSettings_C_SettingId_HUDShowPerformance 519
// System settings
#Const ComponentSettings_C_SettingId_SystemSectionLanguage 601
#Const ComponentSettings_C_SettingId_SystemLanguage 602
#Const ComponentSettings_C_SettingId_SystemSectionMiscellaneous 603
#Const ComponentSettings_C_SettingId_SystemColorblindMode 604
#Const ComponentSettings_C_SettingId_SystemAutoSkipStartScreens 605
#Const ComponentSettings_C_SettingId_SystemScreenshotExtension 606
#Const ComponentSettings_C_SettingId_SystemJoinLink 607
#Const ComponentSettings_C_SettingId_SystemCleanCache 608
#Const ComponentSettings_C_SettingId_SystemCredits 609
#Const ComponentSettings_C_SettingId_SystemSectionNetwork 610
#Const ComponentSettings_C_SettingId_SystemOnlineServicesStatus 611
#Const ComponentSettings_C_SettingId_SystemNetworkSpeed 612
#Const ComponentSettings_C_SettingId_SystemNetworkSpeedDownload 613
#Const ComponentSettings_C_SettingId_SystemNetworkSpeedUpload 614
#Const ComponentSettings_C_SettingId_SystemNetworkCrossPlay 615
#Const ComponentSettings_C_SettingId_SystemSectionDownload 616
#Const ComponentSettings_C_SettingId_SystemDownloadSkin 617
#Const ComponentSettings_C_SettingId_SystemDownloadMapMod 618
#Const ComponentSettings_C_SettingId_SystemDownloadSign 619
#Const ComponentSettings_C_SettingId_SystemSectionTrackEditorQuickStart 620
#Const ComponentSettings_C_SettingId_SystemEnableTrackEditorQuickStart 621
#Const ComponentSettings_C_SettingId_SystemTrackEditorQuickstartMapType 622
#Const ComponentSettings_C_SettingId_SystemTrackEditorQuickStartUseGamepadController 623
#Const ComponentSettings_C_SettingId_SystemTrackEditorQuickStartDifficulty 624
#Const ComponentSettings_C_SettingId_SystemTrackEditorQuickStartMood 625

#Const ComponentSettings_C_SettingKey_Null -1

#Const ComponentSettings_C_Setting_Null ComponentSettings_K_Setting {
	Id = 0,
	Type = 0,
	Category = 0,
	IsDirty = False,
	SectionKey = -1,
	SectionId = 0,
	HasDisplaySettingsPreset = False
}

#Const ComponentSettings_C_List_VoiceChat_VoiceDetectionMode_PC ComponentSettings_K_List {
	Labels = [
		//L16N [Settings] Automatic sensitivity : sensitivity of the microphone will be computed automatically
		_("|Voice chat microphone activation mode|Automatic sensitivity"),
		//L16N [Settings] Manual sensitivity : player can set the sensitivity of the microphone
		_("|Voice chat microphone activation mode|Manual sensitivity"),
		//L16N [Settings] Push-To-Talk : player needs to maintain an input to talk in the voice chat
		_("|Voice chat microphone activation mode|Push-To-Talk")
	],
	ValuesVoiceDetectionMode = [
		NSystemConfig::EVoiceDetectionMode::AutoDetect,
		NSystemConfig::EVoiceDetectionMode::Manual,
		NSystemConfig::EVoiceDetectionMode::PushToTalk
	]
}

#Const ComponentSettings_C_Settings [
	ComponentSettings_K_Setting {
		Id = 101,
		Category = 1,
		//L16N [Settings] Section of settings related to the player account
		Name = _("Account"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 102,
		Category = 1,
		//L16N [Settings] The three characters displayed on the back of the car
		Name = _("Trigram"),
		Type = 3,
		//L16N [Settings] Description of the trigram setting
		InfoDescription = _("The three characters displayed on the back of the car")
	},
	ComponentSettings_K_Setting {
		Id = 103,
		Category = 1,
		//L16N [Settings] Color used in multiple ingame features such as the trails left by the car, the pilot lights, the podium sparkles or the special cars
		Name = _("Favorite color"),
		Type = 5,
		Slider = ComponentSettings_K_Slider {
			Type = 2
		},
		InfoDescription = "Color used in multiple ingame situations such as the trails left by the car, the pilot lights, the podium sparkles or the special cars"
	},
	ComponentSettings_K_Setting {
		Id = 104,
		Category = 1,
		//L16N [Settings] Display the user account ID. %1 will be replaced by the account ID. eg: "Account ID: 1234-ABCD-5678"
		Name = _("Account ID: %1"),
		Type = 7,
		//L16N [Settings] The unique identifier of the user account
		InfoTitle = _("Account ID"),
		//L16N [Settings] Copy the user account ID to the clipboard
		InfoDescription = _("Copy your account ID to the clipboard"),
		ButtonText = "|Clipboard|Copy"
	},
	ComponentSettings_K_Setting {
		Id = 105,
		Category = 1,
		//L16N [Settings] Open the user account management page in a web browser
		Name = _("Manage account"),
		Type = 7,
		//L16N [Settings] Open the user player page in their web browser
		InfoDescription = _("Open your player page in a web browser"),
		//L16N [Settings] Clicking on this button open a link in a web browser
		ButtonText = _("|Link|Open"),
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 106,
		Category = 1,
		//L16N [Settings] Open the user profile page
		Name = _("View profile"),
		Type = 7,
		//L16N [Settings] Open the user profile page
		InfoDescription = _("Open your profile page"),
		//L16N [Settings] Clicking on this button open a link in a web browser
		ButtonText = _("|Link|Open")
	},
	ComponentSettings_K_Setting {
		Id = 107,
		Category = 1,
		Name = "Activate a key",
		Type = 3,
		//L16N [Settings] Description of the activate key setting
		InfoDescription = _("Unlock game features with a key or an activation code.\nThe key will be registered for the current account."),
		IgnoreDirty = True
	},
	ComponentSettings_K_Setting {
		Id = 108,
		Category = 1,
		//L16N [Settings] Section of the settings related to the privacy
		Name = _("|Settings|Privacy"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 109,
		Category = 1,
		//L16N [Settings] Display the splashscreen at the start of the game
		Name = _("Display splashscreens on the home page"),
		Type = 4,
		//L16N [Settings] Splashscreens can only be disabled by players with standard or club access
		InfoDescription = _("Disable the splashscreens displayed on the home page. You need standard or club access to disable splashscreens."),
		Permissions = ["ads_Remove"]
	},
	ComponentSettings_K_Setting {
		Id = 110,
		Category = 1,
		//L16N [Settings] Display ads in the game
		Name = _("Display ads on the in-game signs"),
		Type = 4,
		//L16N [Settings] Ads can only be disabled by players with standard or club access
		InfoDescription = _("Directly support Ubisoft Nadeo by enabling brand and club ads in-game. You need standard or club access to disable ads."),
		Permissions = ["ads_Remove"]
	},
	ComponentSettings_K_Setting {
		Id = 111,
		Category = 1,
		//L16N [Settings] Enable ads personalized for the player
		Name = _("Enable personalized ads"),
		Type = 4,
		//L16N [Settings] Personalized ads setting description
		InfoDescription = _("I accept that my data will be shared with third parties to enable personalised adverts to be displayed in the game world, depending on my country and my interests. If this option is deactivated, you'll still see advertisements in the game, but they won't match your areas of interest as well."),
		PlatformFamily = [3],
		Platforms = [CSystemPlatform::ESystemPlatform::PS4, CSystemPlatform::ESystemPlatform::PS5]
	},
	ComponentSettings_K_Setting {
		Id = 201,
		Category = 2,
		//L16N [Settings] Section of the settings related to display (window resolution, v-sync, ...)
		Name = _("Display"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 202,
		Category = 2,
		//L16N [Settings] The device used to render the game (graphics card)
		Name = _("Display device"),
		Type = 2,
		//L16N [Settings] Description of the "Display device" setting
		InfoDescription = _("Device used to render the game"),
		NeedRestart = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 203,
		Category = 2,
		//L16N [Settings] The display mode (fullscreen, borderless window, window)
		Name = _("Display mode"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("|DisplayMode|Fullscreen"),
				_("|DisplayMode|Windowed borderless"),
				_("|DisplayMode|Windowed")
			],
			ValuesDisplayMode = [
				CDisplaySettings::EDisplayMode::FullscreenExclusive,
				CDisplaySettings::EDisplayMode::WindowedFull,
				CDisplaySettings::EDisplayMode::Windowed
			]
		},
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 204,
		Category = 2,
		//L16N [Settings] The rendering resolution in fullscreen mode
		Name = _("Fullscreen resolution"),
		Type = 2,
		//L16N [Settings] Description of the "Fullscreen resolution" setting
		InfoDescription = _("Rendering resolution in fullscreen mode"),
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 205,
		Category = 2,
		//L16N [Settings] The window width in windowed mode
		Name = _("Window width"),
		Type = 3,
		//L16N [Settings] Description of the "Window width" setting
		InfoDescription = _("Window width in windowed mode"),
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 206,
		Category = 2,
		//L16N [Settings] The window height in windowed mode
		Name = _("Window height"),
		Type = 3,
		//L16N [Settings] Description of the "Window height" setting
		InfoDescription = _("Window height in windowed mode"),
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 207,
		Category = 2,
		//L16N [Settings] Show borders around the window in windowed mode
		Name = _("Show window borders"),
		Type = 4,
		//L16N [Settings] Description of the "Show window borders" setting
		InfoDescription = _("Show borders around the window in windowed mode"),
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 208,
		Category = 2,
		//L16N [Settings] Automatically reduce the rendering resolution when the frame rate is below the set threshold
		Name = _("Dynamic resolution"),
		Type = 4,
		//L16N [Settings] Description of the "Dynamic resolution" setting
		InfoDescription = _("Automatically reduce the rendering resolution when the frame rate is below the set threshold"),
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 209,
		Category = 2,
		//L16N [Settings] Automatically reduce the rendering resolution when the frame rate is below the set threshold
		Name = _("Dynamic resolution activation threshold"),
		Type = 3,
		//L16N [Settings] Description of the "Dynamic resolution activation threshold" setting
		InfoDescription = _("Automatically reduce the rendering resolution when the frame rate is below the set threshold"),
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 211,
		Category = 2,
		//L16N [Settings] Limit the number of frames per second
		Name = _("Frame rate limit"),
		Type = 3,
		//L16N [Settings] Description of the "Frame rate limit" setting
		InfoDescription = _("Limit the number of frames per second"),
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 212,
		Category = 2,
		//L16N [Settings] Vertical synchronization
		Name = _("V-Sync"),
		Type = 2,
		//L16N [Settings] Description of the "V-Sync" setting
		InfoDescription = _("Synchronize the frame rate of the game with the refresh rate of the monitor"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|VSync|None"),
				_("|VSync|Full"),
				_("|VSync|Half"),
				_("|VSync|Third")
			],
			ValuesDisplaySync = [
				CDisplaySettings::EDisplaySync::None,
				CDisplaySettings::EDisplaySync::VBlank1,
				CDisplaySettings::EDisplaySync::VBlank2,
				CDisplaySettings::EDisplaySync::VBlank3
			]
		},
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 213,
		Category = 2,
		//L16N [Settings] Synchronization between the GPU and the CPU
		Name = _("GPU & CPU synchronisation"),
		Type = 2,
		//L16N [Settings] Description of the "GPU & CPU synchronisation" setting
		InfoDescription = _("Number of frames the GPU can cache before synchronizing with the CPU"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|GpuSync|None"),
				_("|GpuSync|3 Frames"),
				_("|GpuSync|2 Frames"),
				_("|GpuSync|1 Frame"),
				_("|GpuSync|Immediate")
			],
			ValuesGpuSync = [
				CDisplaySettings::EGpuSync::None,
				CDisplaySettings::EGpuSync::_3Frames,
				CDisplaySettings::EGpuSync::_2Frames,
				CDisplaySettings::EGpuSync::_1Frames,
				CDisplaySettings::EGpuSync::Immediate
			]
		},
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 222,
		Category = 2,
		//L16N [Settings] Section containing the advanced video quality settings
		Name = _("|Settings|Advanced"),
		Type = 1,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 217,
		Category = 2,
		//L16N [Settings] Forward antialiasing mode selection
		Name = _("Fast antialiasing"),
		Type = 2,
		//L16N [Settings] This setting only takes effect when the 'Very low' or 'Low' shader quality setting is selected
		InfoDescription = _("Works only with 'Very low' or 'Low' shader quality"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|Antialiasing|None"),
				"MSAA 2x",
				"MSAA 4x",
				"MSAA 6x",
				"MSAA 8x",
				"MSAA 16x"
			],
			ValuesForwardAA = [
				CDisplaySettings::EForwardAA::None,
				CDisplaySettings::EForwardAA::_2x,
				CDisplaySettings::EForwardAA::_4x,
				CDisplaySettings::EForwardAA::_6x,
				CDisplaySettings::EForwardAA::_8x,
				CDisplaySettings::EForwardAA::_16x
			]
		},
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 218,
		Category = 2,
		//L16N [Settings] Deferred antialiasing mode selection
		Name = _("Nice antialiasing"),
		Type = 2,
		//L16N [Settings] This setting only takes effect when the 'High' or 'Very high' shader quality setting is selected
		InfoDescription = _("Works only with 'High' or 'Very high' shader quality"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|Antialiasing|None"),
				"FXAA",
				"TAA"
			],
			ValuesDeferredAA = [
				CDisplaySettings::EDeferredAA::None,
				CDisplaySettings::EDeferredAA::FXAA,
				CDisplaySettings::EDeferredAA::UBI_TXAA
			]
		},
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 236,
		Category = 2,
		//L16N [Settings] Level of customization applied to cars in game
		Name = _("Cars customization"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("3D models + 2D skins"),
				_("2D skins only"),
				_("|CustomModels|Disabled")
			],
			ValuesCustomPlayerModels = [
				CUserV2Profile::ECustomPlayerModels::All,
				CUserV2Profile::ECustomPlayerModels::OnlyTextures,
				CUserV2Profile::ECustomPlayerModels::None
			]
		},
		PlatformFamily = [3],
		//L16N [Settings] Description of the "Cars customization" setting
		InfoDescription = _("Select the level of customization applied to cars in game")
	},
	ComponentSettings_K_Setting {
		Id = 228,
		Category = 2,
		//L16N [Settings] Texture filtering video setting
		Name = _("Texture filtering"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("|MaxFiltering|Bilinear"),
				_("|MaxFiltering|Trilinear"),
				_("|MaxFiltering|Anisotropic  2x"),
				_("|MaxFiltering|Anisotropic  4x"),
				_("|MaxFiltering|Anisotropic  8x"),
				_("|MaxFiltering|Anisotropic 16x")
			],
			ValuesTextureFiltering = [
				CDisplaySettings::ETextureFilter::Bilinear,
				CDisplaySettings::ETextureFilter::Trilinear,
				CDisplaySettings::ETextureFilter::Aniso_2x,
				CDisplaySettings::ETextureFilter::Aniso_4x,
				CDisplaySettings::ETextureFilter::Aniso_8x,
				CDisplaySettings::ETextureFilter::Aniso_16x
			]
		},
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 223,
		Category = 2,
		//L16N [Settings] Customize the video settings
		Name = _("Customize advanced video settings"),
		Type = 4,
		NeedRestart = True,
		PlatformFamily = [3],
		//L16N [Settings] Description of the "Customize advanced video settings" setting
		InfoDescription = _("Let the game select the best video settings based on your hardware or use custom settings")
	},
	ComponentSettings_K_Setting {
		Id = 224,
		Category = 2,
		//L16N [Settings] Graphic quality preset selection
		Name = _("Preset"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("|DisplayPreset|Custom"),
				_("|DisplayPreset|Very Fast"),
				_("|DisplayPreset|Fast"),
				_("|DisplayPreset|Nice"),
				_("|DisplayPreset|Very Nice")
			],
			ValuesPreset = [
				CDisplaySettings::EPreset::None,
				CDisplaySettings::EPreset::VeryFast,
				CDisplaySettings::EPreset::Fast,
				CDisplaySettings::EPreset::Nice,
				CDisplaySettings::EPreset::VeryNice
			]
		},
		NeedRestart = True,
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 225,
		Category = 2,
		//L16N [Settings] Shaders quality selection
		Name = _("Shaders quality"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("|ShaderQuality|Very low"),
				_("|ShaderQuality|Low"),
				_("|ShaderQuality|High"),
				_("|ShaderQuality|Very high")
			],
			ValuesShaderQuality = [
				CDisplaySettings::EShaderQuality::VeryFast,
				CDisplaySettings::EShaderQuality::Fast,
				CDisplaySettings::EShaderQuality::Nice,
				CDisplaySettings::EShaderQuality::VeryNice
			]
		},
		NeedRestart = True,
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 227,
		Category = 2,
		//L16N [Settings] Shadows quality selection
		Name = _("Shadows quality"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("|Shadows|None"),
				_("|Shadows|Minimum"),
				_("|Shadows|Medium"),
				_("|Shadows|High"),
				_("|Shadows|Very high")
			],
			ValuesShadows = [
				CDisplaySettings::EShadows::None,
				CDisplaySettings::EShadows::Minimum,
				CDisplaySettings::EShadows::Medium,
				CDisplaySettings::EShadows::High,
				CDisplaySettings::EShadows::VeryHigh
			]
		},
		NeedRestart = True,
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 226,
		Category = 2,
		//L16N [Settings] Textures quality selection
		Name = _("Textures quality"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("|TexturesQuality|Very low"),
				_("|TexturesQuality|Low"),
				_("|TexturesQuality|Medium"),
				_("|TexturesQuality|High")
			],
			ValuesInteger = [0, 1, 2, 3]
		},
		NeedRestart = True,
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 229,
		Category = 2,
		//L16N [Settings] Reflections on vehicles video setting
		Name = _("Reflections on vehicles"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("|VehicleReflect|Low"),
				_("|VehicleReflect|High (in replays)"),
				_("|VehicleReflect|High")
			],
			ValuesVehicleReflect = [
				CDisplaySettings::EVehicleReflect::Low,
				CDisplaySettings::EVehicleReflect::HighInReplay,
				CDisplaySettings::EVehicleReflect::High
			]
		},
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 230,
		Category = 2,
		//L16N [Settings] Reflections on water surface video setting
		Name = _("Reflections on water surface"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("|WaterReflect|Very low"),
				_("|WaterReflect|Low"),
				_("|WaterReflect|High"),
				_("|WaterReflect|Very high")
			],
			ValuesWaterReflect = [
				CDisplaySettings::EWaterReflect::VeryFast,
				CDisplaySettings::EWaterReflect::Fast,
				CDisplaySettings::EWaterReflect::Nice,
				CDisplaySettings::EWaterReflect::VeryNice
			]
		},
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 231,
		Category = 2,
		//L16N [Settings] Reflections video setting
		Name = _("Other reflections"),
		Type = 4,
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 232,
		Category = 2,
		//L16N [Settings] Bloom and lens flare video setting
		Name = _("Bloom and lens flare"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("|FxBloomHdr|None"),
				_("|FxBloomHdr|Medium"),
				_("|FxBloomHdr|High")
			],
			ValuesFxBloomHdr = [
				CDisplaySettings::EFxBloomHdr::None,
				CDisplaySettings::EFxBloomHdr::Medium,
				CDisplaySettings::EFxBloomHdr::High
			]
		},
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 233,
		Category = 2,
		//L16N [Settings] Motion blur video setting
		Name = _("Motion blur"),
		Type = 4,
		//L16N [Settings] This setting only takes effect when the 'High' or 'Very high' shader quality setting is selected
		InfoDescription = _("Works only with 'High' or 'Very high' shader quality"),
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 234,
		Category = 2,
		//L16N [Settings] Motion blur intensity video setting
		Name = _("Motion blur intensity"),
		Type = 5,
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <0., 1.>,
			DisplayTextField = True
		},
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 235,
		Category = 2,
		//L16N [Settings] Setting to enable or disable the blur during the slow motion effect
		Name = _("Slow motion blur"),
		Type = 4,
		HasDisplaySettingsPreset = True,
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 237,
		Category = 2,
		//L16N [Settings] Select between performance (higher frame rates) or quality (higher grahic quality) mode
		Name = _("Performance or quality mode"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				_("Quality"),
				_("Performance"),
				//L16N [Settings] Same as performance but with 120 frames per second
				_("Performance 120FPS")
			],
			ValuesConsoleResolution = [
				CDisplaySettings::EConsoleResolution::Quality,
				CDisplaySettings::EConsoleResolution::Performance,
				CDisplaySettings::EConsoleResolution::UltraPerformance
			]
		},
		PlatformFamily = [1, 2],
		//L16N [Settings] Description of the "Performance or quality mode" setting
		InfoDescription = _("Prioritize performance or image quality. Select performance for higher frame rates or quality for higher graphic quality.")
	},
	ComponentSettings_K_Setting {
		Id = 238,
		Category = 2,
		//L16N [Settings] Resizes the display area to fit the screen while maintaining the aspect ratio
		Name = _("Display area calibration"),
		Type = 5,
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <0.25, 1.>
		},
		//L16N [Settings] Description of the "Display area calibration" setting
		InfoDescription = _("Resizes the display area to fit the screen while maintaining the aspect ratio"),
		Platforms = [CSystemPlatform::ESystemPlatform::XBoxOne, CSystemPlatform::ESystemPlatform::XBoxSeries]
	},
	ComponentSettings_K_Setting {
		Id = 301,
		Category = 3,
		//L16N [Settings] Section related to the general sounds settings
		Name = _("General"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 302,
		Category = 3,
		//L16N [Settings] Enable sounds in the game
		Name = _("Enable audio"),
		Type = 4,
		//L16N [Settings] Description of the "Enable audio" setting
		InfoDescription = _("Allow the game to produce sound")
	},
	ComponentSettings_K_Setting {
		Id = 303,
		Category = 3,
		//L16N [Settings] The device used to output sound
		Name = _("Audio device"),
		Type = 2,
		//L16N [Settings] Description of the "Audio device" setting
		InfoDescription = _("Device used to output sound"),
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 304,
		Category = 3,
		//L16N [Settings] The volume of the music in the game
		Name = _("Music volume"),
		Type = 5,
		//L16N [Settings] Description of the "Music volume" setting
		InfoDescription = _("Volume of the music"),
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <-40., 0.>
		}
	},
	ComponentSettings_K_Setting {
		Id = 305,
		Category = 3,
		//L16N [Settings] The master sound volume of the game
		Name = _("Master sound volume"),
		Type = 5,
		//L16N [Settings] Description of the "Master sound volume" setting
		InfoDescription = _("Master sound volume of the game"),
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <-40., 0.>
		}
	},
	ComponentSettings_K_Setting {
		Id = 306,
		Category = 3,
		//L16N [Settings] The volume of the sound effects in the game
		Name = _("Effects volume"),
		Type = 5,
		//L16N [Settings] Description of the "Effects volume" setting
		InfoDescription = _("Volume of the sound effects"),
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <-40., 0.>
		}
	},
	ComponentSettings_K_Setting {
		Id = 307,
		Category = 3,
		//L16N [Settings] The volume of the sounds of the menus or in-game UI (User Interface)
		Name = _("UI sounds volume"),
		Type = 5,
		//L16N [Settings] Description of the "UI sounds volume" setting
		InfoDescription = _("Volume of the sound of the menu navigation and in-game UI"),
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <-40., 0.>
		}
	},
	ComponentSettings_K_Setting {
		Id = 309,
		Category = 3,
		//L16N [Settings] Mute the game sounds and music when the window is not focused
		Name = _("Mute the game when not focused"),
		Type = 4,
		//L16N [Settings] Description of the "Mute the game when not focused" setting
		InfoDescription = _("Mute the game sounds and music when the window is not focused"),
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 310,
		Category = 3,
		//L16N [Settings] Section related to the voice chat and text to speech settings
		Name = _("Voice chat & Text To Speech"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 311,
		Category = 3,
		//L16N [Settings] Enable voice chat with other players
		Name = _("|Settings|Voice chat"),
		Type = 4,
		//L16N [Settings] Description of the "Voice chat" setting
		InfoDescription = _("Enable voice chat with other players"),
		Permissions = ["client_InGameChat"]
	},
	ComponentSettings_K_Setting {
		Id = 308,
		Category = 3,
		//L16N [Settings] The volume of the speaker in the voice chat and text to speech
		Name = _("Voice chat and text to speech volume"),
		Type = 5,
		//L16N [Settings] Description of the "Voice chat and text to speech volume" setting
		InfoDescription = _("Volume of the text to speech and voice chat players voices"),
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <-40., 0.>
		},
		Permissions = ["client_InGameChat"]
	},
	ComponentSettings_K_Setting {
		Id = 312,
		Category = 3,
		//L16N [Settings] The device used to speak in the voice chat
		Name = _("Voice chat microphone"),
		Type = 2,
		//L16N [Settings] Description of the "Voice chat microphone" setting
		InfoDescription = _("Device used to speak in the voice chat"),
		Permissions = ["client_InGameChat"],
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 313,
		Category = 3,
		//L16N [Settings] The device used to play sound from the voice chat
		Name = _("Voice chat speaker"),
		Type = 2,
		//L16N [Settings] Description of the "Voice chat speaker" setting
		InfoDescription = _("Device used to play sound from the voice chat"),
		Permissions = ["client_InGameChat"],
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 314,
		Category = 3,
		//L16N [Settings] Activation mode of the voice chat microphone (Automatic sensitivity, Manual sensitivity or Push-To-Talk)
		Name = _("Voice chat microphone activation mode"),
		Type = 2,
		List = ComponentSettings_K_List {
			Labels = [
				//L16N [Settings] Automatic sensitivity : sensitivity of the microphone will be computed automatically
				_("|Voice chat microphone activation mode|Automatic sensitivity"),
				//L16N [Settings] Manual sensitivity : player can set the sensitivity of the microphone
				_("|Voice chat microphone activation mode|Manual sensitivity")
			],
			ValuesVoiceDetectionMode = [
				NSystemConfig::EVoiceDetectionMode::AutoDetect,
				NSystemConfig::EVoiceDetectionMode::Manual
			]
		},
		//L16N [Settings] Description of the "Voice chat microphone activation mode" setting
		InfoDescription = _("Set the voice detection mode for the voice chat microphone"),
		Permissions = ["client_InGameChat"]
	},
	ComponentSettings_K_Setting {
		Id = 315,
		Category = 3,
		//L16N [Settings] The sensitivity of the microphone used in the voice chat
		Name = _("Voice chat microphone sensitivity"),
		Type = 5,
		//L16N [Settings] Description of the "Voice chat microphone sensitivity" setting
		InfoDescription = _("Sensitivity of the microphone used in voice chat"),
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <0., 1.>
		},
		Permissions = ["client_InGameChat"],
		NeedManualVoiceChatVoiceDetection = True
	},
	ComponentSettings_K_Setting {
		Id = 316,
		Category = 3,
		//L16N [Settings] Activate voice loopback to check if the microphone is operational
		Name = _("Voice chat loopback"),
		Type = 4,
		//L16N [Settings] Description of the "Voice chat loopback" setting
		InfoDescription = _("Activate voice loopback to check if the microphone is operational"),
		Permissions = ["client_InGameChat"]
	},
	ComponentSettings_K_Setting {
		Id = 317,
		Category = 3,
		//L16N [Settings] Enable the text transcription of the voice chat
		Name = _("Speech to text"),
		Type = 4,
		//L16N [Settings] Description of the "Speech to text" setting
		InfoDescription = _("Enable the text transcription of the voice chat"),
		Permissions = ["client_InGameChat"]
	},
	ComponentSettings_K_Setting {
		Id = 318,
		Category = 3,
		//L16N [Settings] Enable the narration of the navigation in menus and text messages (English only)
		Name = _("Text to speech"),
		Type = 4,
		//L16N [Settings] Description of the "Text to speech" setting
		InfoDescription = _("Enable the narration of the navigation in menus and text messages (English only)")
	},
	ComponentSettings_K_Setting {
		Id = 319,
		Category = 3,
		//L16N [Settings] Enable the text to speech for text messages in the text chat
		Name = _("Convert text messages in spoken messages"),
		Type = 4,
		//L16N [Settings] Description of the "Send text messages as voice messages" setting
		InfoDescription = _("Messages written in the text chat will be sent as voice messages in the voice chat channel (English only)")
	},
	ComponentSettings_K_Setting {
		Id = 401,
		Category = 4,
		//L16N [Settings] Section related to the latency test settings
		Name = _("|Settings|Latency"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 402,
		Category = 4,
		//L16N [Settings] Calculate the input lag by pressing the button when it appears
		Name = _("Latency test"),
		Type = 7,
		//L16N [Settings] Description of the "Latency test" setting. %1 will be replaced by the average input latency of players in milliseconds. e.g. "Average players latency is 15ms"
		InfoDescription = _("Calculate the input lag by pressing the button when it appears\nYou can reduce your latency by setting your TV to « Gaming » mode\nAverage players latency is $<$6FA%1$>ms"),
		//L16N [Settings] Clicking on this button starts the latency test
		ButtonText = _("|Latency test|Start test")
	},
	ComponentSettings_K_Setting {
		Id = 403,
		Category = 4,
		//L16N [Settings] Section related to the general device settings
		Name = _("Device settings"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 404,
		Category = 4,
		//L16N [Settings] Select the vehicle to setup
		Name = _("Vehicle to configure"),
		Type = 2,
		//L16N [Settings] Description of the "Vehicle" setting
		InfoDescription = _("Select the vehicle for which you want to configure the device settings")
	},
	ComponentSettings_K_Setting {
		Id = 405,
		Category = 4,
		Name = "Analog sensitivity",
		Type = 5,
		InfoDescription = "Sensitivity of the analog sticks",
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <0.1, 10.>,
			DisplayTextField = True
		}
	},
	ComponentSettings_K_Setting {
		Id = 406,
		Category = 4,
		Name = "Analog dead zone",
		Type = 5,
		InfoDescription = "Size of the analog sticks dead zone",
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <0.01, 0.9>,
			DisplayTextField = True
		}
	},
	ComponentSettings_K_Setting {
		Id = 407,
		Category = 4,
		//L16N [Settings] Intensity of the controller vibrations when your car hits a wall for example. Do not use the term "rumble".
		Name = _("Vibration intensity"),
		Type = 5,
		//L16N [Settings] Description of the "Vibration intensity" setting
		InfoDescription = _("Intensity of the controller vibrations when your car hits a wall for example"),
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <0., 2.>,
			DisplayTextField = True
		}
	},
	ComponentSettings_K_Setting {
		Id = 408,
		Category = 4,
		//L16N [Settings] Enable the adaptive triggers feature of the PS5 controller. PLEASE USE THE OFFICIAL SONY TRANSLATION ! English => "adaptive triggers" | Japanese => "アダプティブトリガー" | Chinese (Simplified) => "自适应扳机" | Chinese (Traditional) => "自適應扳機" | Czech => "adaptivní spouště" | Dutch => "adaptieve triggers" | French => "gâchettes adaptatives" | German => "adaptive Trigger" | Italian => "grilletti adattivi" | Korean => "적응형 트리거" | Polish => "adaptacyjne efekty „Trigger”" | Portuguese (BR) => "gatilhos adaptáveis" | Russian => "адаптивные триггеры" | Spanish => "gatillos adaptativos" | Turkish => "uyarlanabilir tetikler"
		Name = _("Adaptive triggers"),
		Type = 4,
		Platforms = [CSystemPlatform::ESystemPlatform::PS5]
	},
	ComponentSettings_K_Setting {
		Id = 409,
		Category = 4,
		//L16N [Settings] Invert the wheels steering control.
		Name = _("Invert steering axis"),
		Type = 4,
		//L16N [Settings] Description of the "Invert steering axis" setting
		InfoDescription = _("Enables a mode where steering is inverted")
	},
	ComponentSettings_K_Setting {
		Id = 410,
		Category = 4,
		//L16N [Settings] Enable a mode where using the accelerate input toggles acceleration on or off.
		Name = _("Accelerate: use toggle mode"),
		Type = 4,
		//L16N [Settings] Description of the "Accelerate: use toggle mode" setting
		InfoDescription = _("Enables a mode where the accelerating binding toggles the acceleration on or off")
	},
	ComponentSettings_K_Setting {
		Id = 411,
		Category = 4,
		//L16N [Settings] Enable a mode where using the brake input toggles acceleration on or off.
		Name = _("Brake: use toggle mode"),
		Type = 4,
		//L16N [Settings] Description of the "Brake: use toggle mode" setting
		InfoDescription = _("Enables a mode where the braking binding toggles the brakes on or off")
	},
	ComponentSettings_K_Setting {
		Id = 412,
		Category = 4,
		//L16N [Settings] Center spring intensity for wheels
		Name = _("Center spring intensity"),
		Type = 5,
		//L16N [Settings] Description of the "Center spring intensity" setting
		InfoDescription = _("Center spring intensity for wheels"),
		Slider = ComponentSettings_K_Slider {
			Type = 0,
			RangeReal = <0., 1.>,
			DisplayTextField = True
		},
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 413,
		Category = 4,
		//L16N [Settings] Devices used to control the game
		Name = _("|ControllerSettings|Devices"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 414,
		Category = 4,
		//L16N [Settings] The device the user is currently configuring
		Name = _("|ControllerSettings|Device"),
		Type = 2,
		//L16N [Settings] Description of the "Device" setting
		InfoDescription = _("Input device to configure")
	},
	ComponentSettings_K_Setting {
		Id = 415,
		Category = 4,
		//L16N [Settings] Unbind all buttons of the device
		Name = _("Unbind all buttons"),
		Type = 7,
		//L16N [Settings] Unbind a controller button
		ButtonText = _("|ControllerButton|Unbind")
	},
	ComponentSettings_K_Setting {
		Id = 416,
		Category = 4,
		//L16N [Settings] Unbind one button of the device
		Name = _("Unbind one button"),
		Type = 7,
		//L16N [Settings] Unbind a controller button
		ButtonText = _("|ControllerButton|Unbind")
	},
	ComponentSettings_K_Setting {
		Id = 417,
		Category = 4,
		//L16N [Settings] Restore the default bindings of the controller
		Name = _("Restore default bindings"),
		Type = 7,
		//L16N [Settings] Restore the default bindings of the controller
		ButtonText = _("|ControllerBindings|Restore")
	},
	ComponentSettings_K_Setting {
		Id = 418,
		Category = 4,
		//L16N [Settings] The controller bindings
		Name = _("|ControllerBindings|Bindings"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 501,
		Category = 5,
		//L16N [Settings] Section related to the HUD markers (the text displayed above other players while racing)
		Name = _("HUD labels"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 502,
		Category = 5,
		//L16N [Settings] Contents of the label displayed above the other players' cars during the race
		Name = _("Players' labels contents"),
		Type = 2,
		//L16N [Settings] Description of the "Players' labels contents" setting
		InfoDescription = _("Contents of the label displayed above the other players' cars during the race"),
		List = ComponentSettings_K_List {
			Labels = [
				_("Name"),
				_("Avatar"),
				_("Avatar and Name")
			],
			ValuesPlayerInfoDisplayType = [
				CManiaPlanet::EPlayerInfoDisplayType::Name,
				CManiaPlanet::EPlayerInfoDisplayType::Avatar,
				CManiaPlanet::EPlayerInfoDisplayType::AvatarAndName
			]
		}
	},
	ComponentSettings_K_Setting {
		Id = 503,
		Category = 5,
		//L16N [Settings] Size of the label displayed above the other players' cars during the race
		Name = _("Players' labels size"),
		Type = 5,
		Slider = ComponentSettings_K_Slider {
			Type = 1,
			RangeInteger = <1, 5>,
			Steps = 5
		},
		//L16N [Settings] Description of the "Players' labels size" setting
		InfoDescription = _("Size of the label displayed above the other players' cars during the race")
	},
	ComponentSettings_K_Setting {
		Id = 504,
		Category = 5,
		//L16N [Settings] Section grouping camera settings
		Name = _("|SettingsSection|Camera"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 505,
		Category = 5,
		//L16N [Settings] Activate the alternative camera 1 viewpoint when pressing the camera 1 button once instead of twice
		Name = _("Prioritize alternative camera 1"),
		Type = 4,
		//L16N [Settings] Description of the "Prioritize alternative camera 1" setting
		InfoDescription = _("Activate the alternative camera 1 viewpoint when pressing the camera 1 button once instead of twice")
	},
	ComponentSettings_K_Setting {
		Id = 506,
		Category = 5,
		//L16N [Settings] Activate the alternative camera 2 viewpoint when pressing the camera 2 button once instead of twice
		Name = _("Prioritize alternative camera 2"),
		Type = 4,
		//L16N [Settings] Description of the "Prioritize alternative camera 2" setting
		InfoDescription = _("Activate the alternative camera 2 viewpoint when pressing the camera 2 button once instead of twice")
	},
	ComponentSettings_K_Setting {
		Id = 507,
		Category = 5,
		//L16N [Settings] Activate the alternative camera 3 viewpoint when pressing the camera 3 button once instead of twice
		Name = _("Prioritize alternative camera 3"),
		Type = 4,
		//L16N [Settings] Description of the "Prioritize alternative camera 3" setting
		InfoDescription = _("Activate the alternative camera 3 viewpoint when pressing the camera 3 button once instead of twice")
	},
	ComponentSettings_K_Setting {
		Id = 508,
		Category = 5,
		//L16N [Settings] Select the visibility of the car when playing with the cockpit camera
		Name = _("Visibility of the car in cockpit view"),
		Type = 2,
		//L16N [Settings] Description of the "Visibility of the car in cockpit view" setting
		InfoDescription = _("Visibility of your car when playing with the cockpit camera"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|PlayerVisibility|Opaque"),
				_("|PlayerVisibility|Transparent"),
				_("|PlayerVisibility|Hidden")
			],
			ValuesPlayerVisibility = [
				CUserV2Profile::EPlayerVisibility::Opaque,
				CUserV2Profile::EPlayerVisibility::Ghost,
				CUserV2Profile::EPlayerVisibility::Hidden
			]
		}
	},
	ComponentSettings_K_Setting {
		Id = 509,
		Category = 5,
		//L16N [Settings] Section grouping text chat HUD settings
		Name = _("Text chat"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 510,
		Category = 5,
		//L16N [Settings] Allow the user to hide the in-game chat
		Name = _("|Chat|Allow hiding in-game chat"),
		Type = 4,
		//L16N [Settings] Description of the "Allow hiding in-game chat" setting
		InfoDescription = _("Instead of toggling only between the small and full chat display, add a third state where the chat is hidden")
	},
	ComponentSettings_K_Setting {
		Id = 511,
		Category = 5,
		//L16N [Settings] Allow the user to display a background behind the text chat
		Name = _("Display text chat background"),
		Type = 2,
		//L16N [Settings] Description of the "Display text chat background" setting
		InfoDescription = _("Display a black background behind the text chat"),
		List = ComponentSettings_K_List {
			Labels = [
				// Using already translated words
				_("|PlayerVisibility|Hidden"),
				_("|PlayerVisibility|Transparent"),
				_("|PlayerVisibility|Opaque")
			],
			ValuesChatBackground = [
				CUserV2Profile::EIngameChatBackground::Hidden,
				CUserV2Profile::EIngameChatBackground::Transparent,
				CUserV2Profile::EIngameChatBackground::Opaque
			]
		}
	},
	ComponentSettings_K_Setting {
		Id = 512,
		Category = 5,
		//L16N [Settings] Allow the user to change the size of the text in the chat
		Name = _("Text chat size"),
		Type = 2,
		//L16N [Settings] Description of the "Text chat size" setting
		InfoDescription = _("Size of the text in the chat"),
		List = ComponentSettings_K_List {
			Labels = [
				//L16N [Settings] Small text chat size
				_("|TextChat|Small"),
				//L16N [Settings] Medium text chat size
				_("|TextChat|Medium"),
				//L16N [Settings] Big text chat size
				_("|TextChat|Big")
			],
			ValuesChatTextSize = [
				CUserV2Profile::EIngameChatTextSize::Small,
				CUserV2Profile::EIngameChatTextSize::Medium,
				CUserV2Profile::EIngameChatTextSize::Big
			]
		}
	},
	ComponentSettings_K_Setting {
		Id = 513,
		Category = 5,
		//L16N [Settings] Section grouping miscellaneous HUD settings
		Name = _("Miscellaneous"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 514,
		Category = 5,
		//L16N [Settings] Select how the other players' car will be displayed during the race
		Name = _("Default opponents visibility"),
		Type = 2,
		//L16N [Settings] Description of the "Default opponents visibility" setting
		InfoDescription = _("Select how the other players' car will be displayed during the race"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|PlayerVisibility|Opaque"),
				_("|PlayerVisibility|Transparent"),
				_("|PlayerVisibility|Hidden")
			],
			ValuesPlayerVisibility = [
				CUserV2Profile::EPlayerVisibility::Opaque,
				CUserV2Profile::EPlayerVisibility::Ghost,
				CUserV2Profile::EPlayerVisibility::Hidden
			]
		}
	},
	ComponentSettings_K_Setting {
		Id = 515,
		Category = 5,
		//L16N [Settings] Select under which condition the spectators will be displayed on the side of the road during competitions
		Name = _("Visibility of roadside spectators"),
		Type = 2,
		//L16N [Settings] Description of the "Visibility of roadside spectators" setting
		InfoDescription = _("Select under which condition the spectators will be displayed on the side of the road during competitions"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|SpectatorsVisibility|When spectating"),
				_("|SpectatorsVisibility|Always"),
				_("|SpectatorsVisibility|Never")
			],
			ValuesRoadsideSpectatorVisibility = [
				CUserV2Profile::ERoadsideSpectatorVisibility::SpectatorOnly,
				CUserV2Profile::ERoadsideSpectatorVisibility::Always,
				CUserV2Profile::ERoadsideSpectatorVisibility::Never
			]
		}
	},
	ComponentSettings_K_Setting {
		Id = 517,
		Category = 5,
		//L16N [Settings] Display the current track records window on the side of the screen
		Name = _("Current track records visibility"),
		Type = 2,
		//L16N [Settings] Description of the "Current track records visibility" setting
		InfoDescription = _("Display the current track records on the side of the screen. The 'Progressive' behaviour will display medal records and progressively enable other records (Club, VIPs, World) depending on the medal unlocked on the current track."),
		List = ComponentSettings_K_List {
			Labels = [
				_("|TrackRecordsVisibility|Hide"),
				_("|TrackRecordsVisibility|Progressive"),
				_("|TrackRecordsVisibility|Always")
			],
			ValuesDisplayRecords = [
				CUserV2Profile::EDisplayRecords::Hide,
				CUserV2Profile::EDisplayRecords::Progressive,
				CUserV2Profile::EDisplayRecords::Always
			]
		}
	},
	ComponentSettings_K_Setting {
		Id = 516,
		Category = 5,
		//L16N [Settings] Display an alert when you drive on a special block. eg: turbo, engine off, no steering, ...
		Name = _("Display special blocks alerts"),
		Type = 4,
		//L16N [Settings] Description of the "Display special blocks alerts" setting
		InfoDescription = _("Display an alert when you drive on a special block. eg: turbo, engine off, no steering, ...")
	},
	ComponentSettings_K_Setting {
		Id = 518,
		Category = 5,
		//L16N [Settings] Display the number of checkpoints crossed on the current lap and the total number of checkpoints on the track
		Name = _("Display checkpoint counter"),
		Type = 4,
		//L16N [Settings] Description of the "Display checkpoint counter" setting
		InfoDescription = _("Display the number of checkpoints crossed on the current lap and the total number of checkpoints in a lap of the track")
	},
	ComponentSettings_K_Setting {
		Id = 519,
		Category = 5,
		//L16N [Settings] Allow the user to show frame rate and other performance information on HUD
		Name = _("Display performance information"),
		Type = 2,
		//L16N [Settings] Description of the "Display performance information" setting
		InfoDescription = _("Display the performance and frame rate of the game in real time"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|ShowPerformance|None"),
				//L16N [Settings] Display the FPS and network info. It's only displayed ingame and not in the menus
				_("|ShowPerformance|Minimal (in-game only)"),
				//L16N [Settings] Display the FPS info in one line
				_("|ShowPerformance|Simple"),
				//L16N [Settings] Display the FPS info with more details
				_("|ShowPerformance|Detailed"),
				//L16N [Settings] Display the FPS info with all the details
				_("|ShowPerformance|Full")
			],
			ValuesShowPerformance = [
				CDisplaySettings::EShowPerformance::None,
				CDisplaySettings::EShowPerformance::Minimal,
				CDisplaySettings::EShowPerformance::Fps,
				CDisplaySettings::EShowPerformance::Fps_Bars,
				CDisplaySettings::EShowPerformance::Fps_Bars_Legends
			]
		}
	},
	ComponentSettings_K_Setting {
		Id = 601,
		Category = 6,
		//L16N [Settings] Section grouping language settings
		Name = _("Language"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 602,
		Category = 6,
		//L16N [Settings] Select the language of the texts in the game
		Name = _("Language"),
		Type = 2,
		//L16N [Settings] Description of the "Language" setting
		InfoDescription = _("Language of the texts in the game")
	},
	ComponentSettings_K_Setting {
		Id = 610,
		Category = 6,
		//L16N [Settings] Section grouping the network settings
		Name = _("Network"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 615,
		Category = 6,
		//L16N [Settings] Allow to play with players from other networks
		Name = _("Cross platform play"),
		Type = 4,
		InfoDescription = "Allow to play with players from other networks",
		Privileges = [CPrivilegeMgr::EPrivilege::CrossPlay]
	},
	ComponentSettings_K_Setting {
		Id = 611,
		Category = 6,
		//L16N [Settings] Display the Trackmania online services status and open the status page in a web browser
		Name = _("Online services status"),
		Type = 7,
		InfoDescription = "Open the Trackmania online services status page in a web browser",
		//L16N [Settings] Clicking on this button open a link in a web browser
		ButtonText = _("|Link|Open")
	},
	ComponentSettings_K_Setting {
		Id = 612,
		Category = 6,
		//L16N [Settings] The speed of the user network
		Name = _("Network speed"),
		Type = 2,
		//L16N [Settings] Description of the "Network speed" setting
		InfoDescription = _("Select the speed of your network"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|NetworkSpeed|Custom"),
				_("|NetworkSpeed|Very Low - 100Kbps"),
				_("|NetworkSpeed|Low - 1Mbps"),
				_("|NetworkSpeed|Medium - 10Mbps"),
				_("|NetworkSpeed|High - 100Mbps")
			],
			ValuesNetworkSpeed = [
				CManiaPlanet::ENetworkSpeed::Custom,
				CManiaPlanet::ENetworkSpeed::_100Kbps,
				CManiaPlanet::ENetworkSpeed::_1Mbps,
				CManiaPlanet::ENetworkSpeed::_10Mbps,
				CManiaPlanet::ENetworkSpeed::_100Mbps
			]
		},
		PlatformFamily = [3, 1]
	},
	ComponentSettings_K_Setting {
		Id = 613,
		Category = 6,
		//L16N [Settings] Maximum speed at which the game data can be downloaded over the network
		Name = _("Maximum download speed"),
		Type = 3,
		//L16N [Settings] Description of the "Maximum download speed" setting
		InfoDescription = _("Maximum speed at which the game data can be downloaded over the network (bytes/s)"),
		PlatformFamily = [3, 1]
	},
	ComponentSettings_K_Setting {
		Id = 614,
		Category = 6,
		//L16N [Settings] Maximum speed at which the game data can be sent over the network
		Name = _("Maximum upload speed"),
		Type = 3,
		//L16N [Settings] Description of the "Maximum upload speed" setting
		InfoDescription = _("Maximum speed at which the game data can be sent over the network (bytes/s)"),
		PlatformFamily = [3, 1]
	},
	ComponentSettings_K_Setting {
		Id = 616,
		Category = 6,
		//L16N [Settings] Section grouping the downloads settings
		Name = _("Downloads"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 617,
		Category = 6,
		//L16N [Settings] Allow the download of custom car liveries and models
		Name = _("Custom car skins"),
		Type = 4,
		//L16N [Settings] Description of the "Custom car skins" setting (car liveries and models)
		InfoDescription = _("Allow the download of custom car skins")
	},
	ComponentSettings_K_Setting {
		Id = 618,
		Category = 6,
		//L16N [Settings] Allow the download of custom track textures
		Name = _("Custom track textures"),
		Type = 4,
		//L16N [Settings] Description of the "Custom track textures" setting
		InfoDescription = _("Allow the download of custom track textures")
	},
	ComponentSettings_K_Setting {
		Id = 619,
		Category = 6,
		//L16N [Settings] Allow the download of custom signs
		Name = _("Custom signs"),
		Type = 4,
		//L16N [Settings] Description of the "Custom signs" setting
		InfoDescription = _("Allow the download of custom signs")
	},
	ComponentSettings_K_Setting {
		Id = 620,
		Category = 6,
		//L16N [Settings] Section grouping the track editor quick start settings
		Name = _("Track editor quick start"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 621,
		Category = 6,
		//L16N [Settings] Skip the track editor configuration and use the quick start settings instead
		Name = _("Enable track editor quick start"),
		Type = 4,
		//L16N [Settings] Description of the "Enable track editor quick start" setting
		InfoDescription = _("Skip the track editor configuration and use the quick start settings instead. Available only with Standard and Club access."),
		Permissions = ["client_OpenAdvancedMapEditor"]
	},
	ComponentSettings_K_Setting {
		Id = 622,
		Category = 6,
		//L16N [Settings] Start the track editor with the selected type of track
		Name = _("Track type"),
		Type = 2,
		//L16N [Settings] Description of the "Track type" setting
		InfoDescription = _("Start the track editor with the selected type of track"),
		List = ComponentSettings_K_List {
			Labels = [
				_("Select"),
				"|MapType|Race",
				"|MapType|Royal",
				"|MapType|Stunt",
				"|MapType|Platform"
			],
			ValuesInteger = [
				0,
				1,
				2,
				3,
				4
			]
		},
		Permissions = ["client_OpenAdvancedMapEditor"],
		PlatformFamily = [3],
		NeedEditorQuickStart = True
	},
	ComponentSettings_K_Setting {
		Id = 623,
		Category = 6,
		//L16N [Settings] Select the type of control device to use in the track editor: keyboard and mouse or gamepad
		Name = _("Control device"),
		Type = 2,
		//L16N [Settings] Description of the "Control device" setting
		InfoDescription = _("Start the keyboard and mouse or gamepad track editor"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|MapEditorDevice|Mouse and keyboard"),
				_("|MapEditorDevice|Gamepad")
			],
			ValuesBoolean = [
				False,
				True
			]
		},
		Permissions = ["client_OpenAdvancedMapEditor"],
		PlatformFamily = [3],
		NeedEditorQuickStart = True
	},
	ComponentSettings_K_Setting {
		Id = 624,
		Category = 6,
		//L16N [Settings] Start the track editor with the selected difficulty
		Name = _("Difficulty"),
		Type = 2,
		//L16N [Settings] Description of the "Difficulty" setting
		InfoDescription = _("Start the track editor with the selected difficulty"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|MapEditorDifficulty|Simple"),
				_("|MapEditorDifficulty|Advanced"),
				_("|MapEditorDifficulty|Expert")
			],
			MapEditorDifficulty = [
				CUserV2Profile::EMapEditorDifficulty::Simple,
				CUserV2Profile::EMapEditorDifficulty::Advanced,
				CUserV2Profile::EMapEditorDifficulty::Expert
			]
		},
		Permissions = ["client_OpenAdvancedMapEditor"],
		NeedEditorQuickStart = True
	},
	ComponentSettings_K_Setting {
		Id = 625,
		Category = 6,
		//L16N [Settings] Select the mood (sunrise, day, sunset, night) of the new track
		Name = _("|TrackEditor|Mood"),
		Type = 2,
		//L16N [Settings] Description of the "Mood" setting
		InfoDescription = _("Mood (sunrise, day, sunset, night) of the new track"),
		List = ComponentSettings_K_List {
			Labels = [
				_("|MapMood|Sunrise"),
				_("|MapMood|Day"),
				_("|MapMood|Sunset"),
				_("|MapMood|Night")
			],
			ValuesMapEditorMood = [
				CUserV2Profile::EMapEditorMood::Sunrise,
				CUserV2Profile::EMapEditorMood::Day,
				CUserV2Profile::EMapEditorMood::Sunset,
				CUserV2Profile::EMapEditorMood::Night
			]
		},
		Permissions = ["client_OpenAdvancedMapEditor"],
		NeedEditorQuickStart = True
	},
	ComponentSettings_K_Setting {
		Id = 603,
		Category = 6,
		//L16N [Settings] Section grouping miscellaneous system settings
		Name = _("Miscellaneous"),
		Type = 1
	},
	ComponentSettings_K_Setting {
		Id = 604,
		Category = 6,
		//L16N [Settings] Mode to change the colors on some elements to improve visibility for colorblind players
		Name = _("Colorblind mode"),
		Type = 4,
		//L16N [Settings] Description of the "Colorblind mode" setting
		InfoDescription = _("Improve visibility and colors for colorblind users")
	},
	ComponentSettings_K_Setting {
		Id = 605,
		Category = 6,
		//L16N [Settings] Setting to skip automatically the starting screens (logo, video, epilepsy warning, etc.)
		Name = _("Skip the start-up screens"),
		Type = 4,
		//L16N [Settings] Description of the "Skip the start-up screens" setting
		InfoDescription = _("Automatically skip the screens displayed at launch (logo, epilepsy warning, etc.)")
	},
	ComponentSettings_K_Setting {
		Id = 606,
		Category = 6,
		//L16N [Settings] File format (jpg, png, ...) of the screenshots generated by the game
		Name = _("Screenshot file format"),
		Type = 2,
		//L16N [Settings] Description of the "Screenshot file format" setting
		InfoDescription = _("File format used by the game to save screenshots"),
		List = ComponentSettings_K_List {
			Labels = [
				"JPEG",
				"WebP",
				"TGA"
			],
			ValuesScreenshotExt = [
				CDisplaySettings::EScreenshotExt::JPEG,
				CDisplaySettings::EScreenshotExt::WebP,
				CDisplaySettings::EScreenshotExt::TGA
			]
		},
		PlatformFamily = [3]
	},
	ComponentSettings_K_Setting {
		Id = 607,
		Category = 6,
		//L16N [Settings] Enter a link to join a server
		Name = _("Join link"),
		Type = 3,
		//L16N [Settings] Description of the "Join link" setting
		InfoDescription = _("Enter a link to join a server"),
		PlatformFamily = [3],
		IgnoreDirty = True
	},
	ComponentSettings_K_Setting {
		Id = 608,
		Category = 6,
		//L16N [Settings] Delete all temporary files downloaded by the game
		Name = _("Clean cache"),
		Type = 7,
		//L16N [Settings] Clicking on this button will clean the cache
		ButtonText = _("|Cache|Clean"),
		//L16N [Settings] Description of the "Clean cache" setting
		InfoDescription = _("Delete all temporary files downloaded by the game")
	},
	ComponentSettings_K_Setting {
		Id = 609,
		Category = 6,
		//L16N [Settings] Display a page listing the people who worked on the game
		Name = _("View game credits"),
		Type = 7,
		//L16N [Settings] Clicking on this button will display the game credits (list of people who worked on the game)
		ButtonText = _("|GameCredits|View"),
		//L16N [Settings] Description of the "View game credits" setting (list of people who worked on the game). %1 will be replaced by a heart symbol '♥'.
		InfoDescription = _("Display the game credits. Thank you for playing! %1")
	}
]

#Const ComponentSettings_C_Class_BottomButton "component-settings-bottom-button"
#Const ComponentSettings_C_Class_FocusSettingLine "component-settings-focus-setting-line"
#Const ComponentSettings_C_Class_NoFocus "component-settings-no-focus"

#Const ComponentSettings_C_ResetTextFieldEditionDelay 2
#Const ComponentSettings_C_AnalogSettings [
	405,
	406,
	407,
	408,
	409,
	410,
	411,
	412
]
#Const ComponentSettings_C_NetworkSpeeds [
	CManiaPlanet::ENetworkSpeed::_100Kbps => <12800, 12800>,
	CManiaPlanet::ENetworkSpeed::_1Mbps => <131072, 32768>,
	CManiaPlanet::ENetworkSpeed::_10Mbps => <1310720, 327680>,
	CManiaPlanet::ENetworkSpeed::_100Mbps => <13107200, 13107200>
]
#Const ComponentSettings_C_AlertMessageDuration 3000
#Const ComponentSettings_C_DiscardSettingsOnTabChange False
#Const ComponentSettings_C_GamepadButtons ""
#Const ComponentSettings_C_OneDay_InSecs 86400
	
// */
// @Component end component-settings

#Include "Libs/Nadeo/CMGame/Utils/Grid.Script.txt" as Grid
#Include "Libs/Nadeo/CMGame/Utils/MLHelpers.Script.txt" as MLHelpers
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/TMGame/Modes/DecoImage_Client.Script.txt" as DecoImage
#Include "Libs/Nadeo/TMGame/Modes/MV_Utils.Script.txt" as MV_Utils
#Include "Libs/Nadeo/TMGame/Modes/TrackVote.Script.txt" as TrackVote
#Include "Libs/Nadeo/Trackmania/MainMenu/TitleControl.Script.txt" as TitleControl
#Include "Libs/Nadeo/Trackmania/Modes/Stunt/PlayerData.Script.txt" as PlayerData
#Include "Libs/Nadeo/Trackmania/Modes/UIModules/NetShare_Client.Script.txt" as NetShare
#Include "Libs/Nadeo/Trackmania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "ColorLib" as CL
#Include "TextLib" as TL

#Struct K_Controls {
	CMlFrame Button_Exit;
	CMlFrame Button_FavoriteMap;
	CMlFrame Button_NextMap;
	CMlFrame Button_Resume;
	CMlFrame Button_ScoresTable;
	CMlFrame Button_UbiConnect;
	CMlFrame Button_VoteDislike;
	CMlFrame Button_VoteLike;
	CMlFrame Frame_BgError;
	CMlFrame Frame_Credits;
	CMlFrame Frame_Global;
	CMlFrame Frame_LoadingSpinner;
	CMlFrame Frame_Profile;
	CMlFrame Frame_RaceMapInfos;
	CMlFrame Frame_Report;
	CMlFrame Frame_ReportPopUp;
	CMlFrame Frame_Settings;
	CMlFrame MenuButtonList_PauseMenuCampaign;
	CMlFrame PopUpMultiChoice_LeaveStuntSession;
	CMlLabel Label_Error;
}

#Struct K_State {
	K_Controls Controls;
	Boolean IsNextMapRequested;
	Boolean RecordModuleAvailable;
	Boolean ScoresTableDisplayed;
	Boolean SettingsAreDisplayed;
	Boolean CreditsAreDisplayed;
	Boolean ProfileIsDisplayed;
	Boolean ReportIsDisplayed;
	Task::K_Task Task_ShowUbisoftConnect;
}

#Const C_Component_Report "component-popupreportsystem"
#Const C_Component_Settings "component-settings"
#Const C_Component_Credits "component-credits"
#Const C_Component_Profile "component-profileplayerinfo"



// @Component start share-menu-navigation
// /*

***MainLoop***
***
ShareMenuNavigation_ShareMenuNavigation::MainLoop(This);
***
		
// */
// @Component end share-menu-navigation

// @Component start component-navigation
// /*

***MainInit***
***
ComponentNavigation_ComponentNavigation::MainInit(This);
***

***MainLoop***
***
ComponentNavigation_ComponentNavigation::MainLoop(This);
***
		
// */
// @Component end component-navigation

// @Component start component-loadingspinner
// /*

***MainInit***
***
CMGame_LoadingSpinner::MainInit(This);
***

***MainLoop***
***
CMGame_LoadingSpinner::MainLoop(This);
***

// */
// @Component end component-loadingspinner

// @Component start component-trackmania-button
// /*

***MainInit***
***
Trackmania_Button::MainInit(This);
***

***MainLoop***
***
Trackmania_Button::MainLoop(This);
***
		
// */
// @Component end component-trackmania-button

// @Component start component-cmgame-expendable-button
// /*

***MainInit***
***
CMGame_ExpendableButton::MainInit(This);
***

***MainStart***
***
CMGame_ExpendableButton::MainStart(This);
***

***MainLoop***
***
CMGame_ExpendableButton::MainLoop(This);
***
		
// */
// @Component end component-cmgame-expendable-button

// @Component start component-trackmania-expendable-button
// /*

***MainInit***
***
CMGame_ExpendableButton::Trackmania_MainInit(This);
***
		
// */
// @Component end component-trackmania-expendable-button

// @Component start menu-libs-scroll
// /*

***MainInit***
***
CMGame_Scroll::MainInit(This);
***

***MainStart***
***
CMGame_Scroll::MainStart(This);
***

***MainLoop***
***
CMGame_Scroll::MainLoop(This);
***
		
// */
// @Component end menu-libs-scroll

// @Component start component-button-icon-2
// /*

***MainInit***
***
ButtonIcon2_ButtonIcon2::MainInit(This);
***

***MainStart***
***
ButtonIcon2_ButtonIcon2::MainStart(This);
***

***MainLoop***
***
ButtonIcon2_ButtonIcon2::MainLoop(This);
***
		
// */
// @Component end component-button-icon-2

// @Component start component-buttonslist2
// /*

Void ComponentButtonsList2_Private_ApplyProperties(CMlFrame _Frame_ButtonsList) {
	declare ComponentButtonsList2_K_Data ComponentButtonsList2_Data for _Frame_ButtonsList;

	// Order in which properties are applied is important !

	if (
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Buttons) ||
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_ButtonMaxWidth) ||
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_ButtonsSpacing)
	) {
		ComponentButtonsList2_Data.Width = 0.;
		foreach (ControlKey => Frame_Button in ComponentButtonsList2_Data.Frames_Button) {
			if (ComponentButtonsList2_Data.Binds.existskey(ControlKey) && ComponentButtonsList2_Data.Actions.existskey(ControlKey)) {
				declare Text Bind = ComponentButtonsList2_Data.Binds[ControlKey];
				declare Text Action = ComponentButtonsList2_Data.Actions[ControlKey];

				declare CMlFrame ButtonIcon_Bind <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_button-icon-bind") as CMlFrame);
				declare CMlLabel Label_Action <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_label-action") as CMlLabel);

				declare Text PreviousAction = "";
				if (ComponentButtonsList2_Data.Actions.existskey(ControlKey - 1)) PreviousAction = ComponentButtonsList2_Data.Actions[ControlKey-1];
				if (ComponentButtonsList2_Data.Width > 0. && PreviousAction != "") ComponentButtonsList2_Data.Width += ComponentButtonsList2_Data.ButtonsSpacing;

				ButtonIcon2_ButtonIcon2::SetBind(This, ButtonIcon_Bind, Bind);
				Label_Action.Value = Action;
				Frame_Button.Visible = True;
				Frame_Button.RelativePosition_V3.X = ComponentButtonsList2_Data.Width;

				declare Real ActionMaxWidth = ComponentButtonsList2_ML::Max(0., ComponentButtonsList2_Data.ButtonMaxWidth - 8. - 1.);
				declare Real ActionWidth = Label_Action.ComputeWidth(Label_Action.Value, True);
				Label_Action.Size.X = ComponentButtonsList2_ML::Min(ActionMaxWidth, ActionWidth);

				ComponentButtonsList2_Data.Width += 9. + Label_Action.Size.X;
				ComponentButtonsList2_Tools::FitLabelValue(Label_Action, 3., 2., 0.25);
			} else {
				Frame_Button.Visible = False;
			}
		}
	}

	if (
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Buttons) ||
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_HAlign) ||
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_VAlign) ||
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_ButtonMaxWidth)
	) {
		ComponentButtonsList2_Tools::AlignFrame(ComponentButtonsList2_Data.Frame_Align, <ComponentButtonsList2_Data.Width, 8.>, ComponentButtonsList2_Data.HAlign, ComponentButtonsList2_Data.VAlign);
	}

	if (ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Color)) {
		foreach (ControlKey => Frame_Button in ComponentButtonsList2_Data.Frames_Button) {
			if (Frame_Button.Visible) {
				declare CMlFrame ButtonIcon_Bind <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_button-icon-bind") as CMlFrame);
				declare CMlLabel Label_Action <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_label-action") as CMlLabel);

				ButtonIcon2_ButtonIcon2::SetColor(This, ButtonIcon_Bind, ComponentButtonsList2_Data.Color);
				Label_Action.TextColor = ComponentButtonsList2_Data.Color;
			}
		}
	}

	if (ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_TextPrefix)) {
		foreach (ControlKey => Frame_Button in ComponentButtonsList2_Data.Frames_Button) {
			declare CMlLabel Label_Action <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_label-action") as CMlLabel);
			Label_Action.TextPrefix = ComponentButtonsList2_Data.TextPrefix;
			ComponentButtonsList2_Tools::FitLabelValue(Label_Action, 3., 2., 0.25);
		}
	}

	if (ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_TextFont)) {
		foreach (ControlKey => Frame_Button in ComponentButtonsList2_Data.Frames_Button) {
			declare CMlLabel Label_Action <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_label-action") as CMlLabel);
			Label_Action.TextFont = ComponentButtonsList2_Data.TextFont;
			ComponentButtonsList2_Tools::FitLabelValue(Label_Action, 3., 2., 0.25);
		}
	}

	ComponentButtonsList2_Data.DirtyProperties = [];
}

Void ComponentButtonsList2_SetButtons(CMlFrame _Frame_ButtonsList, Text[Text] _Buttons) {
	declare ComponentButtonsList2_K_Data ComponentButtonsList2_Data for _Frame_ButtonsList;

	ComponentButtonsList2_Data.Binds = [];
	ComponentButtonsList2_Data.Actions = [];
	foreach (Bind => Action in _Buttons) {
		ComponentButtonsList2_Data.Binds.add(Bind);
		ComponentButtonsList2_Data.Actions.add(Action);
	}
	if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Buttons)) {
		ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_Buttons);
	}

	ComponentButtonsList2_Private_ApplyProperties(_Frame_ButtonsList);
}

Void ComponentButtonsList2_Private_Init(CMlFrame _Frame_ButtonsList) {
	declare ComponentButtonsList2_K_Data ComponentButtonsList2_Data for _Frame_ButtonsList;
	ComponentButtonsList2_Data = ComponentButtonsList2_K_Data {
		Frame_Align = Null,
		Frames_Button = [],
		Binds = [],
		Actions = [],
		HAlign = CMlControl::AlignHorizontal::Left,
		VAlign = CMlControl::AlignVertical::Top,
		Color = <1., 1., 1.>,
		ButtonMaxWidth = 100.,
		Width = 0.,
		TextPrefix = "",
		TextFont = "",
		ButtonsSpacing = 1.,
		DirtyProperties = []
	};

	ComponentButtonsList2_Data.Frame_Align <=> (_Frame_ButtonsList.GetFirstChild("ComponentButtonsList2_frame-align") as CMlFrame);
	foreach (Control in ComponentButtonsList2_Data.Frame_Align.Controls) {
		ComponentButtonsList2_Data.Frames_Button.add((Control as CMlFrame));
	}

	if (_Frame_ButtonsList.DataAttributeExists("buttons")) {
		declare Text[Text] Buttons;
		Buttons.fromjson(_Frame_ButtonsList.DataAttributeGet("buttons"));
		foreach (Bind => Action in Buttons) {
			ComponentButtonsList2_Data.Binds.add(Bind);
			ComponentButtonsList2_Data.Actions.add(Action);
		}
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Buttons)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_Buttons);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("halign")) {
		ComponentButtonsList2_Data.HAlign = ComponentButtonsList2_Tools::TextToHAlign(_Frame_ButtonsList.DataAttributeGet("halign"));
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_HAlign)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_HAlign);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("valign")) {
		ComponentButtonsList2_Data.VAlign = ComponentButtonsList2_Tools::TextToVAlign(_Frame_ButtonsList.DataAttributeGet("valign"));
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_VAlign)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_VAlign);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("color")) {
		ComponentButtonsList2_Data.Color = ComponentButtonsList2_CL::HexToRgb(_Frame_ButtonsList.DataAttributeGet("color"));
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Color)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_Color);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("buttonmaxwidth")) {
		ComponentButtonsList2_Data.ButtonMaxWidth = ComponentButtonsList2_TL::ToReal(_Frame_ButtonsList.DataAttributeGet("buttonmaxwidth"));
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_ButtonMaxWidth)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_ButtonMaxWidth);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("textprefix")) {
		ComponentButtonsList2_Data.TextPrefix = _Frame_ButtonsList.DataAttributeGet("textprefix");
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_TextPrefix)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_TextPrefix);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("textfont")) {
		ComponentButtonsList2_Data.TextFont = _Frame_ButtonsList.DataAttributeGet("textfont");
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_TextFont)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_TextFont);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("buttons-spacing")) {
		ComponentButtonsList2_Data.ButtonsSpacing = ComponentButtonsList2_TL::ToReal(_Frame_ButtonsList.DataAttributeGet("buttons-spacing"));
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_ButtonsSpacing)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_ButtonsSpacing);
		}
	}

	ComponentButtonsList2_Private_ApplyProperties(_Frame_ButtonsList);
}

***MainInit***
***
Page.GetClassChildren("ComponentButtonsList2_container", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	ComponentButtonsList2_Private_Init(Control.Parent);
}
***
		
// */
// @Component end component-buttonslist2

// @Component start component-menu-button-list
// /*

declare CMlFrame ComponentMenuButtonList_G_Frame_ButtonList;

Void ComponentMenuButtonList_SetButtons(CMlFrame _Frame_ButtonList, Text[Text] _ButtonsList) {
	if (_Frame_ButtonList != Null) {
		declare CMlFrame Frame_ButtonList <=> (_Frame_ButtonList.GetFirstChild("ComponentMenuButtonList_frame-button-list") as CMlFrame);
		if (ComponentMenuButtonList_G_Frame_ButtonList != Frame_ButtonList) {
			if (ComponentMenuButtonList_G_Frame_ButtonList != Null) ComponentButtonsList2_SetButtons(ComponentMenuButtonList_G_Frame_ButtonList, []); // reset previous Frame buttons
				ComponentMenuButtonList_G_Frame_ButtonList <=> Frame_ButtonList;
		}
		if (ComponentMenuButtonList_G_Frame_ButtonList != Null) ComponentButtonsList2_SetButtons(ComponentMenuButtonList_G_Frame_ButtonList, _ButtonsList);
	}
}

***MainInit***
***
declare CMlFrame ComponentMenuButtonList_Frame_Global;
***

***MainStart***
***
ComponentMenuButtonList_Frame_Global <=> (Page.GetFirstChild("ComponentMenuButtonList_frame-global") as CMlFrame);

ComponentMenuButtonList_G_Frame_ButtonList = Null;
***

***MainLoop***
***
if (ComponentMenuButtonList_Frame_Global.Parent.Visible && ComponentMenuButtonList_G_Frame_ButtonList != Null) {
	if (ComponentMenuButtonList_G_Frame_ButtonList.Visible == ComponentMenuButtonList_Tools::IsUsingMouse(Input)) {
		ComponentMenuButtonList_G_Frame_ButtonList.Visible = !ComponentMenuButtonList_Tools::IsUsingMouse(Input);
	}
}
***

// */
// @Component end component-menu-button-list

// @Component start component-cmgame-menusounds
// /*

***MainInit***
***
CMGame_MenuSounds::MainInit(This);
***

***MainStart***
***
CMGame_MenuSounds::MainStart(This);
***

***MainLoop***
***
CMGame_MenuSounds::MainLoop(This);
***

// */
// @Component end component-cmgame-menusounds

// @Component start component-credits
// /*

declare ComponentCredits_K_State ComponentCredits_G_State;
declare ComponentCredits_K_Event[] ComponentCredits_PendingEvents;

// Private API

// Display a credit line
Void ComponentCredits_Private_DisplayCreditLine(ComponentCredits_K_State _State, CMlFrame _Frame_Element, Integer _Key) {
	if (_State.CreditLines.existskey(_Key)) {
		declare ComponentCredits_K_CreditLine CreditLine = _State.CreditLines[_Key];
		_Frame_Element.GetFirstChild("ComponentCredits_label-location").Visible = (CreditLine.Type == ComponentCredits_C_LabelType_Location);
		_Frame_Element.GetFirstChild("ComponentCredits_label-entity").Visible = (CreditLine.Type == ComponentCredits_C_LabelType_Entity);
		_Frame_Element.GetFirstChild("ComponentCredits_label-jobtitle").Visible = (CreditLine.Type == ComponentCredits_C_LabelType_JobTitle);
		_Frame_Element.GetFirstChild("ComponentCredits_label-person").Visible = (CreditLine.Type == ComponentCredits_C_LabelType_Person);
		switch (CreditLine.Type) {
			case ComponentCredits_C_LabelType_Location: (_Frame_Element.GetFirstChild("ComponentCredits_label-location") as CMlLabel).Value = CreditLine.Name;
			case ComponentCredits_C_LabelType_Entity: (_Frame_Element.GetFirstChild("ComponentCredits_label-entity") as CMlLabel).Value = CreditLine.Name;
			case ComponentCredits_C_LabelType_JobTitle: (_Frame_Element.GetFirstChild("ComponentCredits_label-jobtitle") as CMlLabel).Value = CreditLine.Name;
			case ComponentCredits_C_LabelType_Person: (_Frame_Element.GetFirstChild("ComponentCredits_label-person") as CMlLabel).Value = CreditLine.Name;
		}
		_Frame_Element.Visible = True;
	} else {
		_Frame_Element.Visible = False;
	}
}

// Update navigation focus
Void ComponentCredits_Private_Focus(CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		ComponentNavigation_ComponentNavigation::Unfocus(This, _From);

		if (CMGame_ExpendableButton::IsButton(_From)) {
			CMGame_ExpendableButton::Unfocus(This, (_From as CMlFrame));
		}
	}

	if (_To != Null) {
		ComponentNavigation_ComponentNavigation::Focus(This, _To);

		if (CMGame_ExpendableButton::IsButton(_To)) {
			CMGame_ExpendableButton::Focus(This, (_To as CMlFrame));
		}
	}
}

Void ComponentCredits_Private_Select(CMlControl _Control) {
	if (_Control == Null) return;

	switch (_Control.ControlId) {
		case "ComponentCredits_button-back": {
			ComponentCredits_PendingEvents.add(ComponentCredits_K_Event {
				Type = ComponentCredits_C_EventType_CloseCredits
			});
		}
	}
}

// Enable or disable the navigation in the component
Void ComponentCredits_Private_UpdateNavigationLock(ComponentCredits_K_State _State) {
	ComponentNavigation_ComponentNavigation::EnableGroup(This, ComponentCredits_C_NavGroup_Global, _State.ComponentEnabled);
	ComponentNavigation_ComponentNavigation::EnableGroup(This, ComponentCredits_C_NavGroup_Main, _State.ComponentEnabled);
	CMGame_Scroll::LockNavigation(_State.Controls.Scroll_Credits, !_State.ComponentEnabled);
}

// Enable or disable the component.
ComponentCredits_K_State ComponentCredits_Private_Enable(ComponentCredits_K_State _State, Boolean _Enabled, Boolean _ForceUpdate) {
	if (!_ForceUpdate && _State.ComponentEnabled == _Enabled) return _State;

	declare ComponentCredits_K_State State = _State;

	State.ComponentEnabled = _Enabled;
	ComponentCredits_Private_UpdateNavigationLock(State);

	if (State.ComponentEnabled) {
		// Restart the credits from the top
		CMGame_Scroll::ScrollToHeader(This, State.Controls.Scroll_Credits);
		// Force a refresh of the scroll display
		CMGame_Scroll::SetElementsTotal(This, State.Controls.Scroll_Credits, State.CreditLines.count);
		// Focus the back button by default
		ComponentCredits_Private_Focus(ComponentNavigation_ComponentNavigation::GetFocusedControl(This, ComponentCredits_C_NavGroup_Main), State.Controls.Button_Back);
	}

	return State;
}
ComponentCredits_K_State ComponentCredits_Private_Enable(ComponentCredits_K_State _State, Boolean _Enabled) {
	return ComponentCredits_Private_Enable(_State, _Enabled, False);
}

// Set the credits to display in the scroll
ComponentCredits_K_State ComponentCredits_Private_SetCredits(ComponentCredits_K_State _State, ComponentCredits_K_CreditSource[] _CreditsSource) {
	declare ComponentCredits_K_State State = _State;

	State.CreditLines = [];

	declare Text[] Locations;
	declare Text[] Entities;
	declare Text[] JobTitles;
	declare Text[] Persons;
	declare Boolean FirstLocation = True;
	foreach (Credit in _CreditsSource) {
		if (!Locations.exists(Credit.Location)) {
			if (!FirstLocation) {
				// Add two blanks between locations
				State.CreditLines.add(ComponentCredits_K_CreditLine {
					Name = "",
					Type = ComponentCredits_C_LabelType_None
				});
				State.CreditLines.add(ComponentCredits_K_CreditLine {
					Name = "",
					Type = ComponentCredits_C_LabelType_None
				});
			}
			if (FirstLocation) FirstLocation = False;
			Locations.add(Credit.Location);
			State.CreditLines.add(ComponentCredits_K_CreditLine {
				Name = Credit.Location,
				Type = ComponentCredits_C_LabelType_Location
			});
			Entities = [];
		}
		if (!Entities.exists(Credit.Entity)) {
			Entities.add(Credit.Entity);
			State.CreditLines.add(ComponentCredits_K_CreditLine {
				Name = Credit.Entity,
				Type = ComponentCredits_C_LabelType_Entity
			});
			JobTitles = [];
		}
		if (!JobTitles.exists(Credit.JobTitle)) {
			JobTitles.add(Credit.JobTitle);
			State.CreditLines.add(ComponentCredits_K_CreditLine {
				Name = Credit.JobTitle,
				Type = ComponentCredits_C_LabelType_JobTitle
			});
			Persons = [];
		}
		if (!Persons.exists(Credit.Person)) {
			Persons.add(Credit.Person);
			State.CreditLines.add(ComponentCredits_K_CreditLine {
				Name = Credit.Person,
				Type = ComponentCredits_C_LabelType_Person
			});
		}
	}

	CMGame_Scroll::SetElementsTotal(This, State.Controls.Scroll_Credits, State.CreditLines.count);

	return State;
}

// Update the licenses text
Void ComponentCredits_Private_UpdateLicenses(ComponentCredits_K_State _State, Text _Licenses) {
	_State.Controls.Label_Licenses.Value = _Licenses;
	if (_State.Controls.Label_Licenses.Value == "") {
		CMGame_Scroll::SetFooterHeight(This, _State.Controls.Scroll_Credits, 0.);
	} else {
		CMGame_Scroll::SetFooterHeight(
			This, _State.Controls.Scroll_Credits, (
				ComponentCredits_ML::Abs(_State.Controls.Label_Licenses.RelativePosition_V3.Y) +
				_State.Controls.Label_Licenses.ComputeHeight(_State.Controls.Label_Licenses.Value)
			)
		);
	}
}

// Initialize the component
ComponentCredits_K_State ComponentCredits_Private_Initialize(ComponentCredits_K_State _State) {
	declare ComponentCredits_K_State State = _State;

	State = ComponentCredits_Private_SetCredits(State, []);
	ComponentCredits_Private_UpdateLicenses(State, "");

	State.IsLoadingCredits = True;
	State.Request_LoadCredits = ComponentCredits_Http::DestroyAndCreate(
		State.Request_LoadCredits,
		ComponentCredits_Http::CreateGet(ComponentCredits_C_CreditsJsonPath, [])
	);
	State.Request_LoadLicenses = ComponentCredits_Http::DestroyAndCreate(
		State.Request_LoadLicenses,
		ComponentCredits_Http::CreateGet(ComponentCredits_C_LicensesTextPath, [])
	);

	return State;
}

// Public API

// Enable or disable the component
Void ComponentCredits_Enable(Boolean _Enabled) {
	ComponentCredits_G_State = ComponentCredits_Private_Enable(ComponentCredits_G_State, _Enabled);
}

// Display or hide the menu buttons at the bottom right
Void ComponentCredits_EnableMenuButtonList(Boolean _Enabled) {
	ComponentCredits_G_State.Controls.ButtonList_Credits.Visible = _Enabled;
}

// Use navigation events from the manialink
Void ComponentCredits_UseLocalEvents(Boolean _UseLocalEvents) {
	CMGame_Scroll::UseLocalEvents(This, _UseLocalEvents);
	ComponentNavigation_ComponentNavigation::UseLocalEvents(This, _UseLocalEvents);
}

***MainInit***
***
declare CMlFrame ComponentCredits_Frame_Global;
***

***MainStart***
***
ComponentCredits_Frame_Global <=> (Page.GetFirstChild("ComponentCredits_frame-global") as CMlFrame);
ComponentCredits_G_State.Controls.Scroll_Credits <=> (ComponentCredits_Frame_Global.GetFirstChild("ComponentCredits_scroll-credits") as CMlFrame);
ComponentCredits_G_State.Controls.Label_Licenses <=> (ComponentCredits_Frame_Global.GetFirstChild("ComponentCredits_label-licenses") as CMlLabel);
ComponentCredits_G_State.Controls.Button_Back <=> (ComponentCredits_Frame_Global.GetFirstChild("ComponentCredits_button-back") as CMlFrame);
ComponentCredits_G_State.Controls.ButtonList_Credits <=> (ComponentCredits_Frame_Global.GetFirstChild("ComponentCredits_button-list-credits") as CMlFrame);

ComponentCredits_PendingEvents = [];

ComponentCredits_G_State = ComponentCredits_Private_Initialize(ComponentCredits_G_State);
ComponentCredits_G_State = ComponentCredits_Private_Enable(ComponentCredits_G_State, False, True);

ComponentMenuButtonList_SetButtons(ComponentCredits_G_State.Controls.ButtonList_Credits, ["Down" => "", "Up" => _("Scroll")]);
***

***MainLoop***
***
ComponentCredits_PendingEvents = [];

if (ComponentCredits_G_State.IsLoadingCredits) {
	if (ComponentCredits_Http::IsInitialized(ComponentCredits_G_State.Request_LoadCredits)) {
		ComponentCredits_G_State.Request_LoadCredits = ComponentCredits_Http::Update(ComponentCredits_G_State.Request_LoadCredits);

		if (!ComponentCredits_Http::IsRunning(ComponentCredits_G_State.Request_LoadCredits)) {
			if (ComponentCredits_Http::IsSuccess(ComponentCredits_G_State.Request_LoadCredits)) {
				declare ComponentCredits_K_CreditSource[] CreditsSource;
				CreditsSource.fromjson(ComponentCredits_Http::GetResult(ComponentCredits_G_State.Request_LoadCredits));
				ComponentCredits_G_State = ComponentCredits_Private_SetCredits(ComponentCredits_G_State, CreditsSource);
			}
			ComponentCredits_G_State.Request_LoadCredits = ComponentCredits_Http::Destroy(ComponentCredits_G_State.Request_LoadCredits);
		}
	}
	if (ComponentCredits_Http::IsInitialized(ComponentCredits_G_State.Request_LoadLicenses)) {
		ComponentCredits_G_State.Request_LoadLicenses = ComponentCredits_Http::Update(ComponentCredits_G_State.Request_LoadLicenses);

		if (!ComponentCredits_Http::IsRunning(ComponentCredits_G_State.Request_LoadLicenses)) {
			if (ComponentCredits_Http::IsSuccess(ComponentCredits_G_State.Request_LoadLicenses)) {
				ComponentCredits_Private_UpdateLicenses(ComponentCredits_G_State, ComponentCredits_Http::GetResult(ComponentCredits_G_State.Request_LoadLicenses));
			}
			ComponentCredits_G_State.Request_LoadLicenses = ComponentCredits_Http::Destroy(ComponentCredits_G_State.Request_LoadLicenses);
		}
	}
	ComponentCredits_G_State.IsLoadingCredits = (
		ComponentCredits_Http::IsInitialized(ComponentCredits_G_State.Request_LoadCredits) &&
		ComponentCredits_Http::IsInitialized(ComponentCredits_G_State.Request_LoadLicenses)
	);
}

if (ComponentCredits_G_State.ComponentEnabled) {
	foreach (Event in CMGame_Scroll::GetPendingEvents(This)) {
		switch (Event.Type) {
			case CMGame_Scroll::C_EventType_Update: {
				if (Event.Scroll == ComponentCredits_G_State.Controls.Scroll_Credits) {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						ComponentCredits_Private_DisplayCreditLine(ComponentCredits_G_State, Frame_Element, Key);
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						Frame_Element.Visible = False;
					}
				}
			}
		}
	}

	foreach (Event in ComponentNavigation_ComponentNavigation::GetPendingEvents(This)) {
		switch (Event.Type) {
			case ComponentNavigation_ComponentNavigation::C_EventType_NavigateInput: {
				if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, ComponentCredits_C_NavGroup_Global)) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Up) {
						CMGame_Scroll::Scroll(This, ComponentCredits_G_State.Controls.Scroll_Credits, -7.);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Down) {
						CMGame_Scroll::Scroll(This, ComponentCredits_G_State.Controls.Scroll_Credits, 7.);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						ComponentCredits_Private_Select(ComponentCredits_G_State.Controls.Button_Back);
					}
				} else if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, ComponentCredits_C_NavGroup_Main)) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						ComponentCredits_Private_Select(Event.To);
					} else {
						ComponentCredits_Private_Focus(Event.From, Event.To);
					}
				}
			}
			case ComponentNavigation_ComponentNavigation::C_EventType_NavigateMouse: {
				if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, ComponentCredits_C_NavGroup_Main)) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						ComponentCredits_Private_Select(Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						ComponentCredits_Private_Focus(Event.From, Event.To);
					}
				}
			}
		}
	}
}
***
		
// */
// @Component end component-credits

// @Component start structures-matchmaking
// /*

LibStructuresMatchmaking_K_Mode LibStructuresMatchmaking_GetMode(Text _ModeName) {
	return LibStructuresMatchmaking_C_Modes.get(_ModeName, LibStructuresMatchmaking_K_Mode {});
}
		
// */
// @Component end structures-matchmaking

// @Component start lib-user-store
// /*

***MainInit***
***
Trackmania_UserStore::MainInit(This);
***
		
// */
// @Component end lib-user-store

// @Component start lib-http-struct
// /*

		
// */
// @Component end lib-http-struct

// @Component start structures-club
// /*

LibStructuresClub_K_Club LibStructuresClub_GetEmptyClub() {
	return LibStructuresClub_K_Club {
		Id = LibStructuresClub_C_ClubNullId,
		Name = "",
		Tag = "",
		IconUrl = "",
		LogoUrl = "",
		DecalUrl = "",
		BgUrl = "",
		VerticalUrl = "",
		DecoImageUrl_DecalSponsor4x1 = "",
		DecoImageUrl_Screen16x9 = "",
		DecoImageUrl_Screen8x1 = "",
		DecoImageUrl_Screen16x1 = "",
		PrivacyState = LibStructuresClub_C_ClubState_Public,
		PopularityLevel = 0
	};
}

LibStructuresClub_K_Skin LibStructuresClub_GetSkinFromNSSkin(CNadeoServicesSkin _NSSkin, Boolean _IsFavorite, Boolean _IsUsed) {
	return LibStructuresClub_K_Skin {
		Id = _NSSkin.Id,
		Type = _NSSkin.Type,
		Name = _NSSkin.Name,
		DisplayName = _NSSkin.DisplayName,
		CreatorAccountId = _NSSkin.CreatorAccountId,
		CreatorDisplayName = _NSSkin.CreatorDisplayName,
		CreatorIsFirstPartyDisplayName = _NSSkin.CreatorIsFirstPartyDisplayName,
		FileName = _NSSkin.FileName,
		FileUrl = _NSSkin.FileUrl,
		ThumbnailUrl = _NSSkin.ThumbnailUrl,
		TimeStamp = _NSSkin.TimeStamp,
		IsFavorite = _IsFavorite,
		IsUsed = _IsUsed
	};
}
LibStructuresClub_K_Skin LibStructuresClub_GetSkinFromNSSkin(CNadeoServicesSkin _NSSkin) {
	return LibStructuresClub_GetSkinFromNSSkin(_NSSkin, False, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the display name of a club activity
Text LibStructuresClub_GetActivityDisplayName(Text _ActivityType) {
	return LibStructuresClub_C_ClubActivity_DisplayNames.get(_ActivityType, "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty member structure
LibStructuresClub_K_Member LibStructuresClub_GetEmptyMember() {
	return LibStructuresClub_K_Member {
		AccountId = LibStructuresClub_C_AccountNullId,
		Role = LibStructuresClub_C_ClubRoleNone,
		JoinDate = 0
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty activity structure
LibStructuresClub_K_Activity LibStructuresClub_GetEmptyActivity() {
	return LibStructuresClub_K_Activity {
		Id = LibStructuresClub_C_ActivityNullId
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Determine if the given theme name exists or not
Boolean LibStructuresClub_IsClubThemeName(Text _ThemeName) {
	return LibStructuresClub_C_ClubThemes_Folders.existskey(_ThemeName);
}

/// Determine if the given url is a club theme url or not
Boolean LibStructuresClub_IsClubThemeUrl(Text _MediaUrl) {
	if (!LibStructuresClub_TL::StartsWith("file://"^LibStructuresClub_C_ClubThemes_Path, LibStructuresClub_TL::Replace(_MediaUrl, "\\", "/"))) return False;
	return LibStructuresClub_C_ClubThemes_Folders.exists("/"^LibStructuresClub_TL::Split("/", LibStructuresClub_TL::Replace(_MediaUrl, "\\", "/"))[-2]);
}

/// Get the formatted url of a club theme given the name and the media type
Text LibStructuresClub_GetClubThemeName(Text _MediaUrl) {
	if (!LibStructuresClub_IsClubThemeUrl(_MediaUrl)) return _MediaUrl;
	return LibStructuresClub_C_ClubThemes_Folders.keyof("/"^LibStructuresClub_TL::Split("/", LibStructuresClub_TL::Replace(_MediaUrl, "\\", "/"))[-2]);
}

/// Get the formatted url of a club theme given the name and the media type
Text LibStructuresClub_GetClubThemeUrl(Text _ThemeName, Text _MediaType) {
	if (!LibStructuresClub_IsClubThemeName(_ThemeName) || !LibStructuresClub_C_ClubThemes_Files.existskey(_MediaType)) return "";
	return "file://"^LibStructuresClub_C_ClubThemes_Path^LibStructuresClub_C_ClubThemes_Folders[_ThemeName]^LibStructuresClub_C_ClubThemes_Files[_MediaType];
}

/// Get the club theme type given the media url
Text LibStructuresClub_GetClubThemeType(Text _MediaUrl) {
	if (LibStructuresClub_IsClubThemeUrl(_MediaUrl)) {
		declare Text File = "/"^LibStructuresClub_TL::Split("/", LibStructuresClub_TL::Replace(_MediaUrl, "\\", "/"))[-1];
		foreach (ThemeType => ThemeFile in LibStructuresClub_C_ClubThemes_Files) {
			if (LibStructuresClub_TL::CompareWithoutFormat(ThemeFile, File, False)) {
				return ThemeType;
			}
		}
	}
	return "";
}

/// Get the media url corresponding to the given media type
Text LibStructuresClub_GetMediaFromType(LibStructuresClub_K_Club _Club, Text _MediaType) {
	declare Text MediaUrl;

	switch (_MediaType) {
		case LibStructuresClub_C_MediaType_Icon: MediaUrl = _Club.IconUrl;
		case LibStructuresClub_C_MediaType_Vertical: MediaUrl = _Club.VerticalUrl;
		case LibStructuresClub_C_MediaType_Bg: MediaUrl = _Club.BgUrl;
		case LibStructuresClub_C_MediaType_Decal: MediaUrl = _Club.DecalUrl;
		case LibStructuresClub_C_MediaType_DecalSponsor: MediaUrl = _Club.DecoImageUrl_DecalSponsor4x1;
		case LibStructuresClub_C_MediaType_Screen16x9: MediaUrl = _Club.DecoImageUrl_Screen16x9;
		case LibStructuresClub_C_MediaType_Screen16x1: MediaUrl = _Club.DecoImageUrl_Screen16x1;
		case LibStructuresClub_C_MediaType_Screen8x1: MediaUrl = _Club.DecoImageUrl_Screen8x1;
	}

	return MediaUrl;
}

/// Check if there is at least one asset in the club
Boolean LibStructuresClub_IsAnyAssetSelected(LibStructuresClub_K_Club _Club) {
	foreach (MediaType => MediaTranslation in LibStructuresClub_C_MediaType_Translations) {
		if (LibStructuresClub_GetMediaFromType(_Club, MediaType) != "") {
			return True;
		}
	}

	return False;
}

/// Check if there is at least one theme selected among the different club assets
Boolean LibStructuresClub_IsAnyThemeSelected(LibStructuresClub_K_Club _Club) {
	foreach (MediaType => MediaTranslation in LibStructuresClub_C_MediaType_Translations) {
		declare Text MediaUrl = LibStructuresClub_GetMediaFromType(_Club, MediaType);
		if (LibStructuresClub_TL::StartsWith("file://"^LibStructuresClub_C_ClubThemes_Path, LibStructuresClub_TL::Replace(MediaUrl, "\\", "/"))) {
			MediaUrl = LibStructuresClub_C_ClubThemes_Folders.keyof("/"^LibStructuresClub_TL::Split("/", LibStructuresClub_TL::Replace(MediaUrl, "\\", "/"))[-2]);
		}
		if (LibStructuresClub_C_ClubThemes_Folders.existskey(MediaUrl)) {
			return True;
		}
	}

	return False;
}
		
// */
// @Component end structures-club

// @Component start lib-campaign-struct
// /*

Integer LibCampaignStruct_GetSeasonNameInCampaignName(Text _CampaignName) {
	foreach (SeasonName => SeasonIndex in LibCampaignStruct_Const::C_Season_Name_To_Index) {
		if (LibCampaignStruct_TL::Find(SeasonName, _CampaignName, False, False)) return SeasonIndex;
	}
	return LibCampaignStruct_Const::C_SeasonIndex_Null;
}

Integer LibCampaignStruct_GetYearInCampaignName(Text _CampaignName) {
	declare Text[] Result = LibCampaignStruct_TL::RegexFind("\\b\\d{4,}\\b", _CampaignName, "");
	if (Result.count > 0) return LibCampaignStruct_TL::ToInteger(Result[0]);
	return 0;
}

LibCampaignStruct_K_Campaign LibCampaignStruct_GetCampaignFromHttpCampaign(LibHttpStruct_K_HttpCampaign _HttpCampaign) {
	declare LibCampaignStruct_K_Map[Integer] PlaylistToSort;
	declare LibCampaignStruct_K_Map[] Playlist;

	foreach (HttpMap in _HttpCampaign.playlist) {
		PlaylistToSort[HttpMap.position] = LibCampaignStruct_K_Map {
			Position = HttpMap.position,
			Uid = HttpMap.mapUid
		};
	}
	foreach (Map in PlaylistToSort.sort()) {
		Playlist.add(Map);
	}

	return LibCampaignStruct_K_Campaign {
		Id = _HttpCampaign.id,
		Name = _HttpCampaign.name,
		SeasonUid = _HttpCampaign.seasonUid,
		Type = _HttpCampaign.useCase,
		Day = _HttpCampaign.day,
		Week = _HttpCampaign.week,
		Month = _HttpCampaign.month,
		MonthDay = _HttpCampaign.monthDay,
		MonthYear = _HttpCampaign.monthYear,
		Year = _HttpCampaign.year,
		SeasonName = LibCampaignStruct_GetSeasonNameInCampaignName(_HttpCampaign.name),
		Club = LibStructuresClub_K_Club { Id = _HttpCampaign.clubId },
		IsSeasonLive = LibCampaignStruct_TiL::Compare(LibCampaignStruct_TiL::GetCurrent(), ""^_HttpCampaign.endTimestamp) < 0,
		IsLoaded = False,
		IsFetched = False,
		FailedToGetMapUrl = False,
		Playlist = Playlist,
		CampaignRanking = LibCampaignStruct_K_CampaignRanking {},
		TopRankings = [],
		ClubTopRankings = [],
		StartTimestamp = _HttpCampaign.startTimestamp,
		EndTimestamp = _HttpCampaign.endTimestamp,
		EditionTimestamp = _HttpCampaign.editionTimestamp,
		RankingSentTimestamp = _HttpCampaign.rankingSentTimestamp,
		PublicationTimestamp = _HttpCampaign.publicationTimestamp
	};
}

LibCampaignStruct_K_Map LibCampaignStruct_GetMapFromNSMap(LibCampaignStruct_K_Map _OldMap, CNadeoServicesMap _NSMap) {
	declare LibCampaignStruct_K_Map NewMap = _OldMap;
	NewMap.Position = _OldMap.Position;
	NewMap.Uid = _NSMap.Uid;
	NewMap.Name = _NSMap.Name;
	NewMap.Type = _NSMap.Type;
	NewMap.Style = _NSMap.Style;
	NewMap.AuthorLogin = _NSMap.AuthorAccountId;
	NewMap.AuthorDisplayName = _NSMap.AuthorDisplayName;
	NewMap.AuthorIsFirstPartyDisplayName = _NSMap.AuthorIsFirstPartyDisplayName;
	NewMap.SubmitterAccountId = _NSMap.SubmitterAccountId;
	NewMap.CreatedWithSimpleEditor = _NSMap.CreatedWithSimpleEditor;
	NewMap.CreatedWithGamepadEditor = _NSMap.CreatedWithGamepadEditor;
	NewMap.AuthorTime = _NSMap.AuthorScore;
	NewMap.GoldTime = _NSMap.GoldScore;
	NewMap.SilverTime = _NSMap.SilverScore;
	NewMap.BronzeTime = _NSMap.BronzeScore;
	NewMap.DownloadUrl = _NSMap.FileUrl;
	NewMap.ThumbnailUrl = _NSMap.ThumbnailUrl;
	NewMap.UploadTimestamp = _NSMap.TimeStamp;
	NewMap.IsPlayable = _NSMap.IsPlayable;
	NewMap.CollectionName = _NSMap.CollectionName;

	return NewMap;
}

LibCampaignStruct_K_Map LibCampaignStruct_GetMapFromMapInfo(CMapInfo _MapInfo) {
	return LibCampaignStruct_K_Map {
		Uid = _MapInfo.MapUid,
		Name = _MapInfo.Name,
		LocalFileName = _MapInfo.FileName,
		Type = _MapInfo.MapType,
		Style = _MapInfo.MapStyle,
		AuthorLogin = _MapInfo.AuthorLogin,
		AuthorDisplayName = _MapInfo.AuthorNickName,
		AuthorTime = _MapInfo.TMObjective_AuthorTime,
		GoldTime = _MapInfo.TMObjective_GoldTime,
		SilverTime = _MapInfo.TMObjective_SilverTime,
		BronzeTime = _MapInfo.TMObjective_BronzeTime,
		ThumbnailUrl = "file://Thumbnails/MapUid/"^_MapInfo.MapUid,
		IsPlayable = _MapInfo.IsPlayable,
		CollectionName = _MapInfo.CollectionName,
		CreatedWithSimpleEditor = _MapInfo.CreatedWithSimpleEditor,
		CreatedWithGamepadEditor = _MapInfo.CreatedWithGamepadEditor
	};
}

LibCampaignStruct_K_Campaign LibCampaignStruct_GetEmptyCampaign() {
	return LibCampaignStruct_K_Campaign {
		Id = LibCampaignStruct_C_Campaign_NullId,
		Type = LibCampaignStruct_C_CampaignType_None
	};
}

LibCampaignStruct_K_MonthlyCampaign LibCampaignStruct_GetEmptyMonthlyCampaign() {
	return LibCampaignStruct_K_MonthlyCampaign {
		Id = LibCampaignStruct_C_MonthlyCampaign_NullId
	};
}

Boolean LibCampaignStruct_IsNull(LibCampaignStruct_K_MonthlyCampaign _MonthlyCampaign) {
	return _MonthlyCampaign.Id == LibCampaignStruct_C_MonthlyCampaign_NullId;
}

/**
 * Parse a campaign name into a struct containing its season (see Const::C_Season_Names) and its year
 *
 *	@param _CampaignName		The name of the campaign to parse
 *
 *	@return									A struct LibCampaignStruct_K_CampaignName
 */
LibCampaignStruct_K_CampaignName LibCampaignStruct_ParseCampaignName(Text _CampaignName) {
	declare LibCampaignStruct_K_CampaignName CampaignName = LibCampaignStruct_K_CampaignName {
		IsValid = False,
		Name = _CampaignName
	};

	declare Text[] NameSplit = LibCampaignStruct_TL::Split(" ", _CampaignName);
	if (NameSplit.count >= 2) {
		CampaignName.Season = NameSplit[0];
		CampaignName.Year = NameSplit[1];
		CampaignName.IsValid = LibCampaignStruct_C_Season_Names.existskey(CampaignName.Season) && LibCampaignStruct_TL::ToInteger(CampaignName.Year) > 0;
		if (CampaignName.IsValid) {
			CampaignName.TranslatedName = LibCampaignStruct_TL::Compose("%1 %2", LibCampaignStruct_C_Season_Names[CampaignName.Season], CampaignName.Year);
		}
	}

	return CampaignName;
}

// Get the minimum medals needed to unlock this category
Integer LibCampaignStruct_GetMedalsMinToUnlockCategory(Integer _CategoryIndex) {
	switch (_CategoryIndex) {
		case LibCampaignStruct_C_CategoryBlue: {
			if (LibCampaignStruct_Config::HasFeature(LibCampaignStruct_Config::C_Feature_DebugFakeCampaignUnlock)) return LibCampaignStruct_C_MinBronzeMedalsToPlayBlueSectionDebug;
			else return LibCampaignStruct_C_MinBronzeMedalsToPlayBlueSection;
		}
		case LibCampaignStruct_C_CategoryRed: {
			if (LibCampaignStruct_Config::HasFeature(LibCampaignStruct_Config::C_Feature_DebugFakeCampaignUnlock)) return LibCampaignStruct_C_MinSilverMedalsToPlayRedSectionDebug;
			else return LibCampaignStruct_C_MinSilverMedalsToPlayRedSection;
		}
		case LibCampaignStruct_C_CategoryBlack: {
			if (LibCampaignStruct_Config::HasFeature(LibCampaignStruct_Config::C_Feature_DebugFakeCampaignUnlock)) return LibCampaignStruct_C_MinGoldMedalsToPlayBlackSectionDebug;
			else return LibCampaignStruct_C_MinGoldMedalsToPlayBlackSection;
		}
	}

	return 0;
}

// Check if a daily map's leaderboard is closed
Boolean LibCampaignStruct_LeaderboardIsClosed(LibCampaignStruct_K_DailyMap _DailyMap) {
	return (_DailyMap.RelativeEnd <= 0 || (Now - _DailyMap.RelativeNow) / 1000 >= _DailyMap.RelativeEnd);
}

// Get the value of the text displayed for the medal score (can be a time or points)
Text LibCampaignStruct_GetMedalScoreText(Integer _Time, Integer _Points, Integer _Respawns, Text _MapType, LibCampaignStruct_K_ScoreTextOptions _Options) {
	declare Text MedalScoreText = "";
	// For Stunt maps, we display the points of the players and not their time
	if (LibCampaignStruct_TitleControl::IsStuntMapType(_MapType)) {
		MedalScoreText = LibCampaignStruct_TM_Const::GetScoreText(_Points, LibCampaignStruct_TM_Const::C_ScoreType_Points, _Options);
	// For Platform maps, we display the respawns of the players
	} else if (LibCampaignStruct_TitleControl::IsPlatformMapType(_MapType)) {
		MedalScoreText = LibCampaignStruct_TM_Const::GetScoreText(_Respawns, LibCampaignStruct_TM_Const::C_ScoreType_Respawns, _Options);
	} else { // other map type (time)
		MedalScoreText = LibCampaignStruct_TM_Const::GetScoreText(_Time, LibCampaignStruct_TM_Const::C_ScoreType_Time, _Options);
	}
	return MedalScoreText;
}
Text LibCampaignStruct_GetMedalScoreText(Integer _Time, Integer _Points, Integer _Respawns, Text _MapType, Boolean _EnableAbbreviation) {
	declare LibCampaignStruct_K_ScoreTextOptions Options = LibCampaignStruct_C_ScoreTextOptions_Null;
	Options.EnableAbbreviation = _EnableAbbreviation;
	return LibCampaignStruct_GetMedalScoreText(_Time, _Points, _Respawns, _MapType, Options);
}
Text LibCampaignStruct_GetMedalScoreText(Integer _Score, Text _MapType, Boolean _EnableAbbreviation) {
	declare LibCampaignStruct_K_ScoreTextOptions Options = LibCampaignStruct_C_ScoreTextOptions_Null;
	Options.EnableAbbreviation = _EnableAbbreviation;
	return LibCampaignStruct_GetMedalScoreText(_Score, _Score, _Score, _MapType, Options);
}
Text LibCampaignStruct_GetMedalScoreText(Integer _Score, Text _MapType, LibCampaignStruct_K_ScoreTextOptions _Options) {
	return LibCampaignStruct_GetMedalScoreText(_Score, _Score, _Score, _MapType, _Options);
}
Text LibCampaignStruct_GetMedalScoreText(Integer _Score, Text _MapType) {
	return LibCampaignStruct_GetMedalScoreText(_Score, _Score, _Score, _MapType, LibCampaignStruct_C_ScoreTextOptions_Null);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Determine the map's category in official campaigns from its position in the playlist
Integer LibCampaignStruct_GetCategoryFromMapPosition(Integer _MapPosition) {
	return (_MapPosition - (_MapPosition % LibCampaignStruct_C_MapsByCategory)) / LibCampaignStruct_C_MapsByCategory;
}

// */
// @Component end lib-campaign-struct

// @Component start lib-map-store
// /*

***MainInit***
***
Trackmania_MapStore::MainInit(This);
***
		
// */
// @Component end lib-map-store

// @Component start component-trackmania-favoritemapstools
// /*

Void Trackmania_FavoriteMapsTools_SetErrorMessage(CMlLabel _Label, CMlFrame _Frame_BgError, Text _Message) {
	_Label.Value = _Message;
	AnimMgr.Flush(_Label);
	AnimMgr.Add(_Label, "<a opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.Add(_Label, "<a opacity=\"0.\" />", Now+4000, 500, CAnimManager::EAnimManagerEasing::QuadOut);
	if (_Frame_BgError != Null) {
		CMGame_ExpendableAsset::AddOpacityAnimation(This, _Frame_BgError, 1., 250, CAnimManager::EAnimManagerEasing::QuadOut);
		CMGame_ExpendableAsset::AddOpacityAnimation(This, _Frame_BgError, 0., Now + 4000, 500, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void Trackmania_FavoriteMapsTools_UdpateFavoriteButton(
	CMlFrame _Button_FavoriteMap,
	CMlFrame _Frame_LoadingSpinner,
	CMlFrame _Frame_BgError,
	CMlLabel _Label_Error,
	Text _MapUid
) {
	declare Trackmania_MapStore::K_CurrentMap CurrentMap = Trackmania_MapStore::GetCurrentMap();

	// Lock button if map not available on NadeoServices, is not loaded yet in `MapStore` or offline mode
	declare Boolean LockFeature = Trackmania_UserStore::IsOfflineMode() || !CurrentMap.IsMapUploadedToNS || CurrentMap.Uid != _MapUid;
	ComponentNavigation_ComponentNavigation::Lock(_Button_FavoriteMap, LockFeature);
	if (LockFeature) Trackmania_Button::SetTextColor(This, _Button_FavoriteMap, Trackmania_FavoriteMapsTools_CL::HexToRgb("003228"));
	else Trackmania_Button::SetTextColor(This, _Button_FavoriteMap, Trackmania_FavoriteMapsTools_CL::HexToRgb("6EFAA0"));

	// And set the button value depending on favorite map attribute
	declare Text ButtonValue = "Add track to favorites";
	if (CurrentMap.IsMapUploadedToNS && CurrentMap.IsFavorite) {
		ButtonValue = "Remove track from favorites";
	}
	Trackmania_Button::SetValue(This, _Button_FavoriteMap, ButtonValue);

	if (CurrentMap.Status == Trackmania_MapStore::C_CurrentMapStatus_Error) {
		declare Text ErrorMessage;
		switch (CurrentMap.ErrorCode) {
			case Trackmania_MapStore::C_ErrorCode_FailedAddFavorites: ErrorMessage = "Error while adding track to your favorites. Please try again.";
			case Trackmania_MapStore::C_ErrorCode_FailedRemoveFavorites: ErrorMessage = "Error while removing track from your favorites. Please try again.";
		}
		if (ErrorMessage != "") Trackmania_FavoriteMapsTools_SetErrorMessage(_Label_Error, _Frame_BgError, ErrorMessage);
		CMGame_LoadingSpinner::StopAnimation(This, _Frame_LoadingSpinner);
	} else if (
		CurrentMap.Status == Trackmania_MapStore::C_CurrentMapStatus_LoadingInfos ||
		CurrentMap.Status == Trackmania_MapStore::C_CurrentMapStatus_AddingToFavorites ||
		CurrentMap.Status == Trackmania_MapStore::C_CurrentMapStatus_RemovingFromFavorites
	) {
		CMGame_LoadingSpinner::StartAnimation(This, _Frame_LoadingSpinner);
	} else {
		CMGame_LoadingSpinner::StopAnimation(This, _Frame_LoadingSpinner);
	}
}

Void Trackmania_FavoriteMapsTools_SelectFavoriteButton(CMap _Map) {
	// Check that the map we are currently playing is the one loaded in `MapStore`
	// before trying to toggle its favorite status
	if (_Map != Null && _Map.MapInfo != Null && Trackmania_MapStore::GetCurrentMap().Uid == _Map.MapInfo.MapUid) {
		Trackmania_MapStore::Action_ToggleCurrentMapFromFavorites(This);
	}
}

// */
// @Component end component-trackmania-favoritemapstools

// @Component start component-maniapubs
// /*

declare CMlFrame[] ComponentManiapubs_G_Maniapubs;

Boolean ComponentManiapubs_IsManiapubsAvailable() {
	return ComponentManiapubs_PluginAdverts::IsManiapubsAvailable();
}

Boolean ComponentManiapubs_IsManiapubs(CMlControl _Frame_Maniapubs) {
	declare ComponentManiapubs_K_Properties ComponentManiapubs_Properties for _Frame_Maniapubs;
	return ComponentManiapubs_Properties.IsManiapubs;
}

Boolean ComponentManiapubs_IsFocused(CMlControl _Frame_Maniapubs) {
	declare ComponentManiapubs_K_Properties ComponentManiapubs_Properties for _Frame_Maniapubs;
	return ComponentManiapubs_Properties.IsFocused;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Handle the navigation inside the maniapub container
Void ComponentManiapubs_Private_ButtonFocus(CMlFrame _Frame_Maniapubs, CMlControl _From, CMlControl _To) {
	declare ComponentManiapubs_K_Properties ComponentManiapubs_Properties for _Frame_Maniapubs;
	assert(ComponentManiapubs_Properties.IsManiapubs, "Control '"^_Frame_Maniapubs.ControlId^"' is not a maniapub");
	if (ComponentManiapubs_Properties.IsLocked) return;

	if (_From != Null) {
		ComponentNavigation_ComponentNavigation::Unfocus(This, _From);
		if (Trackmania_Button::IsButton(_From)) {
			Trackmania_Button::Unfocus(This, _From as CMlFrame);
		}
	}

	if (_To != Null) {
		ComponentNavigation_ComponentNavigation::Focus(This, _To);
		if (Trackmania_Button::IsButton(_To)) {
			Trackmania_Button::Focus(This, _To as CMlFrame);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Enable the navigation inside the maniapub container
Void ComponentManiapubs_Focus(CMlFrame _Frame_Maniapubs) {
	declare ComponentManiapubs_K_Properties ComponentManiapubs_Properties for _Frame_Maniapubs;
	assert(ComponentManiapubs_Properties.IsManiapubs, "Control '"^_Frame_Maniapubs.ControlId^"' is not a maniapub");
	if (ComponentManiapubs_Properties.IsLocked) return;

	if (!ComponentManiapubs_Properties.IsFocused) {
		declare CMlFrame Button_Previous <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_button-slide-previous") as CMlFrame);
		declare CMlFrame Button_Title <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_button-slide-title") as CMlFrame);
		declare CMlFrame Button_Next <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_button-slide-next") as CMlFrame);
		declare CMlFrame Frame_NavigationContainer <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_frame-navigation-container") as CMlFrame);
		declare CMlQuad Quad_Activation <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_quad-activation") as CMlQuad);

		// Enable navigation
		ComponentManiapubs_Properties.IsFocused = True;
		Quad_Activation.Visible = !ComponentManiapubs_Properties.IsFocused;
		ComponentNavigation_ComponentNavigation::EnableContainer(This, Frame_NavigationContainer, ComponentManiapubs_Properties.IsFocused);

		// Entering maniapub component - focus the default button if possible
		if (ComponentManiapubs_Properties.State.LastControlFocused != Null && !ComponentNavigation_ComponentNavigation::IsLocked(ComponentManiapubs_Properties.State.LastControlFocused)) {
			ComponentManiapubs_Private_ButtonFocus(_Frame_Maniapubs, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "ComponentManiapubs_NavGroup"), ComponentManiapubs_Properties.State.LastControlFocused);
		} else if (!ComponentNavigation_ComponentNavigation::IsLocked(Button_Previous)) {
			ComponentManiapubs_Private_ButtonFocus(_Frame_Maniapubs, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "ComponentManiapubs_NavGroup"), Button_Previous);
		} else if (!ComponentNavigation_ComponentNavigation::IsLocked(Button_Next)) {
			ComponentManiapubs_Private_ButtonFocus(_Frame_Maniapubs, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "ComponentManiapubs_NavGroup"), Button_Next);
		} else {
			ComponentManiapubs_Private_ButtonFocus(_Frame_Maniapubs, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "ComponentManiapubs_NavGroup"), Button_Title);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Disable the navigation inside the maniapub container
Void ComponentManiapubs_Unfocus(CMlFrame _Frame_Maniapubs) {
	declare ComponentManiapubs_K_Properties ComponentManiapubs_Properties for _Frame_Maniapubs;
	assert(ComponentManiapubs_Properties.IsManiapubs, "Control '"^_Frame_Maniapubs.ControlId^"' is not a maniapub");
	if (ComponentManiapubs_Properties.IsLocked) return;

	if (ComponentManiapubs_Properties.IsFocused) {
		declare CMlFrame Frame_NavigationContainer <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_frame-navigation-container") as CMlFrame);
		declare CMlQuad Quad_Activation <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_quad-activation") as CMlQuad);

		// Disable navigation
		ComponentManiapubs_Properties.IsFocused = False;
		ComponentManiapubs_Properties.State.LastControlFocused = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "ComponentManiapubs_NavGroup");
		Quad_Activation.Visible = !ComponentManiapubs_Properties.IsFocused;
		ComponentNavigation_ComponentNavigation::EnableContainer(This, Frame_NavigationContainer, ComponentManiapubs_Properties.IsFocused);

		// Leaving maniapub component - unfocus buttons
		ComponentManiapubs_Private_ButtonFocus(_Frame_Maniapubs, ComponentManiapubs_Properties.State.LastControlFocused, Null);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Update the given slide
Void ComponentManiapubs_UpdateSlide(CMlFrame _Frame_Slide, ComponentManiapubs_PluginAdverts::K_Maniapub _Maniapub) {
	assert(_Frame_Slide.HasClass("ComponentManiapubs_C_Class_Slide"), "Control '"^_Frame_Slide.ControlId^"' is not a maniapub slide.");

	declare CMlFrame Frame_Ad_2x3 <=> (_Frame_Slide.GetFirstChild("ComponentManiapubs_frame-ad-2x3") as CMlFrame);
	declare CMlFrame Frame_Ad_64x41 <=> (_Frame_Slide.GetFirstChild("ComponentManiapubs_frame-ad-64x41") as CMlFrame);
	declare CMlFrame Frame_Ad_64x10 <=> (_Frame_Slide.GetFirstChild("ComponentManiapubs_frame-ad-64x10") as CMlFrame);
	declare Integer AdsNumber = 0;

	// Initialize the frame corresponding to the ratio of the ad
	foreach (Ratio in C_InfoPanels_Sizes) {
		declare CMlFrame Frame_Ad <=> (_Frame_Slide.GetFirstChild("ComponentManiapubs_frame-ad-"^Ratio) as CMlFrame);

		if (_Maniapub.MediaUrl.existskey(Ratio) && _Maniapub.MediaUrl[Ratio] != "") {
			declare CMlQuad Quad_Image <=> (Frame_Ad.GetFirstChild("ComponentManiapubs_quad-image") as CMlQuad);
			declare CMlQuad Quad_Contour <=> (Frame_Ad.GetFirstChild("ComponentManiapubs_quad-contour") as CMlQuad);
			AdsNumber += 1;

			ComponentManiapubs_Tools::Align(Frame_Ad, Size_Ads[Ratio], ComponentManiapubs_Tools::C_HAlign_Center, ComponentManiapubs_Tools::C_VAlign_Bottom);
			Quad_Image.ImageUrl = _Maniapub.MediaUrl[Ratio];
			Quad_Contour.ImageUrl = C_ImageUrl_Ads_Contour[Ratio];
			Quad_Image.Size.X = Size_Ads[Ratio].X - (2*C_Thickness_Ads_Contour/C_Size_Ads_Contour[Ratio].X)*Size_Ads[Ratio].X; //< Remove the thickness of the contour to have the image inside the contour
			Quad_Image.Size.Y = Size_Ads[Ratio].Y - (2*C_Thickness_Ads_Contour/C_Size_Ads_Contour[Ratio].Y)*Size_Ads[Ratio].Y; //< Remove the thickness of the contour to have the image inside the contour
			Quad_Contour.Size = Size_Ads[Ratio];
			Frame_Ad.Show();
		} else {
			Frame_Ad.Hide();
		}
	}

	// Update ads layout
	switch (AdsNumber) {
		case 1: {
			Frame_Ad_64x41.RelativePosition_V3 += <0., -45.>;
			Frame_Ad_64x10.RelativePosition_V3 += <0., -45.>;
			Frame_Ad_2x3.RelativePosition_V3 += <0., -45.>;
		}
		case 2: {
			if (_Maniapub.MediaUrl["2x3"] != "" && _Maniapub.MediaUrl["64x41"] != "") {
				ComponentManiapubs_Tools::Align(Frame_Ad_64x41, <86.246, 55.2513>, ComponentManiapubs_Tools::C_HAlign_Right, ComponentManiapubs_Tools::C_VAlign_Center);
				Frame_Ad_2x3.RelativePosition_V3 += <44.373, -45.>;
				Frame_Ad_64x41.RelativePosition_V3 += <Frame_Ad_2x3.RelativePosition_V3.X - 26.2424, Frame_Ad_2x3.RelativePosition_V3.Y>;
			} else if (_Maniapub.MediaUrl["2x3"] != "" && _Maniapub.MediaUrl["64x10"] != "") {
				Frame_Ad_64x10.RelativePosition_V3 += <0., -45.>;
				Frame_Ad_2x3.RelativePosition_V3 += <0., Frame_Ad_64x10.RelativePosition_V3.Y + 9.23797>;
			} else if (_Maniapub.MediaUrl["64x41"] != "" && _Maniapub.MediaUrl["64x10"] != "") {
				Frame_Ad_64x41.RelativePosition_V3 += <0., -45.>;
				Frame_Ad_64x10.RelativePosition_V3 += <0., Frame_Ad_64x41.RelativePosition_V3.Y + 30.1257>;
			}
		}
		case 3: {
			ComponentManiapubs_Tools::Align(Frame_Ad_2x3, <47.4849, 71.2273>, ComponentManiapubs_Tools::C_HAlign_Left, ComponentManiapubs_Tools::C_VAlign_Bottom);
			Frame_Ad_64x41.RelativePosition_V3 += <-24.9924, -45.>;
			Frame_Ad_2x3.RelativePosition_V3 += <Frame_Ad_64x41.RelativePosition_V3.X + 45.623, -45.>;
			Frame_Ad_64x10.RelativePosition_V3 += <Frame_Ad_64x41.RelativePosition_V3.X, Frame_Ad_64x41.RelativePosition_V3.Y + 30.1257>;
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Change the slide currently displayed in the maniapub component
Void Private_Cycle(CMlFrame _Frame_Maniapubs, Integer _ManiapubShift) {
	declare ComponentManiapubs_K_Properties ComponentManiapubs_Properties for _Frame_Maniapubs;
	assert(ComponentManiapubs_Properties.IsManiapubs, "Control '"^_Frame_Maniapubs.ControlId^"' is not a maniapub");

	declare CMlFrame Frame_ManiapubsWindow <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_frame-maniapub-window") as CMlFrame);
	declare CMlFrame Button_Title <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_button-slide-title") as CMlFrame);

	// Handle infinite cycle through the maniapub
	if (_ManiapubShift == ComponentManiapubs_C_Maniapub_Reset || ComponentManiapubs_Properties.State.CurrentKey + _ManiapubShift > ComponentManiapubs_Properties.State.Maniapubs.count-1) {
		ComponentManiapubs_Properties.State.CurrentKey = 0;
	} else if (ComponentManiapubs_Properties.State.CurrentKey + _ManiapubShift < 0) {
		ComponentManiapubs_Properties.State.CurrentKey = ComponentManiapubs_Properties.State.Maniapubs.count-1;
	} else {
		ComponentManiapubs_Properties.State.CurrentKey = ComponentManiapubs_Properties.State.CurrentKey + _ManiapubShift;
	}

	// Handle manual reset
	if (_ManiapubShift == ComponentManiapubs_C_Maniapub_Reset) {
		foreach (Control_Slide in Frame_ManiapubsWindow.Controls) {
			Control_Slide.RelativePosition_V3.X = ComponentManiapubs_Properties.Size.X;
			Control_Slide.Hide();
		}
	}

	// Prepare for the upcoming animation
	Frame_ManiapubsWindow.RelativePosition_V3.X = 0.;
	ComponentManiapubs_Properties.State.Frame_CurrentSlide.ZIndex = 0.;
	ComponentManiapubs_Properties.State.Frame_CurrentSlide.RelativePosition_V3.X = 0.;
	foreach (Control_Slide in Frame_ManiapubsWindow.Controls) {
		if (Control_Slide.Id != ComponentManiapubs_Properties.State.Frame_CurrentSlide.Id && ComponentManiapubs_Properties.State.Maniapubs.existskey(ComponentManiapubs_Properties.State.CurrentKey)) {
			ComponentManiapubs_Properties.State.CurrentManiapub = ComponentManiapubs_Properties.State.Maniapubs[ComponentManiapubs_Properties.State.CurrentKey];
			ComponentManiapubs_Properties.State.Frame_CurrentSlide = Control_Slide as CMlFrame;

			ComponentManiapubs_Properties.State.Frame_CurrentSlide.Show();
			ComponentManiapubs_Properties.State.Frame_CurrentSlide.ZIndex = 1.;
			ComponentManiapubs_Properties.State.Frame_CurrentSlide.RelativePosition_V3.X = ComponentManiapubs_Properties.Size.X * _ManiapubShift;
			ComponentManiapubs_UpdateSlide(ComponentManiapubs_Properties.State.Frame_CurrentSlide, ComponentManiapubs_Properties.State.CurrentManiapub);
			Trackmania_Button::SetValue(This, Button_Title, ComponentManiapubs_Properties.State.CurrentManiapub.Name);
			ComponentNavigation_ComponentNavigation::Lock(Button_Title, !Http.IsValidUrl(ComponentManiapubs_Properties.State.CurrentManiapub.ExternalUrl));
			if (Http.IsValidUrl(ComponentManiapubs_Properties.State.CurrentManiapub.ExternalUrl)) {
				Trackmania_Button::SetIcon(This, Button_Title, "file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/icons_128_settings_link.dds");
				Trackmania_Button::SetIconFocus(This, Button_Title, "file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/icons_128_settings_link.dds");
				Trackmania_Button::SetTextXPos(This, Button_Title, 0.57);
			} else {
				Trackmania_Button::SetIcon(This, Button_Title, "");
				Trackmania_Button::SetIconFocus(This, Button_Title, "");
				Trackmania_Button::SetTextXPos(This, Button_Title, 0.5);
			}
			break;
		}
	}

	// Anim the maniapub
	declare Vec2 Pos = <-ComponentManiapubs_Properties.Size.X * _ManiapubShift, Frame_ManiapubsWindow.RelativePosition_V3.Y>;
	AnimMgr.Flush(Frame_ManiapubsWindow);
	AnimMgr.Add(Frame_ManiapubsWindow, "<anim pos=\""^Pos.X^" "^Pos.Y^"\" />", ComponentManiapubs_C_Anim_Duration, CAnimManager::EAnimManagerEasing::QuadOut);

	// Reset cycle timer
	ComponentManiapubs_Properties.State.Timer = Now + ComponentManiapubs_Properties.Interval;
}
Void ComponentManiapubs_Reset(CMlFrame _Frame_Maniapubs) {
	Private_Cycle(_Frame_Maniapubs, ComponentManiapubs_C_Maniapub_Reset);
}
Void ComponentManiapubs_NextSlide(CMlFrame _Frame_Maniapubs) {
	Private_Cycle(_Frame_Maniapubs, ComponentManiapubs_C_Maniapub_Next);
}
Void ComponentManiapubs_PreviousSlide(CMlFrame _Frame_Maniapubs) {
	Private_Cycle(_Frame_Maniapubs, ComponentManiapubs_C_Maniapub_Previous);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	If valid, open the url associated with the slide currently displayed
Void ComponentManiapubs_SelectSlide(CMlFrame _Frame_Maniapubs) {
	declare ComponentManiapubs_K_Properties ComponentManiapubs_Properties for _Frame_Maniapubs;
	if (Http.IsValidUrl(ComponentManiapubs_Properties.State.CurrentManiapub.ExternalUrl)) {
		OpenLink(ComponentManiapubs_PluginAdverts::GetManiapubLink(ComponentManiapubs_Properties.State.CurrentManiapub), CMlScript::LinkType::ExternalBrowser);
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Update the component with the latest maniapubs available
Void ComponentManiapubs_Update(CMlFrame _Frame_Maniapubs) {
	declare ComponentManiapubs_K_Properties ComponentManiapubs_Properties for _Frame_Maniapubs;
	assert(ComponentManiapubs_Properties.IsManiapubs, "Control '"^_Frame_Maniapubs.ControlId^"' is not a maniapub component.");

	declare CMlFrame Button_Next <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_button-slide-next") as CMlFrame);
	declare CMlFrame Button_Previous <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_button-slide-previous") as CMlFrame);
	declare CMlFrame Button_Title <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_button-slide-title") as CMlFrame);
	declare CMlFrame Frame_NavigationContainer <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_frame-navigation-container") as CMlFrame);

	// Get available maniapubs
	ComponentManiapubs_Properties.State.Maniapubs = ComponentManiapubs_PluginAdverts::GetManiapubs();

	// Button visibility
	Trackmania_Button::SetVisibilityAndNavigation(Button_Previous, ComponentManiapubs_Properties.State.Maniapubs.count > 1);
	Trackmania_Button::SetVisibilityAndNavigation(Button_Title, ComponentManiapubs_Properties.State.Maniapubs.count > 0);
	Trackmania_Button::SetVisibilityAndNavigation(Button_Next, ComponentManiapubs_Properties.State.Maniapubs.count > 1);
	if (ComponentManiapubs_Properties.IsFocused && ComponentManiapubs_Properties.State.Maniapubs.count > 1) {
		ComponentManiapubs_Private_ButtonFocus(_Frame_Maniapubs, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "ComponentManiapubs_NavGroup"), Button_Title);
	}

	// Navigation
	ComponentManiapubs_Properties.IsLocked = ComponentManiapubs_Properties.State.Maniapubs.count <= 0;
	ComponentNavigation_ComponentNavigation::Lock(_Frame_Maniapubs, ComponentManiapubs_Properties.State.Maniapubs.count <= 0 || (ComponentManiapubs_Properties.State.Maniapubs.count == 1 && !Http.IsValidUrl(ComponentManiapubs_Properties.State.Maniapubs[0].ExternalUrl)));
	if (ComponentNavigation_ComponentNavigation::IsLocked(Button_Previous)) ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "left", "_");
	else ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "left", Button_Previous.ControlId);
	if (ComponentNavigation_ComponentNavigation::IsLocked(Button_Next)) ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "right", "_");
	else ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "right", Button_Next.ControlId);

	// Reset to the first maniapub
	ComponentManiapubs_Reset(_Frame_Maniapubs);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Initialize the maniapubs component
Void ComponentManiapubs_InitManiapubs(CMlFrame _Frame_Maniapubs)	{
	if (_Frame_Maniapubs == Null) return;

	declare ComponentManiapubs_K_Properties ComponentManiapubs_Properties for _Frame_Maniapubs;
	declare CMlFrame Button_Next <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_button-slide-next") as CMlFrame);
	declare CMlFrame Button_Previous <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_button-slide-previous") as CMlFrame);
	declare CMlFrame Button_Title <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_button-slide-title") as CMlFrame);
	declare CMlFrame Frame_ManiapubsWindow <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_frame-maniapub-window") as CMlFrame);
	declare CMlFrame Frame_NavigationContainer <=> (_Frame_Maniapubs.GetFirstChild("ComponentManiapubs_frame-navigation-container") as CMlFrame);

	// Initialize the Properties structure
	ComponentManiapubs_Properties = ComponentManiapubs_K_Properties {
		IsManiapubs = True,
		IsFocused = False,
		IsLocked = False,
		Interval = ComponentManiapubs_C_Maniapub_Interval,
		HAlign = ComponentManiapubs_Tools::C_HAlign_Center,
		VAlign = ComponentManiapubs_Tools::C_VAlign_Center,
		Size = <140., 90.>,
		State = ComponentManiapubs_K_State {
			LastControlFocused = Button_Previous,
			Frame_CurrentSlide = Frame_ManiapubsWindow.Controls[0] as CMlFrame,
			CurrentKey = 0,
			Timer = 0
		}
	};

	// Handle navigation inputs
	if (ComponentNavigation_ComponentNavigation::GetControlTarget(_Frame_Maniapubs, CMlScriptEvent::EMenuNavAction::Left) != Null) {
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Previous, "left", "_");
	}
	if (ComponentNavigation_ComponentNavigation::GetControlTarget(_Frame_Maniapubs, CMlScriptEvent::EMenuNavAction::Right) != Null) {
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Next, "right", "_");
	}
	if (ComponentNavigation_ComponentNavigation::GetControlTarget(_Frame_Maniapubs, CMlScriptEvent::EMenuNavAction::Up) != Null) {
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Previous, "up", "_");
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "up", "_");
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Next, "up", "_");
	}
	if (ComponentNavigation_ComponentNavigation::GetControlTarget(_Frame_Maniapubs, CMlScriptEvent::EMenuNavAction::Down) != Null) {
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Previous, "down", "_");
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Title, "down", "_");
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, Frame_NavigationContainer, Button_Next, "down", "_");
	}
	ComponentNavigation_ComponentNavigation::EnableInputs(_Frame_Maniapubs, False);

	// First update of the component after initialization
	ComponentManiapubs_Update(_Frame_Maniapubs);
}

***MainInit***
***
Page.GetClassChildren("ComponentManiapubs_frame-container-maniapubs", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare CMlFrame Frame_ManiapubContainer = (Control as CMlFrame);
	ComponentManiapubs_InitManiapubs(Frame_ManiapubContainer.Parent);
	ComponentManiapubs_G_Maniapubs.add(Frame_ManiapubContainer.Parent);
}
***

***MainLoop***
***
/* Maniapub automatic cycling */
if (ComponentManiapubs_G_Maniapubs.count > 0) {
	foreach (Maniapub in ComponentManiapubs_G_Maniapubs) {
		declare ComponentManiapubs_K_Properties ComponentManiapubs_Properties for Maniapub;
		if (ComponentManiapubs_Properties.Interval != 0 && ComponentManiapubs_Properties.State.Maniapubs.count > 1 && Now > ComponentManiapubs_Properties.State.Timer) {
			Private_Cycle(Maniapub, ComponentManiapubs_C_Maniapub_Next);
		}
	}
}

/* Navigation events */
foreach (Event in ComponentNavigation_ComponentNavigation::GetPendingEvents(This)) {
	switch (Event.Type) {
		case ComponentNavigation_ComponentNavigation::C_EventType_NavigateInput: {
			if (ComponentNavigation_ComponentNavigation::IsEventFromNestedContainer(This, Event.Container) && Event.Container.ControlId == "ComponentManiapubs_frame-navigation-container") {
				assert(ComponentManiapubs_IsManiapubs(Event.Container.Parent.Parent), "The manialink has been modified, we do not point to the right frame anymore");
				declare CMlFrame Frame_Maniapub = Event.Container.Parent.Parent;
				if (ComponentManiapubs_IsFocused(Frame_Maniapub)) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						switch (Event.To.ControlId) {
							case "ComponentManiapubs_button-slide-previous": ComponentManiapubs_PreviousSlide(Frame_Maniapub);
							case "ComponentManiapubs_button-slide-title": ComponentManiapubs_SelectSlide(Frame_Maniapub);
							case "ComponentManiapubs_button-slide-next": ComponentManiapubs_NextSlide(Frame_Maniapub);
						}
					} else if (
							Event.From != Null &&
							Event.From == Event.To &&
							Event.From.HasClass("ComponentManiapubs_leave-maniapub")
						) {
							ComponentNavigation_ComponentNavigation::EnableInputs(Frame_Maniapub, True);
							ComponentNavigation_ComponentNavigation::ApplyInput(This, Frame_Maniapub, Event.Input, Event.UserIndex, []);
							ComponentNavigation_ComponentNavigation::EnableInputs(Frame_Maniapub, False);
					} else {
						ComponentManiapubs_Private_ButtonFocus(Frame_Maniapub, Event.From, Event.To);
					}
				}
			}
		}
		case ComponentNavigation_ComponentNavigation::C_EventType_NavigateMouse: {
			if (ComponentNavigation_ComponentNavigation::IsEventFromNestedContainer(This, Event.Container) && Event.Container.ControlId == "ComponentManiapubs_frame-navigation-container") {
				assert(ComponentManiapubs_IsManiapubs(Event.Container.Parent.Parent), "The manialink has been modified, we do not point to the right frame anymore");
				declare CMlFrame Frame_Maniapub = Event.Container.Parent.Parent;
				if (ComponentManiapubs_IsFocused(Frame_Maniapub)) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						switch (Event.To.ControlId) {
							case "ComponentManiapubs_button-slide-previous": ComponentManiapubs_PreviousSlide(Frame_Maniapub);
							case "ComponentManiapubs_button-slide-title": ComponentManiapubs_SelectSlide(Frame_Maniapub);
							case "ComponentManiapubs_button-slide-next": ComponentManiapubs_NextSlide(Frame_Maniapub);
						}
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						ComponentManiapubs_Private_ButtonFocus(Frame_Maniapub, Event.From, Event.To);
					}
				}
			}
		}
	}
}
***
		
// */
// @Component end component-maniapubs

// @Component start pause-menu-online
// /*

// Use when we want to lock the Scores Table button in the pause menu
Void PauseMenuOnline_SetScoresTableButtonLocked(Boolean _IsLocked, Text _LockId) {
	declare Text[] PauseMenuOnline_ScoresTableButton_IsLocked for UI;
	if (!_IsLocked) {
		PauseMenuOnline_ScoresTableButton_IsLocked.remove(_LockId);
	} else if (!PauseMenuOnline_ScoresTableButton_IsLocked.exists(_LockId)) {
		PauseMenuOnline_ScoresTableButton_IsLocked.add(_LockId);
	}
}

// Check if the scores table button should be locked
Boolean PauseMenuOnline_IsScoresTableButtonLocked() {
	declare Text[] PauseMenuOnline_ScoresTableButton_IsLocked for UI;
	declare netread Boolean Net_PauseMenuOnline_ScoresTableButton_IsLocked for Teams[0];
	return (PauseMenuOnline_ScoresTableButton_IsLocked.count > 0) || Net_PauseMenuOnline_ScoresTableButton_IsLocked;
}
		
// */
// @Component end pause-menu-online

// @Component start component-checkbox
// /*

***MainInit***
***
Trackmania_Checkbox::MainInit(This);
***
		
// */
// @Component end component-checkbox

// @Component start component-trackmania-pop-up-background-2
// /*

***MainInit***
***
Trackmania_PopUpBackground2::MainInit(This);
***

***MainStart***
***
Trackmania_PopUpBackground2::MainStart(This);
***

***MainLoop***
***
Trackmania_PopUpBackground2::MainLoop(This);
***
		
// */
// @Component end component-trackmania-pop-up-background-2

// @Component start component-cmgame-selector
// /*

***MainInit***
***
CMGame_Selector::MainInit(This);
***

***MainStart***
***
CMGame_Selector::MainStart(This);
***

***MainLoop***
***
CMGame_Selector::MainLoop(This);
***
		
// */
// @Component end component-cmgame-selector

// @Component start component-textfield
// /*

***MainInit***
***
CMGame_TextField::MainInit(This);
***

***MainStart***
***
CMGame_TextField::MainStart(This);
***

***MainLoop***
***
CMGame_TextField::MainLoop(This);
***
		
// */
// @Component end component-textfield

// @Component start component-popupmultichoice
// /*

***MainInit***
***
Trackmania_PopUpMultiChoice::MainInit(This);
***

***MainStart***
***
Trackmania_PopUpMultiChoice::MainStart(This);
***

***MainLoop***
***
Trackmania_PopUpMultiChoice::MainLoop(This);
***
		
// */
// @Component end component-popupmultichoice

// @Component start component-transition
// /*

***MainInit***
***
CMGame_Transition::MainInit(This);
***

***MainLoop***
***
CMGame_Transition::MainLoop(This);
***
		
// */
// @Component end component-transition

// @Component start component-form-select
// /*

***MainInit***
***
CMGame_FormSelect::MainInit(This);
***

***MainStart***
***
CMGame_FormSelect::MainStart(This);
***

***MainLoop***
***
CMGame_FormSelect::MainLoop(This);
***
		
// */
// @Component end component-form-select

// @Component start component-popupreportsystem
// /*

***MainInit***
***
ComponentPopUpReportSystem::MainInit(This);
***

***MainStart***
***
ComponentPopUpReportSystem::MainStart(This);
***

***MainLoop***
***
ComponentPopUpReportSystem::MainLoop(This);
***
		
// */
// @Component end component-popupreportsystem

// @Component start lib-campaign-store
// /*

***MainInit***
***
Trackmania_CampaignStore::MainInit(This);
***

***MainLoop***
***
Trackmania_CampaignStore::MainLoop(This);
***

// */
// @Component end lib-campaign-store

// @Component start component-playerroyalvictories
// /*

***MainInit***
***
Trackmania_PlayerRoyalVictories::MainInit(This);
***
		
// */
// @Component end component-playerroyalvictories

// @Component start component-playerrank
// /*

declare LibStructuresMatchmaking_K_Division[Text] ComponentPlayerRank_G_Divisions;

// Mandatory function to call to use the PlayerRank component
Void ComponentPlayerRank_SetDivisions(LibStructuresMatchmaking_K_Division[Text] _Divisions) {
	ComponentPlayerRank_G_Divisions.clear();
	ComponentPlayerRank_G_Divisions = _Divisions;
}

Integer ComponentPlayerRank_GetRankNumberFromDivisionId(Text _DivisionId) {
	declare Integer Rank = -1;
	if (ComponentPlayerRank_G_Divisions.existskey(_DivisionId)) Rank = ComponentPlayerRank_G_Divisions[_DivisionId].Position;
	return Rank;
}

Void ComponentPlayerRank_UpdatePlayerRank(CMlFrame _Frame_PlayerRank, Integer _NewRank, Integer _InitialRank) {
	declare CMlQuad Quad_PlayerRankBg <=> (_Frame_PlayerRank.GetFirstChild("ComponentPlayerRank_quad-rank") as CMlQuad);

	Quad_PlayerRankBg.ChangeImageUrl(ComponentPlayerRank_C_Rank_Icons.get(_NewRank, ""));
	if (_InitialRank >= 0) {
		AnimMgr.Flush(_Frame_PlayerRank);
		AnimMgr.Add(_Frame_PlayerRank, "<anim scale=\"1.35\" rot=\""^ComponentPlayerRank_ML::Rand(-4., 4.)^"\"/>", ComponentPlayerRank_C_RankAnim_Duration/4, CAnimManager::EAnimManagerEasing::QuadIn);
		AnimMgr.Add(_Frame_PlayerRank, "<anim scale=\"1.\" rot=\"0.\"/>", Now + ComponentPlayerRank_C_RankAnim_Duration/4, 3*ComponentPlayerRank_C_RankAnim_Duration/4, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void ComponentPlayerRank_UpdatePlayerRank(CMlFrame _Frame_PlayerRank, Integer _NewRank) {
	ComponentPlayerRank_UpdatePlayerRank(_Frame_PlayerRank, _NewRank, -1);
}

Void ComponentPlayerRank_UpdatePlayerRank(CMlFrame _Frame_PlayerRank, Text _NewDivisionId) {
	declare Integer NewRank = ComponentPlayerRank_GetRankNumberFromDivisionId(_NewDivisionId);
	ComponentPlayerRank_UpdatePlayerRank(_Frame_PlayerRank, NewRank, -1);
}



// */
// @Component end component-playerrank

// @Component start component-cmgame-expendable-asset
// /*

***MainInit***
***
CMGame_ExpendableAsset::MainInit(This);
***

***MainStart***
***
CMGame_ExpendableAsset::MainStart(This);
***

***MainLoop***
***
CMGame_ExpendableAsset::MainLoop(This);
***
		
// */
// @Component end component-cmgame-expendable-asset

// @Component start component-trackmania-expendable-asset
// /*

***MainInit***
***
CMGame_ExpendableAsset::Trackmania_MainInit(This);
***
		
// */
// @Component end component-trackmania-expendable-asset

// @Component start component-navigationtabs
// /*

***MainInit***
***
Trackmania_NavigationTabs::MainInit(This);
***

***MainStart***
***
Trackmania_NavigationTabs::MainStart(This);
***

***MainLoop***
***
Trackmania_NavigationTabs::MainLoop(This);
***
		
// */
// @Component end component-navigationtabs

// @Component start component-cmgame-player-name
// /*

***MainInit***
***
CMGame_PlayerName::MainInit(This);
***

***MainLoop***
***
CMGame_PlayerName::MainLoop(This);
***
		
// */
// @Component end component-cmgame-player-name

// @Component start component-profileplayerinfo
// /*

declare ComponentProfilePlayerInfo_K_Event[] ComponentProfilePlayerInfo_PendingEvents;
declare ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_G_State;
declare Ident ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs;
declare Ident ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle;
declare Ident ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank;

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_UpdateSkinDisplayed(ComponentProfilePlayerInfo_K_State _State) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	if (State.Scene.SceneId != NullId && !ComponentProfilePlayerInfo_MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)) {
		if (State.Scene.CurrentItemId != NullId) {
			MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentItemId);
			State.Scene.CurrentItemId = NullId;
		}
		if (State.Scene.CurrentExtraItemId != NullId) {
			MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentExtraItemId);
			State.Scene.CurrentExtraItemId = NullId;
		}

		declare Text CarSkinUrl = "";
		declare Text CarSkinName = "Skins/Models/CarSport/Stadium_World.zip";
		if (State.PlayerProfile.CarSkin.Name != "") {
			CarSkinName = State.PlayerProfile.CarSkin.Name;
			CarSkinUrl = State.PlayerProfile.CarSkin.FileUrl;
		} else if (State.PlayerProfile.Zone.CarSkinName != "") {
			CarSkinName = State.PlayerProfile.Zone.CarSkinName;
			CarSkinUrl = State.PlayerProfile.Zone.CarSkinUrl;
		}
		State.Scene.CurrentItemId = MenuSceneMgr.ItemCreate(
			State.Scene.SceneId,
			"CarSport",
			CarSkinName,
			CarSkinUrl,
			State.PlayerProfile.CarSkin.PrestigeOptions
		);
		if (State.Scene.CurrentItemId != NullId) {
			MenuSceneMgr.ItemSetPlayerState(
				State.Scene.SceneId,
				State.Scene.CurrentItemId,
				State.PlayerProfile.SkinLightColor,
				<1., 1., 1.>,
				"",
				State.PlayerProfile.Trigram
			);
			MenuSceneMgr.ItemSetPivot(State.Scene.SceneId, State.Scene.CurrentItemId, <0., 0., 0.2734>);

			declare Text PilotSkinName = "Skins/Models/CharacterPilot/Stadium.zip";
			declare Text PilotSkinUrl = "";
			declare Text PilotSkinCharacterOptions = "";
			if (State.PlayerProfile.PilotSkin.Name != "") {
				PilotSkinName = State.PlayerProfile.PilotSkin.Name;
				PilotSkinUrl = State.PlayerProfile.PilotSkin.FileUrl;
				PilotSkinCharacterOptions = State.PlayerProfile.PilotSkin.CharacterOptions;
			} else if (State.PlayerProfile.Zone.PilotSkinName != "") {
				PilotSkinName = State.PlayerProfile.Zone.PilotSkinName;
				PilotSkinUrl = State.PlayerProfile.Zone.PilotSkinUrl;
			}
			State.Scene.CurrentExtraItemId = MenuSceneMgr.ItemCreate(
				State.Scene.SceneId,
				"CharacterPilot",
				PilotSkinName,
				PilotSkinUrl,
				PilotSkinCharacterOptions
			);
			if (State.Scene.CurrentExtraItemId != NullId) {
				MenuSceneMgr.ItemSetPlayerState(
					State.Scene.SceneId,
					State.Scene.CurrentExtraItemId,
					State.PlayerProfile.SkinLightColor,
					<1., 1., 1.>,
					"",
					State.PlayerProfile.Trigram
				);
				MenuSceneMgr.ItemSetPivot(State.Scene.SceneId, State.Scene.CurrentExtraItemId, <-1., 0., 0.>);
			}
		}
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Display and create the 3D scene or destroy it
ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_Display3DScene(ComponentProfilePlayerInfo_K_State _State, Boolean _IsVisible) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	if (_IsVisible) {
		if (State.Scene.SceneId == NullId) {
			State.Scene.SceneId = MenuSceneMgr.SceneCreate("Empty");
		}
		ComponentProfilePlayerInfo_MenuSceneManager::PageSynchronizeScene(Page, LocalUser);
		if (State.Scene.SceneId != NullId) {
			MenuSceneMgr.CameraSetLocation(State.Scene.SceneId, <-0., 3.2, -11.7>, 12., 39.);
			MenuSceneMgr.PlaneReflectEnable(State.Scene.SceneId, 0.63, Null, Null, Null, Null, 0.);
		}
		State = ComponentProfilePlayerInfo_Private_UpdateSkinDisplayed(State);
	} else {
		if (State.Scene.SceneId != NullId) {
			if (State.Scene.CurrentItemId != NullId) {
				MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentItemId);
				State.Scene.CurrentItemId = NullId;
			}
			if (State.Scene.CurrentExtraItemId != NullId) {
				MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentExtraItemId);
				State.Scene.CurrentExtraItemId = NullId;
			}
			MenuSceneMgr.SceneDestroy(State.Scene.SceneId);
			State.Scene.SceneId = NullId;
		}
	}

	return State;
}

Void ComponentProfilePlayerInfo_Private_ShowTrophyHistoryEntry(CMlFrame _Frame_TrophyHistoryEntry, ComponentProfilePlayerInfo_K_TrophyHistoryEntry _TrophyHistoryEntry) {
	declare CMlLabel Label_Description <=> (_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-description") as CMlLabel);
	declare CMlLabel Label_Date <=> (_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-date") as CMlLabel);
	declare CMlLabel Label_Amount <=> (_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-amount") as CMlLabel);
	Label_Description.Value = _TrophyHistoryEntry.Description;
	ComponentProfilePlayerInfo_Tools::FitLabelValue(Label_Description, 2., 0.5, 0.25);
	Label_Date.Value = _TrophyHistoryEntry.Date;
	Label_Amount.Value = ""^_TrophyHistoryEntry.Amount;
	// Trophies are taken into account for the ranking during 1 year
	if (ComponentProfilePlayerInfo_TiL::GetLocalDelta_Years(ComponentProfilePlayerInfo_TiL::GetCurrent(), ""^_TrophyHistoryEntry.TimeStamp) >= 1) {
		Label_Description.Opacity = 0.6;
		Label_Date.Opacity = 0.6;
		Label_Amount.Opacity = 0.6;
	} else {
		Label_Description.Opacity = 1.;
		Label_Date.Opacity = 1.;
		Label_Amount.Opacity = 1.;
	}
	_Frame_TrophyHistoryEntry.Visible = True;
}

Void ComponentProfilePlayerInfo_Private_ShowTrophyHistoryEntryLoading(CMlFrame _Frame_TrophyHistoryEntry) {
	declare CMlLabel Label_Description <=> (_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-description") as CMlLabel);
	Label_Description.Value = "|Data|Retrieving";
	ComponentProfilePlayerInfo_Tools::FitLabelValue(Label_Description, 2., 0.5, 0.25);
	(_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-date") as CMlLabel).Value = "";
	(_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-amount") as CMlLabel).Value = "";
	_Frame_TrophyHistoryEntry.Visible = True;
}

Void ComponentProfilePlayerInfo_Private_HideTrophyHistoryEntry(CMlFrame _Frame_TrophyHistoryEntry) {
	_Frame_TrophyHistoryEntry.Visible = False;
}

Void ComponentProfilePlayerInfo_Private_PlayPagerAnim(CMlFrame _Button_Pager) {
	AnimMgr.Flush(_Button_Pager);
	_Button_Pager.RelativeScale = 1.;
	AnimMgr.Add(_Button_Pager, "<a scale=\"1.1\" />", 50, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.AddChain(_Button_Pager, "<a scale=\"1\" />", 100, CAnimManager::EAnimManagerEasing::QuadOut);
}

Void ComponentProfilePlayerInfo_Private_SendCloseEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_Close,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void ComponentProfilePlayerInfo_Private_SendPrevPlayerEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_Private_PlayPagerAnim(_State.Controls.Button_PrevPlayer);
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_PrevPlayer,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void ComponentProfilePlayerInfo_Private_SendNextPlayerEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_Private_PlayPagerAnim(_State.Controls.Button_NextPlayer);
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_NextPlayer,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void ComponentProfilePlayerInfo_Private_SendEditPlayerEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_EditPlayer,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void ComponentProfilePlayerInfo_Private_SendGarageEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_Garage,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void ComponentProfilePlayerInfo_Private_SendMyAccessInfoEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_MyAccessInfo,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}

Void ComponentProfilePlayerInfo_Private_EnableUnderline(CMlControl _Control, Boolean _Enabled) {
	if (_Control.Parent != Null) {
		declare CMlControl Control_Underline <=> _Control.Parent.GetFirstChild("ComponentProfilePlayerInfo_quad-underline");
		if (Control_Underline != Null) {
			if (_Enabled) {
				AnimMgr.Add(Control_Underline, "<a opacity=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(Control_Underline, "<a opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}
}

Boolean ComponentProfilePlayerInfo_Private_IsBrowsingTrophiesHistory(ComponentProfilePlayerInfo_K_State _State) {
	return (
		_State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_Trophies &&
		_State.SelectedTrophyKey >= 0 &&
		!ComponentNavigation_ComponentNavigation::IsLocked(_State.Controls.Frame_TrophiesList)
	);
}

Void ComponentProfilePlayerInfo_Private_UpdateControllerInfo(ComponentProfilePlayerInfo_K_State _State, CMlControl _Focus) {
	declare Text[Text] Buttons;
	if (_Focus != Null) {
		if (ComponentProfilePlayerInfo_Private_IsBrowsingTrophiesHistory(_State)) {
			Buttons["up"] = ""; //< empty on purpose
			//L16N [Profile] Browse the trophies history of the player
			Buttons["down"] = _("|History|Browse");
			Buttons["B"] = _("Back");
		} else if (_Focus.HasClass("ComponentProfilePlayerInfo_controller-info-pager")) {
			Buttons["left"] = ""; //< empty on purpose
			//L16N [Profile] Browse the rankings of the player
			Buttons["right"] = _("|Rankings|Browse");
		} else {
			Buttons["A"] = _("Select");
		}
	}

	if (This is CMlScriptIngame) {
		ComponentMenuButtonList_SetButtons(_State.Controls.Frame_ButtonList, Buttons);
	} else {
		ComponentProfilePlayerInfo_ControllerInfo::SetButtons(Buttons);
	}
}

Void ComponentProfilePlayerInfo_Private_FocusUnsetPage(CMlQuad _Quad_Unset, Boolean _Focused) {
	if (_Focused) {
		_Quad_Unset.Opacity = 1.;
		_Quad_Unset.Colorize = <1., 0., 0.>;
	} else {
		_Quad_Unset.Opacity = 0.5;
		_Quad_Unset.Colorize = <1., 1., 1.>;
	}
}

Void ComponentProfilePlayerInfo_Private_FocusTrophyKey(ComponentProfilePlayerInfo_K_State _State, Integer _FocusedTrophyKey, Integer _SelectedTrophyKey, Boolean _TrophiesListIsFocused) {
	foreach (ControlKey => Control in _State.Controls.Frame_TrophiesList.Controls) {
		declare CMlFrame Frame_Trophy <=> (Control as CMlFrame);
		declare CMlQuad Quad_TrophyBG <=> (Frame_Trophy.GetFirstChild("ComponentProfilePlayerInfo_quad-trophy-bg") as CMlQuad);
		declare CMlQuad Quad_TrophyIcon <=> (Frame_Trophy.GetFirstChild("ComponentProfilePlayerInfo_quad-trophy-icon") as CMlQuad);
		declare CMlLabel Label_TrophyCount <=> ((Control as CMlFrame).GetFirstChild("ComponentProfilePlayerInfo_label-trophy-count") as CMlLabel);
		declare CMlQuad Quad_TrophyFocus <=> (Frame_Trophy.GetFirstChild("ComponentProfilePlayerInfo_quad-trophy-focus") as CMlQuad);

		declare Real TrophyBGOpacity = 0.2;
		declare Real TrophyCountOpacity = 0.8;
		declare Real TrophyIconOpacity = 0.8;
		declare Real TrophyFocusOpacity = 0.;
		if (_State.PlayerProfile.AccountId == LocalUser.WebServicesUserId) {
			if (ControlKey == _SelectedTrophyKey) {
				TrophyBGOpacity = 0.6;
				TrophyCountOpacity = 1.;
				TrophyIconOpacity = 1.;
				TrophyFocusOpacity = 1.;
			} else if (_TrophiesListIsFocused && ControlKey == _FocusedTrophyKey) {
				Label_TrophyCount.TTS_Focus();
				TrophyBGOpacity = 0.6;
				TrophyCountOpacity = 1.;
				TrophyIconOpacity = 1.;
			}
		}

		declare Text TrophyCountColor = "6EFAA0";
		if (
			(_State.PlayerProfile.AccountId == LocalUser.WebServicesUserId && ControlKey == _SelectedTrophyKey) ||
			(!_State.TrophiesCount.existskey(_State.Controls.Frame_TrophiesList.Controls.count - ControlKey) || _State.TrophiesCount[_State.Controls.Frame_TrophiesList.Controls.count - ControlKey] <= 0)
		) {
			TrophyCountColor = "FFFFFF";
		}

		AnimMgr.Flush(Quad_TrophyBG);
		AnimMgr.Flush(Quad_TrophyIcon);
		AnimMgr.Flush(Label_TrophyCount);
		AnimMgr.Flush(Quad_TrophyFocus);
		AnimMgr.Add(Quad_TrophyBG, "<anim opacity=\""^TrophyBGOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_TrophyIcon, "<anim opacity=\""^TrophyIconOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Label_TrophyCount, "<anim textcolor=\""^TrophyCountColor^"\" opacity=\""^TrophyCountOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_TrophyFocus, "<anim opacity=\""^TrophyFocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void ComponentProfilePlayerInfo_Private_FocusTrophiesList(ComponentProfilePlayerInfo_K_State _State, Boolean _TrophiesListIsFocused) {
	ComponentProfilePlayerInfo_Private_FocusTrophyKey(_State, _State.FocusedTrophyKey, _State.SelectedTrophyKey, _TrophiesListIsFocused);
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetFocusedTrophy(ComponentProfilePlayerInfo_K_State _State, Integer _TrophyKey) {
	declare Integer NewTrophyKey = ComponentProfilePlayerInfo_ML::Clamp(_TrophyKey, 0, _State.Controls.Frame_TrophiesList.Controls.count - 1);
	if (_State.FocusedTrophyKey == NewTrophyKey) return _State;

	declare ComponentProfilePlayerInfo_K_State State = _State;

	declare CMlControl Focused_Control = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	declare Boolean TrophiesListIsFocused = (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList);
	State.FocusedTrophyKey = NewTrophyKey;
	ComponentProfilePlayerInfo_Private_FocusTrophiesList(State, TrophiesListIsFocused);

	return State;
}

Void ComponentProfilePlayerInfo_Private_TTSContextUpdate(ComponentProfilePlayerInfo_K_State _State, CMlFrame _Frame_Container) {
	if (_Frame_Container != Null && _Frame_Container.HasClass("ComponentProfilePlayerInfo_controller-info-pager")) {
		if (ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle == NullId) ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle = ParentApp.TTS_Context_Enter(ComponentProfilePlayerInfo_C_TTSContextLevel_Section);
		if (ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank == NullId) ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank = ParentApp.TTS_Context_Enter(ComponentProfilePlayerInfo_C_TTSContextLevel_Section);

		if (_Frame_Container.ControlId == "ComponentProfilePlayerInfo_frame-info-campaign-ranking") {
			ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle, _State.Controls.Label_TopCampaignName);
			if (_State.Controls.Label_TopText.Visible) {
				ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank, ComponentProfilePlayerInfo_TL::GetTranslatedText(ComponentProfilePlayerInfo_TL::Compose("%1 %2 %3", "|Rank|Top", _State.Controls.Label_TopCampaignRank.Value, _State.Controls.Label_TopCampaignZone.Value)), True);
			} else {
				ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank, _State.Controls.Label_TopCampaignZone);
			}
		} else if (_Frame_Container.ControlId == "ComponentProfilePlayerInfo_frame-trophies-ranking" || _Frame_Container.ControlId == "ComponentProfilePlayerInfo_frame-info-ranking") {
			ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle, "Global rank", True);
			ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank, ComponentProfilePlayerInfo_TL::Compose("%1 %2 %3", "|Rank|Top", _State.Controls.Label_TrophiesGlobalRankingPosition.Value, _State.Controls.Label_TrophiesGlobalRankingZone.Value), True);
		}

		ParentApp.TTS_Context_Read(ComponentProfilePlayerInfo_C_TTSContextLevel_Section);
	} else {
		ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle = ParentApp.TTS_Context_Leave(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle);
		ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank = ParentApp.TTS_Context_Leave(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank);
	}
}
Void ComponentProfilePlayerInfo_Private_TTSContextUpdate(ComponentProfilePlayerInfo_K_State _State, CMlControl _Control) {
	if (_Control != Null && _Control.HasClass("ComponentProfilePlayerInfo_focus-opacity-element") && _Control.Parent != Null && _Control.Parent.Parent != Null) {
		ComponentProfilePlayerInfo_Private_TTSContextUpdate(_State, _Control.Parent.Parent);
	} else {
		ComponentProfilePlayerInfo_Private_TTSContextUpdate(_State, _Control as CMlFrame);
	}
}

Void ComponentProfilePlayerInfo_Private_FocusOpacityContainerUpdate(ComponentProfilePlayerInfo_K_State _State, CMlFrame _Frame_Container, Boolean _Focused) {
	if (_Frame_Container != Null) {
		Page.GetClassChildren("ComponentProfilePlayerInfo_focus-opacity-element", _Frame_Container, True);
		foreach (Control in Page.GetClassChildren_Result) {
			if (_Focused && Control.DataAttributeExists("ComponentProfilePlayerInfo_opacity-focus")) {
				if (Trackmania_Button::IsButton(Control)) {
					Trackmania_Button::SetOpacityUnfocus(This, (Control as CMlFrame), ComponentProfilePlayerInfo_TL::ToReal(Control.DataAttributeGet("ComponentProfilePlayerInfo_opacity-focus")));
				} else {
					AnimMgr.Flush(Control);
					AnimMgr.Add(Control, "<anim opacity=\""^Control.DataAttributeGet("ComponentProfilePlayerInfo_opacity-focus")^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			} else if (!_Focused && Control.DataAttributeExists("ComponentProfilePlayerInfo_opacity-unfocus")) {
				if (Trackmania_Button::IsButton(Control)) {
					Trackmania_Button::SetOpacityUnfocus(This, (Control as CMlFrame), ComponentProfilePlayerInfo_TL::ToReal(Control.DataAttributeGet("ComponentProfilePlayerInfo_opacity-unfocus")));
				} else {
					AnimMgr.Flush(Control);
					AnimMgr.Add(Control, "<anim opacity=\""^Control.DataAttributeGet("ComponentProfilePlayerInfo_opacity-unfocus")^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			}
		}
	}
}

Void ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_K_State _State, CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		ComponentNavigation_ComponentNavigation::Unfocus(This, _From);

		if (Trackmania_Button::IsButton(_From)) {
			Trackmania_Button::Unfocus(This, (_From as CMlFrame));
		} else if (CMGame_Scroll::IsScroll(_From)) {
			CMGame_Scroll::Unfocus(This, (_From as CMlFrame));
		} else if (CMGame_ExpendableButton::IsButton(_From)) {
			CMGame_ExpendableButton::Unfocus(This, (_From as CMlFrame));
		} else if (_From.HasClass("ComponentProfilePlayerInfo_focus-opacity-container")) {
			ComponentProfilePlayerInfo_Private_FocusOpacityContainerUpdate(_State, (_From as CMlFrame), False);
		} else if (_From.ControlId == _State.Controls.Frame_TrophiesList.ControlId) {
			ComponentProfilePlayerInfo_Private_FocusTrophiesList(_State, False);
		}
	}

	if (_To != Null) {
		ComponentNavigation_ComponentNavigation::Focus(This, _To);

		if (Trackmania_Button::IsButton(_To)) {
			Trackmania_Button::Focus(This, (_To as CMlFrame));
		} else if (CMGame_Scroll::IsScroll(_To)) {
			CMGame_Scroll::Focus(This, (_To as CMlFrame));
		} else if (CMGame_ExpendableButton::IsButton(_To)) {
			CMGame_ExpendableButton::Focus(This, (_To as CMlFrame));
		} else if (_To.HasClass("ComponentProfilePlayerInfo_focus-opacity-container")) {
			ComponentProfilePlayerInfo_Private_FocusOpacityContainerUpdate(_State, (_To as CMlFrame), True);
			ComponentProfilePlayerInfo_Private_TTSContextUpdate(_State, _To as CMlFrame);
		} else if (_To.ControlId == _State.Controls.Frame_TrophiesList.ControlId) {
			ComponentProfilePlayerInfo_Private_FocusTrophiesList(_State, True);
		}
	}

	ComponentProfilePlayerInfo_Private_UpdateControllerInfo(_State, _To);
}
Void ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_K_State _State, CMlControl _To) {
	assert(_To != Null, "Use Private_Focus(K_State _State, CMlControl _From, CMlControl _To) to focus Null");
	declare Text TargetNavGroup = ComponentNavigation_ComponentNavigation::GetControlGroupName(_To);
	ComponentProfilePlayerInfo_Private_Focus(_State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, TargetNavGroup), _To);
}

Void ComponentProfilePlayerInfo_Anim_FadeInOut(CMlQuad _Quad, Boolean _FadeIn) {
	AnimMgr.Flush(_Quad);
	if (_FadeIn) {
		AnimMgr.Add(_Quad, "<a opacity=\"1.\" />", 215, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Quad, "<a opacity=\"0.\" />", 215, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_UpdateTabDisplayed(ComponentProfilePlayerInfo_K_State _State, Integer _NewTabDisplayed) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	// Save control focused in the old tab
	State.TabsFocuses[State.TabDisplayed] = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");

	State.TabDisplayed = _NewTabDisplayed;
	State.Controls.Frame_Trophies.Visible = State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_Trophies;
	State.Controls.Frame_RankedStats.Visible = State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_Ranked;
	State.Controls.Frame_RoyalStats.Visible = State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_Royal;
	State.Controls.Frame_MainProfile.Visible = State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_General;
	State.Controls.Frame_CurrentSkin.Visible = State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_General;

	// Display the car only when the profile is displayed and the general tab selected
	State = ComponentProfilePlayerInfo_Private_Display3DScene(State, State.Enabled && State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_General);
	ComponentProfilePlayerInfo_Anim_FadeInOut(State.Controls.Quad_Lights, State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_General);

	if (Trackmania_NavigationTabs::GetCurrentTab(State.Controls.NavigationTabs_Categories) != State.TabDisplayed) {
		Trackmania_NavigationTabs::UpdateCurrentTab(This, State.Controls.NavigationTabs_Categories, State.TabDisplayed, False);
	}

	// Update navigation and report context
	declare Text UpTargetControlId = "";
	switch (State.TabDisplayed) {
		case ComponentProfilePlayerInfo_C_TabDisplayed_General: {
			UpTargetControlId = "ComponentProfilePlayerInfo_frame-info-campaign-ranking";
		}
		case ComponentProfilePlayerInfo_C_TabDisplayed_Trophies: {
			UpTargetControlId = "ComponentProfilePlayerInfo_frame-trophies-list";
		}
		case ComponentProfilePlayerInfo_C_TabDisplayed_Royal: {
			UpTargetControlId = "";
		}
		case ComponentProfilePlayerInfo_C_TabDisplayed_Ranked: {
			UpTargetControlId = "";
		}
	}
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_Back, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_MyAccess, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_UpdateZone, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_Garage, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_FirstPartyProfile, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_UbisoftConnectProfile, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_Report, "up", UpTargetControlId);

	// Select a control to focus
	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (
		ComponentProfilePlayerInfo_Private_IsBrowsingTrophiesHistory(State) &&
		!ComponentNavigation_ComponentNavigation::IsLocked(State.Controls.Frame_TrophiesList)
	) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Frame_TrophiesList);
		State = ComponentProfilePlayerInfo_Private_SetFocusedTrophy(State, State.SelectedTrophyKey);
	} else if (
		(FocusedControl == Null || !FocusedControl.HasClass("ComponentProfilePlayerInfo_bottom-button")) &&
		State.TabsFocuses.existskey(State.TabDisplayed) &&
		State.TabsFocuses[State.TabDisplayed] != Null &&
		!ComponentNavigation_ComponentNavigation::IsLocked(State.TabsFocuses[State.TabDisplayed])
	) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.TabsFocuses[State.TabDisplayed]);
	} else if (
		FocusedControl == Null ||
		!FocusedControl.HasClass("ComponentProfilePlayerInfo_bottom-button") ||
		ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)
	) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

Void ComponentProfilePlayerInfo_Private_SetZoneFlag(ComponentProfilePlayerInfo_K_State _State, Text _FlagUrl) {
	_State.Controls.Quad_PlayerCardFlag.ImageUrl = _FlagUrl;
}

Void ComponentProfilePlayerInfo_Private_SetPlayerName(ComponentProfilePlayerInfo_K_State _State, Text _PlayerName, Text _ClubTag, Boolean _IsFirstPartyDisplayName, Boolean _IsFakeUser) {
	CMGame_PlayerName::SetName(This, _State.Controls.PlayerName_PlayerCardName, _PlayerName, _ClubTag, _IsFirstPartyDisplayName, !_IsFakeUser);
}

Text ComponentProfilePlayerInfo_Private_GetTrophyImage(Integer _Trophy) {
	declare TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_base_00.dds";
	switch (_Trophy) {
		case 0: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_base_00.dds";
		case 1: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_bronze_1.dds"; //< T1 trophy
		case 2: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_bronze_2.dds";
		case 3: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_bronze_3.dds";
		case 4: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_silver_1.dds";
		case 5: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_silver_2.dds";
		case 6: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_silver_3.dds";
		case 7: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_gold_1.dds";
		case 8: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_gold_2.dds";
		case 9: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_gold_3.dds"; //< T9 trophy
	}
	return TrophyImage;
}
Text ComponentProfilePlayerInfo_Private_GetTrophyImageSmall(Integer _Trophy) {
	declare TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_base_00.dds";
	switch (_Trophy) {
		case 0: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_base_00.dds";
		case 1: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_bronze_1.dds"; //< T1 trophy
		case 2: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_bronze_2.dds";
		case 3: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_bronze_3.dds";
		case 4: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_silver_1.dds";
		case 5: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_silver_2.dds";
		case 6: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_silver_3.dds";
		case 7: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_gold_1.dds";
		case 8: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_gold_2.dds";
		case 9: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_gold_3.dds"; //< T9 trophy
	}
	return TrophyImage;
}

Integer ComponentProfilePlayerInfo_GetBestTrophy(Integer[Integer] _TrophiesCount) {
	declare Integer BestTrophy = 0;
	foreach (Trophy => TrophyCount in _TrophiesCount) {
		if (TrophyCount > 0 && Trophy > BestTrophy) BestTrophy = Trophy;
	}
	return BestTrophy;
}

Void ComponentProfilePlayerInfo_Private_UpdateTopTrophyCount(ComponentProfilePlayerInfo_K_State _State, Integer[Integer] _TrophiesCount) {
	declare Integer BestTrophy = ComponentProfilePlayerInfo_GetBestTrophy(_TrophiesCount);

	_State.Controls.Quad_TopTrophy.ImageUrl = ComponentProfilePlayerInfo_Private_GetTrophyImage(BestTrophy);
	_State.Controls.Quad_BestTrophy.ImageUrl = ComponentProfilePlayerInfo_Private_GetTrophyImage(BestTrophy);

	if (_TrophiesCount.count > 0) {
		_State.Controls.Label_TopTrophyCount.Value = ""^_TrophiesCount[BestTrophy];
	} else {
		_State.Controls.Label_TopTrophyCount.Value = "0";
	}
}

Integer[Integer] ComponentProfilePlayerInfo_GetTrophyCount(CAccountTrophyLastYearSummary _TrophiesSummary) {
	if (_TrophiesSummary == Null) return [];

	declare Integer[Integer] TrophiesCount;
	for (Index, 0, 9) {
		switch (Index) {
			case 0: TrophiesCount[0] = 0;
			case 1: TrophiesCount[1] = _TrophiesSummary.T1Count;
			case 2: TrophiesCount[2] = _TrophiesSummary.T2Count;
			case 3: TrophiesCount[3] = _TrophiesSummary.T3Count;
			case 4: TrophiesCount[4] = _TrophiesSummary.T4Count;
			case 5: TrophiesCount[5] = _TrophiesSummary.T5Count;
			case 6: TrophiesCount[6] = _TrophiesSummary.T6Count;
			case 7: TrophiesCount[7] = _TrophiesSummary.T7Count;
			case 8: TrophiesCount[8] = _TrophiesSummary.T8Count;
			case 9: TrophiesCount[9] = _TrophiesSummary.T9Count;
		}
	}
	return TrophiesCount;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetTrophies(ComponentProfilePlayerInfo_K_State _State, CAccountTrophyLastYearSummary _TrophiesSummary) {
	declare ComponentProfilePlayerInfo_K_State State = _State;
	State.TrophiesCount = ComponentProfilePlayerInfo_GetTrophyCount(_TrophiesSummary);
	declare BestTrophy = ComponentProfilePlayerInfo_GetBestTrophy(State.TrophiesCount);

	foreach (Key => Control in State.Controls.Frame_TrophiesList.Controls) {
		declare CMlLabel Label_TrophyCount <=> ((Control as CMlFrame).GetFirstChild("ComponentProfilePlayerInfo_label-trophy-count") as CMlLabel);
		declare CMlQuad Quad_TrophyIcon <=> ((Control as CMlFrame).GetFirstChild("ComponentProfilePlayerInfo_quad-trophy-icon") as CMlQuad);
		declare Integer Trophy = State.Controls.Frame_TrophiesList.Controls.count - Key;

		if (State.TrophiesCount.existskey(Trophy)) Label_TrophyCount.Value = ""^State.TrophiesCount[Trophy];
		else Label_TrophyCount.Value = "0";
		Label_TrophyCount.TTS_AltText = ComponentProfilePlayerInfo_TL::Compose("%1 trophy %2", Label_TrophyCount.Value, ""^Trophy);
		if (Trophy <= BestTrophy) {
			Quad_TrophyIcon.ChangeImageUrl(ComponentProfilePlayerInfo_Private_GetTrophyImage(Trophy));
		} else {
			Quad_TrophyIcon.ChangeImageUrl(ComponentProfilePlayerInfo_Private_GetTrophyImage(0));
		}
	}

	ComponentProfilePlayerInfo_Private_UpdateTopTrophyCount(State, State.TrophiesCount);

	declare CMlControl Focused_Control = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	ComponentProfilePlayerInfo_Private_FocusTrophiesList(State, (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList));

	return State;
}

Void ComponentProfilePlayerInfo_Private_SetTrophiesPoints(ComponentProfilePlayerInfo_K_State _State, Integer _Points) {
	_State.Controls.Label_TrophiesPoints.Value = ""^_Points;
	if (_Points > 1) {
		_State.Controls.Label_TrophiesPointsText.Value = "|Score|Points";
	} else {
		_State.Controls.Label_TrophiesPointsText.Value = "|Score|Point";
	}
}

Void ComponentProfilePlayerInfo_Private_SetEchelon(ComponentProfilePlayerInfo_K_State _State, Integer _Echelon) {
	declare Integer Echelon = ComponentProfilePlayerInfo_ML::Clamp(_Echelon, ComponentProfilePlayerInfo_C_Echelon_Null, ComponentProfilePlayerInfo_C_Echelon_Gold3);
	if (Echelon >= ComponentProfilePlayerInfo_C_Echelon_Bronze1) {
		switch (_Echelon) {
			case ComponentProfilePlayerInfo_C_Echelon_Bronze1: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_bronze_1.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Bronze 1";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Bronze2: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_bronze_2.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Bronze 2";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Bronze3: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_bronze_3.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Bronze 3";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Silver1: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_silver_1.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Silver 1";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Silver2: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_silver_2.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Silver 2";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Silver3: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_silver_3.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Silver 3";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Gold1: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_gold_1.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Gold 1";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Gold2: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_gold_2.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Gold 2";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Gold3: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_gold_3.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Gold 3";
			}
		}
		_State.Controls.Quad_PlayerCardEchelon.Visible = True;
		_State.Controls.Label_PlayerCardEchelon.Visible = True;
	} else {
		_State.Controls.Quad_PlayerCardEchelon.Visible = False;
		_State.Controls.Label_PlayerCardEchelon.Visible = False;
	}
}

Void ComponentProfilePlayerInfo_Private_SetRank(
	CMlFrame _Frame_PlayerRank,
	CMlLabel _Label_Rank,
	CMlLabel _Label_RankDate,
	Text _DivisionId,
	Text _ProgressionDate,
	Boolean _ShowMinRankIfNoInfo,
	CMlLabel _Label_RankNoInfo
) {
	if (_DivisionId != "") {
		if (_Label_RankNoInfo != Null) _Label_RankNoInfo.Value = "";
		ComponentPlayerRank_UpdatePlayerRank(_Frame_PlayerRank, _DivisionId);
		declare Integer BestRank = ComponentPlayerRank_GetRankNumberFromDivisionId(_DivisionId);
		_Label_Rank.Value = ComponentProfilePlayerInfo_C_Rank_Names.get(BestRank, "");
		_Label_RankDate.Value = ComponentProfilePlayerInfo_TiL::FormatDate(_ProgressionDate, ComponentProfilePlayerInfo_TiL::EDateFormats::MonthYear);
	} else if (_ShowMinRankIfNoInfo) {
		if (_Label_RankNoInfo != Null) _Label_RankNoInfo.Value = "";
		ComponentPlayerRank_UpdatePlayerRank(_Frame_PlayerRank, 1);
		_Label_Rank.Value = ComponentProfilePlayerInfo_C_Rank_Names.get(1, "");
		_Label_RankDate.Value = "";
	} else {
		if (_Label_RankNoInfo != Null) _Label_RankNoInfo.Value = "No data";
		ComponentPlayerRank_UpdatePlayerRank(_Frame_PlayerRank, -1);
		_Label_Rank.Value = "";
		_Label_RankDate.Value = "";
	}
}

Void ComponentProfilePlayerInfo_Private_SetRankedStats(ComponentProfilePlayerInfo_K_State _State, Boolean _DisplaySensibleData) {
	// Ranked button preview
	ComponentProfilePlayerInfo_Private_SetRank(_State.Controls.Frame_PlayerBestRank, _State.Controls.Label_BestRank, _State.Controls.Label_BestRankDate, _State.Ranked.Stats.BestDivision, ""^_State.Ranked.Stats.BestProgressionDate, True, Null);

	//Ranked Stats
	ComponentProfilePlayerInfo_Private_SetRank(_State.Controls.Frame_PlayerCurrentSeason, _State.Controls.Label_CurrentSeason, _State.Controls.Label_CurrentSeasonDate, _State.Ranked.Stats.CurrentDivision, ComponentProfilePlayerInfo_TiL::GetCurrent(), True, Null);
	ComponentProfilePlayerInfo_Private_SetRank(_State.Controls.Frame_PlayerPreviousSeason, _State.Controls.Label_PreviousSeason, _State.Controls.Label_PreviousSeasonDate, _State.Ranked.Stats.PreviousDivision, ""^_State.Ranked.Stats.PreviousProgressionDate, False, _State.Controls.Label_PreviousRankedError);
	ComponentProfilePlayerInfo_Private_SetRank(_State.Controls.Frame_PlayerBestSeason, _State.Controls.Label_BestSeason, _State.Controls.Label_BestSeasonDate, _State.Ranked.Stats.BestDivision, ""^_State.Ranked.Stats.BestProgressionDate, False, _State.Controls.Label_BestRankedError);
	ComponentProfilePlayerInfo_G_State.Controls.Frame_SensibleData.Visible = _DisplaySensibleData;
	if (_DisplaySensibleData) {
		declare Real WinRate = 0.;
		if (_State.Ranked.Stats.PlayedMatches > 0) WinRate = ((_State.Ranked.Stats.Victories * 1.)  / _State.Ranked.Stats.PlayedMatches) * 100.; //Do not remove the *1. on the integer in the division, otherwise WinRate will be 0
		ComponentProfilePlayerInfo_G_State.Controls.Label_MatchesCount.Value = ""^_State.Ranked.Stats.PlayedMatches;
		ComponentProfilePlayerInfo_G_State.Controls.Label_WinRate.Value = ComponentProfilePlayerInfo_TL::Compose("%1%%", ""^ComponentProfilePlayerInfo_ML::NearestInteger(WinRate));
		ComponentProfilePlayerInfo_G_State.Controls.Label_MVPCount.Value = ""^_State.Ranked.Stats.MVPCount;
		AnimMgr.Flush(ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData);
		AnimMgr.Add(ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData, "<a pos=\"0 "^ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData.RelativePosition_V3.Y^"\" />", 50, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Flush(ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData);
		AnimMgr.Add(ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData, "<a pos=\"-48 "^ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData.RelativePosition_V3.Y^"\" />", 50, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

	Void ComponentProfilePlayerInfo_Private_SetRoyalLevel(
	CMlFrame _Frame_RoyalLevel,
	CMlLabel _Label_RoyalLevel,
	CMlLabel _Label_RoyalVictories,
	Text _DivisionId,
	Integer _Victories
) {
	Trackmania_PlayerRoyalVictories::UpdatePlayerRoyalVictories(This, _Frame_RoyalLevel, _DivisionId, _Victories);
	declare Integer RoyalLevel = Trackmania_PlayerRoyalVictories::GetRoyalLevelFromDivisionId(This, _DivisionId);
	if (_Label_RoyalLevel != Null) _Label_RoyalLevel.Value = ComponentProfilePlayerInfo_C_Royal_Level_Names.get(RoyalLevel, "");
	if (_Label_RoyalVictories != Null) _Label_RoyalVictories.Value = ""^_Victories;
}

Void ComponentProfilePlayerInfo_Private_SetSuperRoyalStats(
	CMlQuad _Quad_SuperRoyalLogo,
	CMlLabel _Label_SuperRoyalVictories,
	CMlLabel _Label_BronzeVictories,
	CMlLabel _Label_SilverVictories,
	CMlLabel _Label_GoldVictories,
	CMlLabel _Label_MasterVictories,
	Integer _BronzeVictories,
	Integer _SilverVictories,
	Integer _GoldVictories,
	Integer _MasterVictories
) {
	declare Text BestSuperRoyalDivision = "";
	declare Integer BestSuperRoyalVictories = 0;
	if (_MasterVictories > 0) {
		BestSuperRoyalDivision = ComponentProfilePlayerInfo_C_SuperRoyal_Division_Master;
		BestSuperRoyalVictories = _MasterVictories;
	} else if (_GoldVictories > 0) {
		BestSuperRoyalDivision = ComponentProfilePlayerInfo_C_SuperRoyal_Division_Gold;
		BestSuperRoyalVictories = _GoldVictories;
	} else if (_SilverVictories > 0) {
		BestSuperRoyalDivision = ComponentProfilePlayerInfo_C_SuperRoyal_Division_Silver;
		BestSuperRoyalVictories = _SilverVictories;
	} else if (_BronzeVictories > 0) {
		BestSuperRoyalDivision = ComponentProfilePlayerInfo_C_SuperRoyal_Division_Bronze;
		BestSuperRoyalVictories = _BronzeVictories;
	}

	_Label_BronzeVictories.Value = ""^_BronzeVictories;
	_Label_SilverVictories.Value = ""^_SilverVictories;
	_Label_GoldVictories.Value = ""^_GoldVictories;
	_Label_MasterVictories.Value = ""^_MasterVictories;
	_Quad_SuperRoyalLogo.ChangeImageUrl(ComponentProfilePlayerInfo_C_SuperRoyal_Logos.get(BestSuperRoyalDivision, ""));
	_Label_SuperRoyalVictories.Value = ""^BestSuperRoyalVictories;
}

Void ComponentProfilePlayerInfo_Private_SetRoyalStats(ComponentProfilePlayerInfo_K_State _State) {
	// Royal button preview
	ComponentProfilePlayerInfo_Private_SetRoyalLevel(_State.Controls.Frame_MainRoyalLevel, _State.Controls.Label_MainRoyalLevel, Null, _State.Royal.Stats.CurrentDivision, _State.Royal.Stats.CurrentProgression);

	// Royal stats
	ComponentProfilePlayerInfo_Private_SetRoyalLevel(_State.Controls.Frame_RoyalLevel, Null, _State.Controls.Label_RoyalVictories, _State.Royal.Stats.CurrentDivision, _State.Royal.Stats.Victories);
	// Super Royal stats
	ComponentProfilePlayerInfo_Private_SetSuperRoyalStats(
		_State.Controls.Quad_SuperRoyalLogo,
		_State.Controls.Label_SuperRoyalVictories,
		_State.Controls.Label_BronzeVictories,
		_State.Controls.Label_SilverVictories,
		_State.Controls.Label_GoldVictories,
		_State.Controls.Label_MasterVictories,
		_State.SuperRoyal.Stats.BronzeVictories,
		_State.SuperRoyal.Stats.SilverVictories,
		_State.SuperRoyal.Stats.GoldVictories,
		_State.SuperRoyal.Stats.MasterVictories
	);
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(ComponentProfilePlayerInfo_K_State _State, Integer _PageNb, Boolean _PlaySound) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	declare Integer NewCurrentPage = ComponentProfilePlayerInfo_ML::Clamp(_PageNb, 0, State.TrophiesRankingsPager.MaxPage);

	if (NewCurrentPage > State.TrophiesRankingsPager.CurrentPage) {
		ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Button_NextZone);
		ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Button_GeneralTrophiesNextZone);
		if (_PlaySound) ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_ArrowSelect);
	} else if (NewCurrentPage < State.TrophiesRankingsPager.CurrentPage) {
		ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Button_PrevZone);
		ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Button_GeneralTrophiesPreviousZone);
		if (_PlaySound) ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_ArrowSelect);
	}

	State.Controls.Button_NextZone.Visible = (_PageNb < State.TrophiesRankingsPager.MaxPage);
	State.Controls.Button_GeneralTrophiesNextZone.Visible = State.Controls.Button_NextZone.Visible;
	State.Controls.Button_PrevZone.Visible = (_PageNb > 0);
	State.Controls.Button_GeneralTrophiesPreviousZone.Visible = State.Controls.Button_PrevZone.Visible;

	State.TrophiesRankingsPager.CurrentPage = NewCurrentPage;

	if (
		State.TrophiesRankingsPager.TrophiesRankings.count <= 0 ||
		!State.TrophiesRankingsPager.TrophiesRankings.existskey(State.TrophiesRankingsPager.CurrentPage)
	) {
		if (State.TrophyRankingLoadingError != ComponentProfilePlayerInfo_C_ErrorCode_None) {
			State.Controls.Label_TrophiesGlobalRankingZone.Value = ComponentProfilePlayerInfo_TL::Compose("Error while retrieving ranking (code: %1)", State.TrophyRankingLoadingError);
		} else {
			State.Controls.Label_TrophiesGlobalRankingZone.Value = "Not ranked";
		}
		State.Controls.Label_TrophiesGlobalRankingPosition.Value = "-";
	} else {
		declare LibCampaignStruct_K_Ranking TrophiesRanking = State.TrophiesRankingsPager.TrophiesRankings[State.TrophiesRankingsPager.CurrentPage];

		State.Controls.Label_TrophiesGlobalRankingPosition.Value = ComponentProfilePlayerInfo_Tools::FormatTop(TrophiesRanking.Position, False);
		State.Controls.Label_TrophiesGlobalRankingZone.Value = ComponentProfilePlayerInfo_C_Zone_Translations.get(TrophiesRanking.ZoneName, ComponentProfilePlayerInfo_TL::GetTranslatedText(TrophiesRanking.ZoneName));
	}

	State.Controls.Label_TrophyTopRank.Value = State.Controls.Label_TrophiesGlobalRankingPosition.Value;
	State.Controls.Label_TrophyTopRankZone.Value = State.Controls.Label_TrophiesGlobalRankingZone.Value;

	ComponentProfilePlayerInfo_Tools::FitLabelValue(State.Controls.Label_TrophiesGlobalRankingZone, 2.5, 1.5, 0.25);
	ComponentProfilePlayerInfo_Tools::FitLabelValue(State.Controls.Label_TrophyTopRankZone, 2.5, 1.5, 0.25);

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetTrophiesRankings(ComponentProfilePlayerInfo_K_State _State, LibCampaignStruct_K_Ranking[] _TrophiesRankings) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.TrophiesRankingsPager.TrophiesRankings = _TrophiesRankings;
	State.TrophiesRankingsPager.MaxPage = ComponentProfilePlayerInfo_ML::Max(0, _TrophiesRankings.count - 1);

	// Find the better zone with a rank below or equal to 100
	declare Integer PageNb = _TrophiesRankings.count - 1;
	foreach (Key => ZoneRanking in _TrophiesRankings) {
		if (ZoneRanking.Position <= 100) {
			PageNb = Key;
			break;
		}
	}

	State = ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(State, PageNb, False);

	return State;
}

Void ComponentProfilePlayerInfo_Private_UpdateTrophiesRankingLoading(ComponentProfilePlayerInfo_K_State _State) {
	declare Boolean IsLoading = ComponentProfilePlayerInfo_Http::IsInitialized(_State.GetPlayersTrophyRanking) && ComponentProfilePlayerInfo_Http::IsRunning(_State.GetPlayersTrophyRanking);
	_State.Controls.Frame_InfoRankingLoaded.Visible = !IsLoading;
	CMGame_LoadingSpinner::SetIsLoading(This, _State.Controls.Spinner_Ranking, IsLoading);
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetTrophiesHistoryIsLoading(ComponentProfilePlayerInfo_K_State _State, Boolean _IsLoading) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.TrophiesHistory.IsLoading = _IsLoading;
	State.Controls.Scroll_TrophiesHistory.Visible = !State.TrophiesHistory.IsLoading;
	State.Controls.Label_TrophyHistory.Visible = !State.TrophiesHistory.IsLoading;
	CMGame_LoadingSpinner::SetIsLoading(This, _State.Controls.Spinner_TrophiesHistory, State.TrophiesHistory.IsLoading);

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetTrophyHistoryScroll(ComponentProfilePlayerInfo_K_State _State, Integer _TrophyType, Integer _Offset, CTaskResult_AccountTrophyGainHistory _TrophyHistory) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	if (_TrophyHistory != Null) {
		State.TrophiesHistory.TrophyScroll.Content = [];
		declare Integer Key = _Offset;

		/*
		AchievementType data

		SoloMedal:
		- Text SoloMedalAchievementType
		SoloRanking:
		- Text MapId
		- Text SeasonId
		- Text SoloRankingAchievementType
		LiveMatch:
		- Integer Duration
		- Text GameMode
		- Text GameModeCustomData
		- Boolean IsOfficial
		- Text ServerId
		CompetitionMatch:
		- Text CompetitionId
		- Text CompetitionMatchInfo
		- Text CompetitionName
		- Text CompetitionStage
		- Text CompetitionStageStep
		- Text CompetitionType
		- Text ServerId
		CompetitionRanking:
		- Text CompetitionId
		- Text CompetitionName
		- Text CompetitionStage
		- Text CompetitionStageStep
		- Text CompetitionType
		 */

		foreach (AccountTrophyGain in _TrophyHistory.AccountTrophyGainList) {
			declare Text Description = AccountTrophyGain.TrophyAchievement.TrophyAchievementType;
			switch (AccountTrophyGain.TrophyAchievement.TrophyAchievementType) {
				case ComponentProfilePlayerInfo_C_TrophyAchievementType_SoloMedal: {
					declare TrophySoloMedal <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_SoloMedal);
					declare Text AchievementType = TrophySoloMedal.SoloMedalAchievementType;
					if (ComponentProfilePlayerInfo_C_SoloMedalAchievementTypes.existskey(TrophySoloMedal.SoloMedalAchievementType)) {
						AchievementType = ComponentProfilePlayerInfo_C_SoloMedalAchievementTypes[TrophySoloMedal.SoloMedalAchievementType];
					}
					Description = ComponentProfilePlayerInfo_TL::Compose("%1 - %2", "|TrophyUnlock|Solo medal", AchievementType);
				}
				case ComponentProfilePlayerInfo_C_TrophyAchievementType_SoloRanking: {
					declare TrophySoloRanking <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_SoloRanking);
					declare Text AchievementType = TrophySoloRanking.SoloRankingAchievementType;
					if (ComponentProfilePlayerInfo_C_SoloRankingAchievementTypes.existskey(TrophySoloRanking.SoloRankingAchievementType)) {
						AchievementType = ComponentProfilePlayerInfo_C_SoloRankingAchievementTypes[TrophySoloRanking.SoloRankingAchievementType];
					}
					Description = ComponentProfilePlayerInfo_TL::Compose("%1 - %2", "|TrophyUnlock|Solo ranking", AchievementType);
				}
				case ComponentProfilePlayerInfo_C_TrophyAchievementType_LiveMatch: {
					declare TrophyLiveMatch <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_LiveMatch);
					Description = "|TrophyUnlock|Live match";
				}
				case ComponentProfilePlayerInfo_C_TrophyAchievementType_CompetitionMatch: {
					declare TrophyCompetitionMatch <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_CompetitionMatch);
					Description = ComponentProfilePlayerInfo_TL::Compose("%1 - %2", "|TrophyUnlock|Competition match", TrophyCompetitionMatch.CompetitionName);
				}
				case ComponentProfilePlayerInfo_C_TrophyAchievementType_CompetitionRanking: {
					declare TrophyCompetitionRanking <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_CompetitionRanking);
					Description = ComponentProfilePlayerInfo_TL::Compose("%1 - %2", "|TrophyUnlock|Competition ranking", TrophyCompetitionRanking.CompetitionName);
				}
			}

			declare Integer Amount = 0;
			switch (_TrophyType) {
				case 1: Amount = AccountTrophyGain.T1Count;
				case 2: Amount = AccountTrophyGain.T2Count;
				case 3: Amount = AccountTrophyGain.T3Count;
				case 4: Amount = AccountTrophyGain.T4Count;
				case 5: Amount = AccountTrophyGain.T5Count;
				case 6: Amount = AccountTrophyGain.T6Count;
				case 7: Amount = AccountTrophyGain.T7Count;
				case 8: Amount = AccountTrophyGain.T8Count;
				case 9: Amount = AccountTrophyGain.T9Count;
			}

			State.TrophiesHistory.TrophyScroll.Content[Key] = ComponentProfilePlayerInfo_K_TrophyHistoryEntry {
				Description = Description,
				Date = ComponentProfilePlayerInfo_TiL::FormatDate(""^AccountTrophyGain.TimeStamp, ComponentProfilePlayerInfo_TiL::EDateFormats::DateShort),
				Amount = Amount,
				TimeStamp = AccountTrophyGain.TimeStamp
			};
			Key += 1;
		}
		State.TrophiesHistory.TrophyScroll.Total = _TrophyHistory.AccountTrophyGainTotalCount;
	} else {
		State.TrophiesHistory.TrophyScroll.Content = [];
		State.TrophiesHistory.TrophyScroll.Total = 0;
	}

	if (State.TrophiesHistory.IsLoading) {
		State = ComponentProfilePlayerInfo_Private_SetTrophiesHistoryIsLoading(State, False);
	}

	if (State.HistoryTrophyType == _TrophyType) {
		CMGame_Scroll::SetElementsTotal(This, State.Controls.Scroll_TrophiesHistory, State.TrophiesHistory.TrophyScroll.Total);
		if (State.TrophiesHistory.TrophyScroll.Total <= 0) {
			if (
				_TrophyHistory != Null &&
				!_TrophyHistory.HasSucceeded &&
				State.TrophiesCount.existskey(_TrophyType) &&
				State.TrophiesCount[_TrophyType] > 0
			) {
				State.Controls.Label_TrophyHistory.Value = "Trophy history unavailable";
			} else {
				State.Controls.Label_TrophyHistory.Value = "Trophy history empty";
			}
		} else {
			State.Controls.Label_TrophyHistory.Value = "";
		}
	}

	ComponentProfilePlayerInfo_Private_UpdateControllerInfo(State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main"));

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_RequestTrophyHistory(ComponentProfilePlayerInfo_K_State _State, Integer _TrophyType, Integer _Offset, Integer _Count) {
	if (ScoreMgr == Null && _TrophyType <= 0) return _State;

	declare ComponentProfilePlayerInfo_K_State State = _State;

	// Cancel previous task
	if (State.TrophiesHistory.TaskId_GetTrophyHistory != NullId) {
		if (ScoreMgr.TaskResults.existskey(State.TrophiesHistory.TaskId_GetTrophyHistory)) {
			ScoreMgr.TaskResult_Release(State.TrophiesHistory.TaskId_GetTrophyHistory);
		}
		State.TrophiesHistory.TaskId_GetTrophyHistory = NullId;
	}
	State.TrophiesHistory.RequestedTrophyType = 0;
	State.TrophiesHistory.RequestedOffset = 0;

	// Start new task
	declare CTaskResult_AccountTrophyGainHistory Task = ScoreMgr.Trophy_GetGainHistoryByType(
		ComponentProfilePlayerInfo_MainUser::GetMainUserId(),
		_TrophyType,
		_Offset,
		_Count
	);
	if (Task != Null) {
		State.TrophiesHistory.TaskId_GetTrophyHistory = Task.Id;
		State.TrophiesHistory.RequestedTrophyType = _TrophyType;
		State.TrophiesHistory.RequestedOffset = _Offset;
	}

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_UpdateSelectedTrophy(ComponentProfilePlayerInfo_K_State _State, Integer _TrophyKey) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	declare CMlControl Focused_Control = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	declare Boolean TrophiesListIsFocused = (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList);
	State.SelectedTrophyKey = _TrophyKey;
	if (State.SelectedTrophyKey >= 0 && State.SelectedTrophyKey < _State.Controls.Frame_TrophiesList.Controls.count) {
		State.HistoryTrophyType = _State.Controls.Frame_TrophiesList.Controls.count - State.SelectedTrophyKey;
	} else {
		State.HistoryTrophyType = 0;
	}
	ComponentProfilePlayerInfo_Private_FocusTrophiesList(State, TrophiesListIsFocused);

	State.Controls.Frame_TrophiesHistory.Visible = State.HistoryTrophyType > 0 && State.PlayerProfile.AccountId == LocalUser.WebServicesUserId;
	if (State.Controls.Frame_TrophiesHistory.Visible) {
		if (!State.TrophiesHistory.IsLoading) {
			State = ComponentProfilePlayerInfo_Private_SetTrophiesHistoryIsLoading(State, True);
		}
		CMGame_Scroll::SetElementsTotal(This, State.Controls.Scroll_TrophiesHistory, 0);
		CMGame_Scroll::TriggerPagerUpdate(State.Controls.Scroll_TrophiesHistory);
	}

	ComponentProfilePlayerInfo_Private_UpdateControllerInfo(State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main"));

	return State;
}
ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetSelectedTrophy(ComponentProfilePlayerInfo_K_State _State, Integer _TrophyKey) {
	declare Integer NewTrophyKey = ComponentProfilePlayerInfo_ML::Clamp(_TrophyKey, -1, _State.Controls.Frame_TrophiesList.Controls.count - 1);
	if (_State.SelectedTrophyKey == NewTrophyKey) NewTrophyKey = -1;
	return ComponentProfilePlayerInfo_Private_UpdateSelectedTrophy(_State, NewTrophyKey);
}

Void ComponentProfilePlayerInfo_Private_ScrollTrophyHistory(ComponentProfilePlayerInfo_K_State _State, Real _Delta) {
	if (
		_State.Controls.Frame_TrophiesHistory.Visible &&
		_State.Controls.Scroll_TrophiesHistory.Visible &&
		_State.TrophiesHistory.TrophyScroll.Total > 7
	) {
		CMGame_Scroll::ScrollDelta(This, _State.Controls.Scroll_TrophiesHistory, _Delta, 250);
	}
}

Void ComponentProfilePlayerInfo_Private_UpdatePlayersPagerVisibility(ComponentProfilePlayerInfo_K_State _State) {
	_State.Controls.Button_PrevPlayer.Visible = (_State.PlayersPagerEnabled && !ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_PrevPlayer));
	_State.Controls.Button_NextPlayer.Visible = (_State.PlayersPagerEnabled && !ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_NextPlayer));
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_Enable(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	// Text to speech context
	if (_Enabled) {
		ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Enter(ComponentProfilePlayerInfo_C_TTSContextLevel_Page);
		ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs, Trackmania_NavigationTabs::GetCurrentTabLabel(State.Controls.NavigationTabs_Categories));
		ParentApp.TTS_Context_Read(ComponentProfilePlayerInfo_C_TTSContextLevel_Page);
		if (State.Controls.Frame_ReportSystem.Visible) ComponentPopUpReportSystem::Display(This, State.Controls.Frame_ReportSystem, False);
	} else {
		ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Leave(ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs);
		ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle = ParentApp.TTS_Context_Leave(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle);
		ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank = ParentApp.TTS_Context_Leave(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank);
	}

	if (_Enabled && !State.Enabled) {
		ComponentProfilePlayerInfo_Private_Focus(State, State.Controls.Button_Back);
	}

	State.Enabled = _Enabled;
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-component-profileplayerinfo-main", State.Enabled);
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-component-profileplayerinfo-global", State.Enabled);
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-component-profileplayerinfo-mouse-only", State.Enabled);
	Trackmania_NavigationTabs::LockTabs(This, ComponentProfilePlayerInfo_G_State.Controls.NavigationTabs_Categories, !_Enabled);
	ComponentProfilePlayerInfo_Private_UpdatePlayersPagerVisibility(State);

	// Display the car only when the profile is displayed and the general tab selected
	State = ComponentProfilePlayerInfo_Private_Display3DScene(State, State.Enabled && State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_General);

	if (!State.Enabled) {
		State.PrivilegeCheck.PrivilegeCheck = ComponentProfilePlayerInfo_Privileges::Check_Destroy(State.PrivilegeCheck.PrivilegeCheck);
	}

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableGarageButton(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.GarageButtonEnabled = _Enabled;
	State.Controls.Button_Garage.Visible = (
		State.GarageButtonEnabled &&
		State.PlayerProfile.AccountId != "" &&
		LocalUser.WebServicesUserId == State.PlayerProfile.AccountId
	);
	ComponentNavigation_ComponentNavigation::Lock(State.Controls.Button_Garage, !State.Controls.Button_Garage.Visible);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_Garage && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableFirstPartyProfileButton(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	CMGame_ExpendableButton::SetVisibilityAndNavigation(
		State.Controls.Button_FirstPartyProfile,
		_Enabled && ComponentProfilePlayerInfo_Platform::IsFromFirstParty(System) && State.PlayerProfile.AccountId != "" && LocalUser.WebServicesUserId != State.PlayerProfile.AccountId
	);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_FirstPartyProfile && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableUbisoftConnectProfileButton(ComponentProfilePlayerInfo_K_State _State) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	CMGame_ExpendableButton::SetVisibilityAndNavigation(
		State.Controls.Button_UbisoftConnectProfile,
		State.PlayerProfile.AccountId != "" && LocalUser.WebServicesUserId != State.PlayerProfile.AccountId
	);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_UbisoftConnectProfile && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableReportButton(ComponentProfilePlayerInfo_K_State _State) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	CMGame_ExpendableButton::SetVisibilityAndNavigation(
		State.Controls.Button_Report,
		State.PlayerProfile.IsReportable
	);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_Report && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

Void ComponentProfilePlayerInfo_AdaptFooterButtonsPositions(ComponentProfilePlayerInfo_K_State _State) {
	if (_State.Controls.Button_UbisoftConnectProfile.Visible) {
		if (_State.Controls.Button_Report.Visible) {
			_State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X = _State.Controls.Button_Report.RelativePosition_V3.X - 1. - CMGame_ExpendableButton::GetWidth(_State.Controls.Button_Report);
		} else {
			_State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X = _State.Controls.Button_Report.RelativePosition_V3.X;
		}
	}
	if (_State.Controls.Button_FirstPartyProfile.Visible) {
		if (_State.Controls.Button_UbisoftConnectProfile.Visible) {
			_State.Controls.Button_FirstPartyProfile.RelativePosition_V3.X = _State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X - 1. - CMGame_ExpendableButton::GetWidth(_State.Controls.Button_UbisoftConnectProfile);
		} else {
			_State.Controls.Button_FirstPartyProfile.RelativePosition_V3.X = _State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X;
		}
	}
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnablePlayersPager(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.PlayersPagerEnabled = _Enabled;
	State.Controls.ButtonIcon_PrevPlayer.Visible = State.PlayersPagerEnabled;
	State.Controls.ButtonIcon_NextPlayer.Visible = State.PlayersPagerEnabled;
	ComponentProfilePlayerInfo_Private_UpdatePlayersPagerVisibility(State);

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableZoneSelection(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.ZoneSelectionEnabled = _Enabled;
	State.Controls.Button_UpdateZone.Visible = (
		State.ZoneSelectionEnabled &&
		State.PlayerProfile.AccountId != "" &&
		LocalUser.WebServicesUserId == State.PlayerProfile.AccountId
	);
	ComponentNavigation_ComponentNavigation::Lock(State.Controls.Button_UpdateZone, !State.Controls.Button_UpdateZone.Visible);
	State.Controls.Button_UpdateZone.RelativePosition_V3.X = State.Controls.Button_Garage.RelativePosition_V3.X - 1. - CMGame_ExpendableButton::GetWidth(State.Controls.Button_Garage);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_UpdateZone && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}


ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableMyAccessButton(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.MyAccessButtonEnabled = _Enabled;
	State.Controls.Button_MyAccess.Visible = (
		State.MyAccessButtonEnabled &&
		State.PlayerProfile.AccountId != "" &&
		LocalUser.WebServicesUserId == State.PlayerProfile.AccountId
	);
	ComponentNavigation_ComponentNavigation::Lock(State.Controls.Button_MyAccess, !State.Controls.Button_MyAccess.Visible);
	State.Controls.Button_MyAccess.RelativePosition_V3.X = State.Controls.Button_UpdateZone.RelativePosition_V3.X - 1. - CMGame_ExpendableButton::GetWidth(State.Controls.Button_UpdateZone);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_MyAccess && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

Void ComponentProfilePlayerInfo_Private_DisplayTrophies(ComponentProfilePlayerInfo_K_State _State) {
	CMGame_LoadingSpinner::SetIsLoading(This, _State.Controls.Spinner_Trophies, _State.TaskId_GetAccountLastYearSummary != NullId);
	_State.Controls.Label_TrophiesError.Visible = (_State.TaskId_GetAccountLastYearSummary == NullId && _State.TrophiesLoadingError);
	_State.Controls.Frame_TrophiesLoaded.Visible = (_State.TaskId_GetAccountLastYearSummary == NullId && !_State.TrophiesLoadingError);
	_State.Controls.Label_DisplayHistory.Visible = (_State.PlayerProfile.AccountId == LocalUser.WebServicesUserId);
	ComponentNavigation_ComponentNavigation::Lock(_State.Controls.Frame_TrophiesList, !_State.Controls.Frame_TrophiesLoaded.Visible || _State.PlayerProfile.AccountId != LocalUser.WebServicesUserId);
	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == _State.Controls.Frame_TrophiesList && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(_State, FocusedControl, _State.Controls.Button_Back);
	}
}

Void ComponentProfilePlayerInfo_Private_UpdateMyQuarterlyCampaignsRankings(
	ComponentProfilePlayerInfo_K_State _State,
	LibCampaignStruct_K_CampaignRanking[Integer] _CampaignsRankings,
	Text[Integer] _CampaignsNames,
	Integer _Index
) {
	if (_CampaignsRankings.existskey(_Index)) {
		declare LibCampaignStruct_K_Ranking[] CampaignRankings = _CampaignsRankings[_Index].Rankings;
		declare LibCampaignStruct_K_Ranking TopRank = Trackmania_CampaignStore::GetTopRank(CampaignRankings);

		_State.Controls.Label_TopText.Visible = CampaignRankings.count > 0;
		if (CampaignRankings.count > 0) {
			_State.Controls.Label_TopCampaignRank.Value = ComponentProfilePlayerInfo_Tools::FormatTop(TopRank.Position, False);
			_State.Controls.Label_TopCampaignZone.Value = ComponentProfilePlayerInfo_C_Zone_Translations.get(TopRank.ZoneName, ComponentProfilePlayerInfo_TL::GetTranslatedText(TopRank.ZoneName));
		} else {
			_State.Controls.Label_TopCampaignRank.Value = "-";
			_State.Controls.Label_TopCampaignZone.Value = "Not ranked";
		}
		_State.Controls.Label_TopCampaignRank.Visible = True;
		_State.Controls.Label_TopCampaignZone.Visible = True;
		ComponentProfilePlayerInfo_Tools::FitLabelValue(_State.Controls.Label_TopCampaignZone, 2.5, 1.5, 0.25);

		CMGame_LoadingSpinner::StopAnimation(This, ComponentProfilePlayerInfo_G_State.Controls.Spinner_Campaign);
	} else {
		_State.Controls.Label_TopCampaignRank.Visible = False;
		_State.Controls.Label_TopCampaignZone.Visible = False;
		_State.Controls.Label_TopText.Visible = False;
		CMGame_LoadingSpinner::StartAnimation(This, ComponentProfilePlayerInfo_G_State.Controls.Spinner_Campaign);
	}
	if (_CampaignsNames.existskey(_Index)) {
		declare LibCampaignStruct_K_CampaignName CampaignName = LibCampaignStruct_ParseCampaignName(_CampaignsNames[_Index]);
		if (CampaignName.IsValid) {
			_State.Controls.Label_TopCampaignName.Value = CampaignName.TranslatedName;
		} else {
			_State.Controls.Label_TopCampaignName.Value = CampaignName.Name;
		}
		_State.Controls.Label_TopCampaignName.Visible = True;
	} else {
		_State.Controls.Label_TopCampaignName.Visible = False;
	}
}

Void ComponentProfilePlayerInfo_Private_UpdateCampaignArrows(ComponentProfilePlayerInfo_K_State _State) {
	if (_State.Controls.Frame_MyQuarterlyCampaignsRankings.Visible) {
		_State.Controls.Frame_PreviousCampaign.Visible = !ComponentProfilePlayerInfo_Pager::IsAtLastPage(_State.MyQuarterlyCampaignsRankingsPager);
		_State.Controls.Frame_NextCampaign.Visible = !ComponentProfilePlayerInfo_Pager::IsAtFirstPage(_State.MyQuarterlyCampaignsRankingsPager);
	}
}

Void ComponentProfilePlayerInfo_SetCampaignsRankingVisibility(ComponentProfilePlayerInfo_K_State _State, Boolean _IsVisible) {
	_State.Controls.Frame_MyQuarterlyCampaignsRankings.Visible = _IsVisible;
	ComponentNavigation_ComponentNavigation::Lock(_State.Controls.Frame_MyQuarterlyCampaignsRankings, !_State.Controls.Frame_MyQuarterlyCampaignsRankings.Visible);
	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == _State.Controls.Frame_MyQuarterlyCampaignsRankings && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(_State, FocusedControl, _State.Controls.Button_Back);
	}
	ComponentProfilePlayerInfo_Private_UpdateCampaignArrows(_State);
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_K_State _State, ComponentProfilePlayerInfo_K_PlayerProfile _User, Boolean _CheckPrivileges, Boolean _IsLeavingProfile) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	if (_User.IsReportable) {
		ComponentProfilePlayerInfo_ReportSystem::AddUsingId("component-profileplayerinfo");
	} else {
		ComponentProfilePlayerInfo_ReportSystem::RemoveUsingId("component-profileplayerinfo");
	}

	// Check if the user has the right privileges if they are not looking at their own profile
	State.PrivilegeCheck.PrivilegeCheck = ComponentProfilePlayerInfo_Privileges::Check_Destroy(State.PrivilegeCheck.PrivilegeCheck);
	if (
		_CheckPrivileges &&
		!_User.IsFakeUser && (
			LocalUser == Null ||
			_User.AccountId != LocalUser.WebServicesUserId
		)
	) {
		State.PrivilegeCheck.User = _User;
		State.PrivilegeCheck.PrivilegeCheck = ComponentProfilePlayerInfo_Privileges::Check_Create(PrivilegeMgr, ComponentProfilePlayerInfo_MainUser::GetMainUserId(), CPrivilegeMgr::EPrivilege::ViewUserGameHistory, [_User.AccountId]);
	}

	State.PlayerProfile = _User;
	State.TrophiesLoadingError = False;
	State.TrophyRankingLoadingError = ComponentProfilePlayerInfo_C_ErrorCode_None;

	State = ComponentProfilePlayerInfo_Private_SetTrophies(State, Null);
	ComponentProfilePlayerInfo_Private_SetTrophiesPoints(State, 0);
	ComponentProfilePlayerInfo_Private_SetEchelon(State, ComponentProfilePlayerInfo_C_Echelon_Null);
	State = ComponentProfilePlayerInfo_Private_SetTrophiesRankings(State, []);
	if (!_IsLeavingProfile) { //< Avoid unnecessary refreshes when leaving the page
		State = ComponentProfilePlayerInfo_Private_UpdateSkinDisplayed(State);
		State = ComponentProfilePlayerInfo_Private_EnableMyAccessButton(State, State.MyAccessButtonEnabled);
		State = ComponentProfilePlayerInfo_Private_EnableGarageButton(State, State.GarageButtonEnabled);
		State = ComponentProfilePlayerInfo_Private_EnableFirstPartyProfileButton(State, State.PlayerProfile.IsFirstPartyDisplayName);
		State = ComponentProfilePlayerInfo_Private_EnableUbisoftConnectProfileButton(State);
		State = ComponentProfilePlayerInfo_Private_EnableReportButton(State);
		State = ComponentProfilePlayerInfo_Private_EnableZoneSelection(State, State.ZoneSelectionEnabled);
		State = ComponentProfilePlayerInfo_Private_UpdateTabDisplayed(State, State.TabDisplayed);
		ComponentProfilePlayerInfo_AdaptFooterButtonsPositions(State);
	}

	if (State.TaskId_GetAccountLastYearSummary != NullId) {
		if (ParentApp.ScoreMgr.TaskResults.existskey(State.TaskId_GetAccountLastYearSummary)) {
			ParentApp.ScoreMgr.TaskResult_Release(State.TaskId_GetAccountLastYearSummary);
		}
		State.TaskId_GetAccountLastYearSummary = NullId;
	}

	if (ComponentProfilePlayerInfo_Http::IsInitialized(State.GetPlayersTrophyRanking)) {
		State.GetPlayersTrophyRanking = ComponentProfilePlayerInfo_Http::Destroy(State.GetPlayersTrophyRanking);
	}
	if (ComponentProfilePlayerInfo_Http::IsInitialized(State.Ranked.GetPlayerStats)) {
		State.Ranked.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(State.Ranked.GetPlayerStats);
	}
	if (ComponentProfilePlayerInfo_Http::IsInitialized(State.Royal.GetPlayerStats)) {
		State.Royal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(State.Royal.GetPlayerStats);
	}
	if (ComponentProfilePlayerInfo_Http::IsInitialized(State.SuperRoyal.GetPlayerStats)) {
		State.SuperRoyal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(State.SuperRoyal.GetPlayerStats);
	}
	CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_PlayerCardEchelon, False);
	CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_Ranked, False);
	CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_Royal, False);
	CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_PrivilegeCheck, False);

	State.Controls.Label_PrivilegeCheck.Visible = False;
	State.Controls.Frame_Content.Visible = True;
	State.Controls.Frame_GeneralTab.Visible = True;
	ComponentNavigation_ComponentNavigation::Lock(_State.Controls.Frame_ContentTrophiesRanking, False);
	ComponentNavigation_ComponentNavigation::Lock(State.Controls.Frame_GeneralTabInfoRanking, False);

	// We need an API to get a favorite list of any user
	if (_User.AccountId == "") {
		ComponentProfilePlayerInfo_Private_SetZoneFlag(State, "");
		ComponentProfilePlayerInfo_Private_SetPlayerName(State, "", "", False, False);
		ComponentProfilePlayerInfo_SetCampaignsRankingVisibility(State, False);
		State.Controls.Label_Error.SetText("");
	} else if (
		!ComponentProfilePlayerInfo_Privileges::Check_IsComplete(State.PrivilegeCheck.PrivilegeCheck) ||
		(!_User.CanViewGameHistory && !_User.IsFakeUser)
	) {
		declare Boolean CheckIsComplete = ComponentProfilePlayerInfo_Privileges::Check_IsComplete(State.PrivilegeCheck.PrivilegeCheck);
		CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_PrivilegeCheck, !CheckIsComplete);
		CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_PlayerCardEchelon, !CheckIsComplete);
		State.Controls.Label_PrivilegeCheck.Visible = CheckIsComplete;
		State.Controls.Frame_Content.Visible = False;
		State.Controls.Frame_GeneralTab.Visible = False;
		ComponentNavigation_ComponentNavigation::Lock(_State.Controls.Frame_ContentTrophiesRanking, True);
		ComponentNavigation_ComponentNavigation::Lock(State.Controls.Frame_GeneralTabInfoRanking, True);

		if (State.PlayerProfile.IsFakeUser) {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, ComponentProfilePlayerInfo_Bot::GetCountryFlagUrl(_User.Name));
		} else if (_User.Zone.Path == "") {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, "file://ZoneFlags/Path/World");
		} else {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, _User.Zone.CountryFlagUrl);
		}
		ComponentProfilePlayerInfo_Private_SetPlayerName(State, _User.Name,  _User.ClubTag, _User.IsFirstPartyDisplayName, _User.IsFakeUser);
		ComponentProfilePlayerInfo_SetCampaignsRankingVisibility(State, False);
	} else {
		if (State.PlayerProfile.IsFakeUser) {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, ComponentProfilePlayerInfo_Bot::GetCountryFlagUrl(_User.Name));
		} else if (_User.Zone.Path == "") {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, "file://ZoneFlags/Path/World");
		} else {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, _User.Zone.CountryFlagUrl);
		}

		ComponentProfilePlayerInfo_Private_SetPlayerName(State, _User.Name,  _User.ClubTag, _User.IsFirstPartyDisplayName, _User.IsFakeUser);

		declare Ident[] TaskIds;
		foreach (Task in ParentApp.ScoreMgr.TaskResults) {
			TaskIds.add(Task.Id);
		}
		declare CTaskResult_AccountTrophyLastYearSummary Task;
		if (LocalUser.WebServicesUserId == _User.AccountId) {
			Task = ParentApp.ScoreMgr.Trophy_GetLastYearSummary(ComponentProfilePlayerInfo_MainUser::GetMainUserId());
		} else if (!State.PlayerProfile.IsFakeUser) {
			Task = ParentApp.ScoreMgr.Trophy_GetLastYearSummaryForUser(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), _User.AccountId);
		}

		// ScoreMgr is not available ingame, we have to use ParentApp.ScoreMgr
		// Calling ParentApp.ScoreMgr.Trophy_XXX() will return Null
		// even if the task is created in ParentApp.ScoreMgr.TaskResults
		// Retrieve the task manually from the results array
		if (Task == Null) {
			foreach (TmpTask in ParentApp.ScoreMgr.TaskResults) {
				if (
					!TaskIds.exists(TmpTask.Id) &&
					(TmpTask is CTaskResult_AccountTrophyLastYearSummary)
				) {
					Task <=> (ParentApp.ScoreMgr.TaskResults[TmpTask.Id] as CTaskResult_AccountTrophyLastYearSummary);
				}
			}
		}
		ComponentProfilePlayerInfo_SetCampaignsRankingVisibility(State, True);

		if (Task != Null) {
			State.TaskId_GetAccountLastYearSummary = Task.Id;
		} else if (!State.PlayerProfile.IsFakeUser) {
			State.Controls.Label_TrophiesError.Value = ComponentProfilePlayerInfo_TL::Compose("Error while retrieving trophies (code: %1)", ComponentProfilePlayerInfo_C_ErrorCode_CouldNotCreateTask);
			State.TrophiesLoadingError = True;
		}

		if (!State.PlayerProfile.IsFakeUser) {
			State.GetPlayersTrophyRanking = ComponentProfilePlayerInfo_LeaderboardAPI::GetPlayersTrophyRanking([_User.AccountId]);
			CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_PlayerCardEchelon, True);
			// Ranked stats
			if (State.Ranked.QueueId == "") {
				declare Trackmania_UserStore::K_MatchmakingInfo RankedMatchmakingInfo = Trackmania_UserStore::GetMatchmakingInfos("Teams 3v3");
				ComponentPlayerRank_SetDivisions(RankedMatchmakingInfo.Divisions);
				State.Ranked.QueueId = RankedMatchmakingInfo.QueueId;
			}
			State.Ranked.GetPlayerStats = ComponentProfilePlayerInfo_MatchmakingAPI::GetPlayerMatchmakingStatistics(State.Ranked.QueueId, _User.AccountId);
			CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_Ranked, True);
			// Royal stats
			if (State.Royal.QueueId == "") {
				declare Trackmania_UserStore::K_MatchmakingInfo RoyalMatchmakingInfo = Trackmania_UserStore::GetMatchmakingInfos("Royal");
				Trackmania_PlayerRoyalVictories::SetDivisions(This, RoyalMatchmakingInfo.Divisions);
				State.Royal.QueueId = RoyalMatchmakingInfo.QueueId;
			}
			State.Royal.GetPlayerStats = ComponentProfilePlayerInfo_MatchmakingAPI::GetPlayerMatchmakingStatistics(State.Royal.QueueId, _User.AccountId);
			CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_Royal, True);
			// Super Royal stats
			State.SuperRoyal.GetPlayerStats = ComponentProfilePlayerInfo_MatchmakingAPI::GetSuperRoyalStats(_User.AccountId);
		} else {
			State.Ranked.Stats = LibStructuresMatchmaking_K_PlayerStatistics {};
			ComponentProfilePlayerInfo_Private_SetRankedStats(State, False);
			State.Royal.Stats = LibStructuresMatchmaking_K_PlayerStatistics {};
			State.SuperRoyal.Stats = LibStructuresMatchmaking_K_SuperRoyalStatistics {};
			ComponentProfilePlayerInfo_Private_SetRoyalStats(State);
		}

		if (
			Trackmania_CampaignStore::GetMyQuarterlyCampaignsTotal() <= 0 ||
			Trackmania_CampaignStore::GetMyQuarterlyCampaignsAccountId() != _User.AccountId
		) {
			State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::ForceRangeUpdate(State.MyQuarterlyCampaignsRankingsPager);
		}
		// Unselect the trophy if we are looking to another player
		if (LocalUser.WebServicesUserId != _User.AccountId) {
			State = ComponentProfilePlayerInfo_Private_SetSelectedTrophy(State, -1);
		}
	}

	ComponentProfilePlayerInfo_Private_DisplayTrophies(State);
	ComponentProfilePlayerInfo_Private_UpdateCampaignArrows(State);
	ComponentProfilePlayerInfo_Private_UpdateTrophiesRankingLoading(State);

	declare CMlControl Focused_Control = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (ComponentNavigation_ComponentNavigation::IsLocked(Focused_Control)) {
		ComponentProfilePlayerInfo_Private_Focus(_State, Focused_Control, _State.Controls.Button_Back);
	}

	Focused_Control = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	declare Boolean TrophiesListIsFocused = (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList);
	ComponentProfilePlayerInfo_Private_FocusTrophiesList(State, TrophiesListIsFocused);
	State = ComponentProfilePlayerInfo_Private_UpdateSelectedTrophy(State, State.SelectedTrophyKey);

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_InitProfilePlayerInfo(ComponentProfilePlayerInfo_K_State _State) {
	Page.GetClassChildren("component-profileplayerinfo", Page.MainFrame, True);
	assert(Page.GetClassChildren_Result.count <= 1, "You can only include one instance of the ProfilePlayerInfo component in a page");

	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.IsPlayerProfileUpdated = True;
	State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::Create(1, 3, 1, 1000, False);

	State.TrophiesRankingsPager = ComponentProfilePlayerInfo_K_TrophiesRankingsPager {
		TrophiesRankings = [],
		CurrentPage = 0,
		MaxPage = 0
	};

	foreach (Key => Control in State.Controls.Frame_TrophiesList.Controls) {
		declare CMlQuad Quad_TrophyIcon <=> ((Control as CMlFrame).GetFirstChild("ComponentProfilePlayerInfo_quad-trophy-icon") as CMlQuad);
		Quad_TrophyIcon.ImageUrl = ComponentProfilePlayerInfo_Private_GetTrophyImage(State.Controls.Frame_TrophiesList.Controls.count - Key);
	}

	declare Boolean GarageButtonEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-garage")) {
		GarageButtonEnabled = ComponentProfilePlayerInfo_Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-garage"));
	}
	State.GarageButtonEnabled = GarageButtonEnabled;

	State = ComponentProfilePlayerInfo_Private_Enable(State, False);
	State = ComponentProfilePlayerInfo_Private_SetUser(State, ComponentProfilePlayerInfo_K_PlayerProfile {}, False, False);

	declare Boolean PlayersPagerEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-players-pager")) {
		PlayersPagerEnabled = ComponentProfilePlayerInfo_Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-players-pager"));
	}
	State = ComponentProfilePlayerInfo_Private_EnablePlayersPager(State, PlayersPagerEnabled);

	declare Boolean ZoneSelectionEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-zone-selection")) {
		ZoneSelectionEnabled = ComponentProfilePlayerInfo_Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-zone-selection"));
	}
	State = ComponentProfilePlayerInfo_Private_EnableZoneSelection(State, ZoneSelectionEnabled);
	State = ComponentProfilePlayerInfo_Private_UpdateTabDisplayed(State, ComponentProfilePlayerInfo_C_TabDisplayed_General);

	declare Boolean MyAccessButtonEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-my-access-info")) {
		MyAccessButtonEnabled = ComponentProfilePlayerInfo_Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-my-access-info"));
	}
	State = ComponentProfilePlayerInfo_Private_EnableMyAccessButton(State, MyAccessButtonEnabled);

	ComponentProfilePlayerInfo_Private_UpdateTopTrophyCount(State, []);
	ComponentProfilePlayerInfo_Private_UpdateMyQuarterlyCampaignsRankings(ComponentProfilePlayerInfo_G_State, [], [], ComponentProfilePlayerInfo_Pager::GetIndex(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager));

	State.NextPrevPlayerCooldown = -1;
	State = ComponentProfilePlayerInfo_Private_SetFocusedTrophy(State, State.Controls.Frame_TrophiesList.Controls.count - 1);
	State = ComponentProfilePlayerInfo_Private_SetSelectedTrophy(State, -1);

	State = ComponentProfilePlayerInfo_Private_EnableFirstPartyProfileButton(State, State.PlayerProfile.IsFirstPartyDisplayName);
	State = ComponentProfilePlayerInfo_Private_EnableUbisoftConnectProfileButton(State);
	ComponentProfilePlayerInfo_AdaptFooterButtonsPositions(State);

	State.MatchId = "";
	State.MatchmakingId = "";

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_K_State _State, CMlControl _Control) {
	if (_Control == Null) return _State;

	declare ComponentProfilePlayerInfo_K_State State = _State;

	switch (_Control.ControlId) {
		case "ComponentProfilePlayerInfo_button-back": {
			ComponentProfilePlayerInfo_Private_SendCloseEvent(State);
			State = ComponentProfilePlayerInfo_Private_SetUser(State, ComponentProfilePlayerInfo_K_PlayerProfile {}, False, True);
		}
		case "ComponentProfilePlayerInfo_button-my-access": {
			if (State.MyAccessButtonEnabled) {
				ComponentProfilePlayerInfo_Private_SendMyAccessInfoEvent(State);
			}
		}
		case "ComponentProfilePlayerInfo_button-garage": {
			if (State.GarageButtonEnabled) {
				ComponentProfilePlayerInfo_Private_SendGarageEvent(State);
			}
		}
		case "ComponentProfilePlayerInfo_button-first-party-profile": {
			UserMgr.Profile_ShowFirstPartyProfile(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), State.PlayerProfile.AccountId);
		}
		case "ComponentProfilePlayerInfo_button-ubisoft-connect-profile": {
			UserMgr.Profile_ShowUbisoftConnectProfile(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), State.PlayerProfile.AccountId);
		}
		case "ComponentProfilePlayerInfo_button-report": {
			State = ComponentProfilePlayerInfo_Private_Enable(State, False);
			if (This is CMlScriptIngame) {
				declare ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData[Integer] Data =
				[
					ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_PlayerName => ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "InGame Profile"]]
					}
				];
				if (State.PlayerProfile.CarSkin.FileUrl != "") {
					Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_Skin] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "InGame Profile"]]
					};
				}
				if (!State.PlayerProfile.IsGhost) {
					if (State.MatchId != "") {
						Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_Player] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
							Details = [State.PlayerProfile.Name],
							Ids = [State.PlayerProfile.AccountId],
							Contexts = [["From" => "InGame Profile", "MatchmakingId" => State.MatchmakingId, "MatchId" => State.MatchId, "ServerChatLog" => ParentApp.ManiaPlanet.ServerChatLog]]
						};
					} else {
						Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_Player] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
							Details = [State.PlayerProfile.Name],
							Ids = [State.PlayerProfile.AccountId],
							Contexts = [["From" => "InGame Profile", "ServerChatLog" => ParentApp.ManiaPlanet.ServerChatLog]]
						};
					}
				}
				if (State.PlayerProfile.RecordData.Id != "") {
					Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_Record] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.RecordData.Detail],
						Ids = [State.PlayerProfile.RecordData.Id],
						Contexts = [["From" => "InGame Profile"]]
					};
				}
				if (State.PlayerProfile.ClubTag != "") {
					Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_ClubTag] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.ClubTag],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "InGame Profile"]]
					};
				}
				ComponentPopUpReportSystem::SetReportTargetsData(This, State.Controls.Frame_ReportSystem, Data);
				ComponentPopUpReportSystem::Display(This, State.Controls.Frame_ReportSystem, True);
			} else {
				declare ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData[Integer] Data =
				[
					ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_PlayerName => ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "Menu Profile"]]
					}
				];
				if (State.PlayerProfile.CarSkin.FileUrl != "") {
					Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_Skin] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "Menu Profile"]]
					};
				}
				if (State.PlayerProfile.ClubTag != "") {
					Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_ClubTag] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.ClubTag],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "Menu Profile"]]
					};
				}
				ComponentProfilePlayerInfo_ReportSystem::Show(Data);
			}
		}
		case "ComponentProfilePlayerInfo_button-prev-player": {
			if (State.PlayersPagerEnabled && (State.NextPrevPlayerCooldown < 0 || Now >= State.NextPrevPlayerCooldown)) {
				ComponentProfilePlayerInfo_Private_SendPrevPlayerEvent(State);
				State.NextPrevPlayerCooldown = Now + ComponentProfilePlayerInfo_C_DelayBetweenPagerRequest;
			}
		}
		case "ComponentProfilePlayerInfo_button-next-player": {
			if (State.PlayersPagerEnabled && (State.NextPrevPlayerCooldown < 0 || Now >= State.NextPrevPlayerCooldown)) {
				ComponentProfilePlayerInfo_Private_SendNextPlayerEvent(State);
				State.NextPrevPlayerCooldown = Now + ComponentProfilePlayerInfo_C_DelayBetweenPagerRequest;
			}
		}
		case "ComponentProfilePlayerInfo_button-update-zone": {
			if (State.ZoneSelectionEnabled) {
				ComponentProfilePlayerInfo_Private_SendEditPlayerEvent(State);
			}
		}
		case "ComponentProfilePlayerInfo_button-prev-zone", "ComponentProfilePlayerInfo_button-general-trophies-previous-zone": {
			State = ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(State, State.TrophiesRankingsPager.CurrentPage - 1, False);
			ComponentProfilePlayerInfo_Private_TTSContextUpdate(State, _Control);
		}
		case "ComponentProfilePlayerInfo_button-next-zone", "ComponentProfilePlayerInfo_button-general-trophies-next-zone": {
			State = ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(State, State.TrophiesRankingsPager.CurrentPage + 1, False);
			ComponentProfilePlayerInfo_Private_TTSContextUpdate(State, _Control);
		}
		case "ComponentProfilePlayerInfo_button-previous-campaign": {
			State.IsTTSContextUpdateNeeded = True;
			State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::GoToNextPage(State.MyQuarterlyCampaignsRankingsPager);
			ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Frame_PreviousCampaign);
		}
		case "ComponentProfilePlayerInfo_button-next-campaign": {
			State.IsTTSContextUpdateNeeded = True;
			State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::GoToPreviousPage(State.MyQuarterlyCampaignsRankingsPager);
			ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Frame_NextCampaign);
		}
		case "ComponentProfilePlayerInfo_frame-trophies-list": {
			State = ComponentProfilePlayerInfo_Private_SetSelectedTrophy(State, State.FocusedTrophyKey);
		}
	}

	if (_Control.HasClass("ComponentProfilePlayerInfo_button-trophy")) {
		State = ComponentProfilePlayerInfo_Private_SetSelectedTrophy(State, ComponentProfilePlayerInfo_TL::ToInteger(_Control.DataAttributeGet("trophy-key")));
	}

	return State;
}

// Enable or disable the player profile
// The primary effect is to enable or
// disable the navigation inside the component
Void ComponentProfilePlayerInfo_Enable(Boolean _Enabled) {
	ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Enable(ComponentProfilePlayerInfo_G_State, _Enabled);
}

Boolean ComponentProfilePlayerInfo_IsEnabled() {
	return ComponentProfilePlayerInfo_G_State.Enabled;
}

// Set the user to display in the profile
Void ComponentProfilePlayerInfo_SetUser(CUser _User) {
	if (_User == Null) {
		ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_K_PlayerProfile {}, False, False);
	} else {
		declare Text ZoneName = "";
		declare Text[] Zones = ComponentProfilePlayerInfo_TL::Split("|", _User.ZonePath);
		if (Zones.count > 0) ZoneName = Zones[Zones.count-1];

		ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_K_PlayerProfile {
			SuccessfulTaskNumber = 0,
			UserId = _User.Id,
			Name = _User.Name,
			ClubTag = _User.ClubTag,
			Trigram = _User.Trigram,
			IsFirstPartyDisplayName = _User.IsFirstPartyDisplayName,
			AccountId = _User.WebServicesUserId,
			IsFakeUser = (_User.IsFakeUser || ComponentProfilePlayerInfo_TL::StartsWith("*fake", _User.Login)), //@HACK to detect fake user until Falguiere fix the bug
			CarSkin = LibStructuresClub_K_Skin {
				Name = _User.Model_CarSport_SkinName,
				FileUrl = _User.Model_CarSport_SkinUrl,
				PrestigeOptions = _User.Prestige_SkinOptions
			},
			PilotSkin = LibStructuresClub_K_Skin {
				Name = _User.Model_CharacterPilot_SkinName,
				FileUrl = _User.Model_CharacterPilot_SkinUrl,
				CharacterOptions = _User.Character_SkinOptions
			},
			SkinLightColor = _User.Color,
			Zone = ComponentProfilePlayerInfo_K_Zone {
				Name = ZoneName,
				Path = _User.ZonePath,
				FlagUrl = _User.ZoneFlagUrl,
				CountryFlagUrl = _User.CountryFlagUrl
			},
			CanViewGameHistory = LocalUser != Null && _User.WebServicesUserId == LocalUser.WebServicesUserId,
			IsReportable = _User.WebServicesUserId != "" && _User.WebServicesUserId != LocalUser.WebServicesUserId && !ComponentProfilePlayerInfo_TL::StartsWith("*splitscreen", _User.Login) && !_User.IsFakeUser && !ComponentProfilePlayerInfo_TL::StartsWith("*fake", _User.Login), //@HACK to detect fake user until Falguiere fix the bug
			RecordData = ComponentProfilePlayerInfo_K_Record {
				Detail = "",
				Id = ""
			},
			IsGhost = False
		}, True, False);
	}
}

// Set the accountid of the user to display in the profile
Void ComponentProfilePlayerInfo_SetUserAccountId(Text _AccountId) {
	if (_AccountId == LocalUser.WebServicesUserId) {
		ComponentProfilePlayerInfo_G_State.IsPlayerProfileUpdated = True;
		ComponentProfilePlayerInfo_SetUser(LocalUser);
	} else {
		ComponentProfilePlayerInfo_G_State.IsPlayerProfileUpdated = False;
		ComponentProfilePlayerInfo_G_State.Task_GetClubTagList = ComponentProfilePlayerInfo_Task::DestroyAndCreate(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList, UserMgr, UserMgr.Tag_GetClubTagList(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), [_AccountId]));
		ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin = ComponentProfilePlayerInfo_Task::DestroyAndCreate(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin, UserMgr, UserMgr.Prestige_GetCurrentAccountPrestigeForUser(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), _AccountId));
		ComponentProfilePlayerInfo_G_State.Task_GetSkinList = ComponentProfilePlayerInfo_Task::DestroyAndCreate(ComponentProfilePlayerInfo_G_State.Task_GetSkinList, DataFileMgr, DataFileMgr.AccountSkin_NadeoServices_GetListForUser(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), _AccountId));
		ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName = ComponentProfilePlayerInfo_Task::DestroyAndCreate(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName, UserMgr, UserMgr.RetrieveDisplayName(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), [_AccountId]));
		ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList = ComponentProfilePlayerInfo_Task::DestroyAndCreate(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList, ZoneMgr, ZoneMgr.RetrieveUserZoneList(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), [_AccountId]));
		ComponentProfilePlayerInfo_G_State.PlayerProfile = ComponentProfilePlayerInfo_K_PlayerProfile {
			UserId = NullId,
			AccountId = _AccountId,
			CanViewGameHistory = False,
			IsReportable = _AccountId != "" && _AccountId != LocalUser.WebServicesUserId,
			RecordData = ComponentProfilePlayerInfo_K_Record {
				Detail = "",
				Id = ""
			},
			IsGhost = False
		};
	}
}

// Set the record of the user to display in the profile (for the report system)
Void ComponentProfilePlayerInfo_SetUserRecord(Text _RecordDetail, Text _RecordId) {
	ComponentProfilePlayerInfo_G_State.PlayerProfile.RecordData.Detail = _RecordDetail;
	ComponentProfilePlayerInfo_G_State.PlayerProfile.RecordData.Id = _RecordId;
}

// Set the match id (Ranked or Royal) for the context of the report system
Void ComponentProfilePlayerInfo_SetMatchAndMatchmakingId(Text _MatchId, Text _MatchmakingId) {
	ComponentProfilePlayerInfo_G_State.MatchId = _MatchId;
	ComponentProfilePlayerInfo_G_State.MatchmakingId = _MatchmakingId;
}

// Set if the user is a ghost (for the report system)
Void ComponentProfilePlayerInfo_SetUserIsGhost(Boolean _IsGhost) {
	ComponentProfilePlayerInfo_G_State.PlayerProfile.IsGhost = _IsGhost;
}

// Display or hide the my access button
Void ComponentProfilePlayerInfo_EnableMyAccessButton(Boolean _Enabled) {
	ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_EnableMyAccessButton(ComponentProfilePlayerInfo_G_State, _Enabled);
}

// Display or hide the garage button
Void ComponentProfilePlayerInfo_EnableGarageButton(Boolean _Enabled) {
	ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_EnableGarageButton(ComponentProfilePlayerInfo_G_State, _Enabled);
}

// Display or hide the players pager
Void ComponentProfilePlayerInfo_EnablePlayersPager(Boolean _Enabled) {
	ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_EnablePlayersPager(ComponentProfilePlayerInfo_G_State, _Enabled);
}

// Display or hide the zone selection button
Void ComponentProfilePlayerInfo_EnableZoneSelection(Boolean _Enabled) {
	ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_EnableZoneSelection(ComponentProfilePlayerInfo_G_State, _Enabled);
}

// Use navigation events from the manialink
Void ComponentProfilePlayerInfo_UseLocalEvents(Boolean _UseLocalEvents) {
	CMGame_Scroll::UseLocalEvents(This, _UseLocalEvents);
	ComponentNavigation_ComponentNavigation::UseLocalEvents(This, _UseLocalEvents);
}

// Control the visibility of the background
Void ComponentProfilePlayerInfo_SetBackgroundVisibility(Boolean _Visible) {
	ComponentProfilePlayerInfo_G_State.Controls.Quad_Background.Visible = _Visible;
}

***MainInit***
***
declare CMlFrame ComponentProfilePlayerInfo_Frame_Title;
declare CMlFrame ComponentProfilePlayerInfo_Frame_PlayerCard;
declare Boolean ComponentProfilePlayerInfo_ButtonIconPrevPlayerIsVisible;
declare Boolean ComponentProfilePlayerInfo_ButtonIconNextPlayerIsVisible;
declare CMlControl ComponentProfilePlayerInfo_LastBottomButtonFocused;
***

***MainStart***
***
ComponentProfilePlayerInfo_G_State.Controls.Frame_Global <=> (Page.GetFirstChild("ComponentProfilePlayerInfo_frame-global") as CMlFrame);
ComponentProfilePlayerInfo_Frame_Title <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-title") as CMlFrame);
ComponentProfilePlayerInfo_Frame_PlayerCard <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-player-card") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_MyAccess <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-my-access") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_UpdateZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-update-zone") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Quad_PlayerCardFlag <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_quad-player-card-flag") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.PlayerName_PlayerCardName <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_playername-player-card-name") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_PrevPlayer <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_button-prev-player") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_NextPlayer <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_button-next-player") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_PrevPlayer <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_button-icon-prev-player") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_NextPlayer <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_button-icon-next-player") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-trophies") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Quad_BestTrophy <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_quad-best-trophy") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesError <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-trophies-error") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesLoaded <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_frame-trophies-loaded") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_Trophies <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_spinner-trophies") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesList <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_frame-trophies-list") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_DisplayHistory <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-display-history") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesGlobalRankingPosition <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-trophies-global-ranking-position") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesGlobalRankingZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-trophies-global-ranking-zone") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesPoints <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-trophies-points") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesPointsText <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-trophies-points-text") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesHistory <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_frame-trophies-history") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophyHistory <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesHistory.GetFirstChild("ComponentProfilePlayerInfo_label-trophy-history") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_TrophiesHistory <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesHistory.GetFirstChild("ComponentProfilePlayerInfo_spinner-trophies-history") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Scroll_TrophiesHistory <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesHistory.GetFirstChild("ComponentProfilePlayerInfo_scroll-trophies-history") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_PrevZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_button-prev-zone") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_NextZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_button-next-zone") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-main-profile") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophyTopRank <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-ranking-position") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophyTopRankZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-ranking-category") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Quad_TopTrophy <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_quad-highest-trophy") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Label_TopTrophyCount <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-trophy-number") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TopCampaignName <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-campaign-name") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TopText <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-campaign-ranking-top") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TopCampaignRank <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-campaign-ranking-position") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TopCampaignZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-campaign-ranking-zone") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_InfoRankingLoaded <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_frame-info-ranking-loaded") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_Ranking <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_spinner-ranking") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_Ranked <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_spinner-ranked") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_Royal <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_spinner-royal") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_Campaign <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_spinner-campaign") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_MyQuarterlyCampaignsRankings <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-info-campaign-ranking") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PreviousCampaign <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-previous-campaign") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_NextCampaign <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-next-campaign") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_GeneralTrophiesPreviousZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-general-trophies-previous-zone") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_GeneralTrophiesNextZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-general-trophies-next-zone") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_Back <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-back") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_CurrentSkin <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-current-skin") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Quad_Lights <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_quad-lights") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Quad_PlayerCardEchelon <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_quad-player-card-echelon") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Label_PlayerCardEchelon <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_label-player-card-echelon") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_PlayerCardEchelon <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_spinner-player-card-echelon") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_Garage <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-garage") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_FirstPartyProfile <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-first-party-profile") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_UbisoftConnectProfile <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-ubisoft-connect-profile") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_Report  <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-report") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PlayerBestRank <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_frame-best-rank") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_BestRank <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-best-rank") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_BestRankDate <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-best-rank-date") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-ranked-stats") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedCurrentSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_frame-current-season") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PlayerCurrentSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedCurrentSeason.GetFirstChild("ComponentProfilePlayerInfo_frame-rank") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_CurrentSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedCurrentSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_CurrentSeasonDate <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedCurrentSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank-date") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedPreviousSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_frame-previous-season") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PlayerPreviousSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("ComponentProfilePlayerInfo_frame-rank") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_PreviousSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_PreviousSeasonDate <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank-date") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_PreviousRankedError <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("ComponentProfilePlayerInfo_label-ranked-error") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedBestSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_frame-best-season") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PlayerBestSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedBestSeason.GetFirstChild("ComponentProfilePlayerInfo_frame-rank") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_BestSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedBestSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_BestSeasonDate <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedBestSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank-date") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_BestRankedError <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedBestSeason.GetFirstChild("ComponentProfilePlayerInfo_label-ranked-error") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_frame-public-data") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_SensibleData <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_frame-sensible-data") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_MatchesCount <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_label-matches-count") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_WinRate <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_label-percentage") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_MVPCount <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_label-mvp-count") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_MainRoyalLevel <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_frame-royal-level") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_MainRoyalLevel <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-royal-level") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_RoyalVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-royal-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-royal-stats") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalLevel <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_frame-royal-level") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_RoyalVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-royal-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Quad_SuperRoyalLogo <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_quad-super-royal-logo") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Label_SuperRoyalVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-super-royal-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_BronzeVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-bronze-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_SilverVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-silver-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_GoldVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-gold-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_MasterVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-master-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_ButtonList <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-button-list-profile") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_Error <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_label-error") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.NavigationTabs_Categories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_navigationtabs-categories") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Quad_Background <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_quad-background") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Frame_Content <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-content") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_ContentTrophiesRanking <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Content.GetFirstChild("ComponentProfilePlayerInfo_frame-trophies-ranking") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_GeneralTab <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-general-tab") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_GeneralTabInfoRanking <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_GeneralTab.GetFirstChild("ComponentProfilePlayerInfo_frame-info-ranking") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_PrivilegeCheck <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_spinner-privilege-check") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_PrivilegeCheck <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_label-privilege-check") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_ReportSystem <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-report-system") as CMlFrame);

ComponentProfilePlayerInfo_PendingEvents = [];

ComponentProfilePlayerInfo_ButtonIconPrevPlayerIsVisible = ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_PrevPlayer);
ComponentProfilePlayerInfo_ButtonIconNextPlayerIsVisible = ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_NextPlayer);
ComponentProfilePlayerInfo_Private_UpdatePlayersPagerVisibility(ComponentProfilePlayerInfo_G_State);

ComponentProfilePlayerInfo_LastBottomButtonFocused = ComponentProfilePlayerInfo_G_State.Controls.Button_Back;
ComponentMenuButtonList_SetButtons(ComponentProfilePlayerInfo_G_State.Controls.Frame_ButtonList, []);
ComponentProfilePlayerInfo_ControllerInfo::SetButtons([]);
ComponentNavigation_ComponentNavigation::Focus(This, ComponentProfilePlayerInfo_G_State.Controls.Frame_Global);
ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_InitProfilePlayerInfo(ComponentProfilePlayerInfo_G_State);
***

***MainLoop***
***
ComponentProfilePlayerInfo_PendingEvents = [];

if (ComponentProfilePlayerInfo_G_State.Enabled) {
	if (
		ComponentProfilePlayerInfo_G_State.Scene.SceneId != NullId &&
		ComponentProfilePlayerInfo_MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)
	) {
		ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Display3DScene(ComponentProfilePlayerInfo_G_State, False);
		ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Display3DScene(ComponentProfilePlayerInfo_G_State, True);
	}

	// Update pager and check if the range changed
	ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::Update(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager);
	if (ComponentProfilePlayerInfo_Pager::RangeUpdated(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)) {
		ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::ProcessRangeUpdate(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager);
		// Ask the store to load the new range of campaigns rankings
		Trackmania_CampaignStore::Action_LoadMyQuarterlyCampaignsRankings(
			This,
			ComponentProfilePlayerInfo_G_State.PlayerProfile.AccountId,
			ComponentProfilePlayerInfo_Pager::GetRangeOffset(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager),
			ComponentProfilePlayerInfo_Pager::GetRangeLength(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)
		);
	}
	if (ComponentProfilePlayerInfo_Pager::PageUpdated(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)) {
		ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::ProcessPageUpdate(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager);
		ComponentProfilePlayerInfo_Private_UpdateMyQuarterlyCampaignsRankings(
			ComponentProfilePlayerInfo_G_State,
			Trackmania_CampaignStore::GetMyQuarterlyCampaignsRankings(),
			Trackmania_CampaignStore::GetMyQuarterlyCampaignsNames(),
			ComponentProfilePlayerInfo_Pager::GetIndex(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)
		);
		ComponentProfilePlayerInfo_Private_UpdateCampaignArrows(ComponentProfilePlayerInfo_G_State);
		if (ComponentProfilePlayerInfo_G_State.IsTTSContextUpdateNeeded) {
			ComponentProfilePlayerInfo_G_State.IsTTSContextUpdateNeeded = False;
			ComponentProfilePlayerInfo_Private_TTSContextUpdate(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.Controls.Frame_MyQuarterlyCampaignsRankings);
		}
	}

	if (
		ComponentProfilePlayerInfo_ButtonIconPrevPlayerIsVisible != ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_PrevPlayer) ||
		ComponentProfilePlayerInfo_ButtonIconNextPlayerIsVisible != ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_NextPlayer)
	) {
		ComponentProfilePlayerInfo_ButtonIconPrevPlayerIsVisible = ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_PrevPlayer);
		ComponentProfilePlayerInfo_ButtonIconNextPlayerIsVisible = ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_NextPlayer);
		ComponentProfilePlayerInfo_Private_UpdatePlayersPagerVisibility(ComponentProfilePlayerInfo_G_State);
	}

	foreach (Event in ComponentNavigation_ComponentNavigation::GetPendingEvents(This)) {
		switch (Event.Type) {
			case ComponentNavigation_ComponentNavigation::C_EventType_NavigateInput: {
				if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-profileplayerinfo-global")) {
					if (ComponentProfilePlayerInfo_G_State.PlayersPagerEnabled) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Action3) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.Controls.Button_PrevPlayer);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Action4) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.Controls.Button_NextPlayer);
						}
					}
					if (ComponentProfilePlayerInfo_Private_IsBrowsingTrophiesHistory(ComponentProfilePlayerInfo_G_State)) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_UpdateSelectedTrophy(ComponentProfilePlayerInfo_G_State, -1);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Up) {
							ComponentProfilePlayerInfo_Private_ScrollTrophyHistory(ComponentProfilePlayerInfo_G_State, -15.4286);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Down) {
							ComponentProfilePlayerInfo_Private_ScrollTrophyHistory(ComponentProfilePlayerInfo_G_State, 15.4286);
						}
					} else {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							ComponentProfilePlayerInfo_Private_SendCloseEvent(ComponentProfilePlayerInfo_G_State);
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_K_PlayerProfile {}, False, True);
						}
					}
				} else if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-profileplayerinfo-main")) {
					if (ComponentProfilePlayerInfo_Private_IsBrowsingTrophiesHistory(ComponentProfilePlayerInfo_G_State)) {
						// Do nothing
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_G_State, Event.To);
					} else if (
						Event.From == Event.To &&
						Event.From.ControlId == ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesList.ControlId && (
							Event.Input == CMlScriptEvent::EMenuNavAction::Left ||
							Event.Input == CMlScriptEvent::EMenuNavAction::Right
						)
					) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetFocusedTrophy(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.FocusedTrophyKey - 1);
							ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_Focus);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetFocusedTrophy(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.FocusedTrophyKey + 1);
							ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_Focus);
						}
					} else if (
						Event.From == Event.To && (
							Event.From.ControlId == "ComponentProfilePlayerInfo_frame-trophies-ranking" ||
							Event.From.ControlId == "ComponentProfilePlayerInfo_frame-info-ranking"
						) && (
							Event.Input == CMlScriptEvent::EMenuNavAction::Left ||
							Event.Input == CMlScriptEvent::EMenuNavAction::Right
						)
					) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.TrophiesRankingsPager.CurrentPage + 1, True);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.TrophiesRankingsPager.CurrentPage - 1, True);
						}
					} else if (
						Event.From == Event.To &&
						Event.From.ControlId == "ComponentProfilePlayerInfo_frame-info-campaign-ranking" && (
							Event.Input == CMlScriptEvent::EMenuNavAction::Left ||
							Event.Input == CMlScriptEvent::EMenuNavAction::Right
						)
					) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
							if (!ComponentProfilePlayerInfo_Pager::IsAtLastPage(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)) {
								ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_ArrowSelect);
							}
							ComponentProfilePlayerInfo_G_State.IsTTSContextUpdateNeeded = True;
							ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::GoToNextPage(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager);
							ComponentProfilePlayerInfo_Private_PlayPagerAnim(ComponentProfilePlayerInfo_G_State.Controls.Frame_PreviousCampaign);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
							if (!ComponentProfilePlayerInfo_Pager::IsAtFirstPage(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)) {
								ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_ArrowSelect);
							}
							ComponentProfilePlayerInfo_G_State.IsTTSContextUpdateNeeded = True;
							ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::GoToPreviousPage(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager);
							ComponentProfilePlayerInfo_Private_PlayPagerAnim(ComponentProfilePlayerInfo_G_State.Controls.Frame_NextCampaign);
						}
					} else if (
						Event.From != Null &&
						Event.To != Null &&
						Event.From.HasClass("ComponentProfilePlayerInfo_bottom-button") &&
						!Event.To.HasClass("ComponentProfilePlayerInfo_bottom-button")
					) {
						ComponentProfilePlayerInfo_LastBottomButtonFocused = Event.From;
						ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
					}  else if (
						Event.From != Null &&
						Event.To != Null &&
						!Event.From.HasClass("ComponentProfilePlayerInfo_bottom-button") &&
						Event.To.HasClass("ComponentProfilePlayerInfo_bottom-button")
					) {
						if (!ComponentNavigation_ComponentNavigation::IsLocked(ComponentProfilePlayerInfo_LastBottomButtonFocused)) {
							ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, ComponentProfilePlayerInfo_LastBottomButtonFocused);
						} else {
							ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
						}
					} else {
						ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
					}
					ComponentProfilePlayerInfo_Private_TTSContextUpdate(ComponentProfilePlayerInfo_G_State, Event.To as CMlFrame);
				}
			}
			case ComponentNavigation_ComponentNavigation::C_EventType_NavigateMouse: {
				if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-profileplayerinfo-main")) {
					ComponentProfilePlayerInfo_Private_TTSContextUpdate(ComponentProfilePlayerInfo_G_State, Event.To as CMlFrame);
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_G_State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
					}
				} else if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-profileplayerinfo-mouse-only")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_G_State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						if (
							Event.To != Null &&
							Event.To.HasClass("ComponentProfilePlayerInfo_button-trophy") &&
							!ComponentNavigation_ComponentNavigation::IsLocked(ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesList)
						) {
							declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
							if (FocusedControl == Null || FocusedControl.ControlId != ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesList.ControlId) {
								ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, FocusedControl, ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesList);
							}
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetFocusedTrophy(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_TL::ToInteger(Event.To.DataAttributeGet("trophy-key")));
						}
						ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
					}
				}
			}
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				if (Event.CustomEventType == Trackmania_CampaignStore::C_Event_MyQuarterlyCampaignsRankingsUpdated) {
					ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::SetTotal(
						ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager,
						Trackmania_CampaignStore::GetMyQuarterlyCampaignsTotal()
					);
					ComponentProfilePlayerInfo_Private_UpdateMyQuarterlyCampaignsRankings(
						ComponentProfilePlayerInfo_G_State,
						Trackmania_CampaignStore::GetMyQuarterlyCampaignsRankings(),
						Trackmania_CampaignStore::GetMyQuarterlyCampaignsNames(),
						ComponentProfilePlayerInfo_Pager::GetIndex(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)
					);
				}
			}
		}
	}

	foreach (Event in CMGame_Scroll::GetPendingEvents(This)) {
		if (Event.Scroll == ComponentProfilePlayerInfo_G_State.Controls.Scroll_TrophiesHistory) {
			switch (Event.Type) {
				case CMGame_Scroll::C_EventType_Update: {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						if (ComponentProfilePlayerInfo_G_State.TrophiesHistory.TrophyScroll.Content.existskey(Key)) {
							ComponentProfilePlayerInfo_Private_ShowTrophyHistoryEntry(Frame_Element, ComponentProfilePlayerInfo_G_State.TrophiesHistory.TrophyScroll.Content[Key]);
						} else {
							ComponentProfilePlayerInfo_Private_ShowTrophyHistoryEntryLoading(Frame_Element);
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						ComponentProfilePlayerInfo_Private_HideTrophyHistoryEntry(Frame_Element);
					}
				}
				case CMGame_Scroll::C_EventType_PagerUpdate: {
					ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_RequestTrophyHistory(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.HistoryTrophyType, Event.PagerOffset, Event.PagerCount);
				}
			}
		}
	}

	foreach (Event in Trackmania_NavigationTabs::GetPendingEvents(This)) {
		switch (Event.Type) {
			case Trackmania_NavigationTabs::C_EventType_Select: {
				if (Event.Frame_NavigationTabs.ControlId == ComponentProfilePlayerInfo_G_State.Controls.NavigationTabs_Categories.ControlId) {
					ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_UpdateTabDisplayed(ComponentProfilePlayerInfo_G_State, Event.CurrentTab);
					ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs, Trackmania_NavigationTabs::GetCurrentTabLabel(ComponentProfilePlayerInfo_G_State.Controls.NavigationTabs_Categories));
					ParentApp.TTS_Context_Read(ComponentProfilePlayerInfo_C_TTSContextLevel_Page);
				}
			}
		}
	}

	// Process trophy history task
	if (ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory != NullId) {
		if (ScoreMgr != Null && ScoreMgr.TaskResults.existskey(ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory)) {
			declare CTaskResult_AccountTrophyGainHistory Task = (ScoreMgr.TaskResults[ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory] as CTaskResult_AccountTrophyGainHistory);
			if (!Task.IsProcessing) {
				ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetTrophyHistoryScroll(
					ComponentProfilePlayerInfo_G_State,
					ComponentProfilePlayerInfo_G_State.TrophiesHistory.RequestedTrophyType,
					ComponentProfilePlayerInfo_G_State.TrophiesHistory.RequestedOffset,
					Task
				);
				ScoreMgr.TaskResult_Release(ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory);
				ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory = NullId;
			}
		} else {
			ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory = NullId;
		}
	}

	// Process trophy ranking request
	if (ComponentProfilePlayerInfo_Http::IsInitialized(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking)) {
		ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking = ComponentProfilePlayerInfo_Http::Update(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking);
		if (!ComponentProfilePlayerInfo_Http::IsRunning(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking)) {
			declare LibCampaignStruct_K_Ranking[] Ranking;
			declare Integer Points = 0;
			declare Integer Echelon = ComponentProfilePlayerInfo_C_Echelon_Null;
			if (ComponentProfilePlayerInfo_Http::IsSuccess(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking)) {
				declare Response = ComponentProfilePlayerInfo_LeaderboardAPI::GetResponseFromGetPlayersTrophyRanking(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking);
				if (Response.Players.count >= 1) {
					declare PlayerRanking = Response.Players[0];
					Points = PlayerRanking.Points;
					Echelon = PlayerRanking.Echelon;
					Ranking = PlayerRanking.Ranking;
					if (LocalUser.WebServicesUserId == ComponentProfilePlayerInfo_G_State.PlayerProfile.AccountId) {
						Trackmania_UserStore::Action_UpdateUserTrophyRankings(This, PlayerRanking);
					}
				}
			} else {
				ComponentProfilePlayerInfo_G_State.TrophyRankingLoadingError = ""^ComponentProfilePlayerInfo_Http::GetStatusCode(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking);
			}
			ComponentProfilePlayerInfo_Private_SetTrophiesPoints(ComponentProfilePlayerInfo_G_State, Points);
			ComponentProfilePlayerInfo_Private_SetEchelon(ComponentProfilePlayerInfo_G_State, Echelon);
			ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetTrophiesRankings(ComponentProfilePlayerInfo_G_State, Ranking);

			ComponentProfilePlayerInfo_Http::Destroy(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking);
			ComponentProfilePlayerInfo_Private_UpdateTrophiesRankingLoading(ComponentProfilePlayerInfo_G_State);
			CMGame_LoadingSpinner::SetIsLoading(This, ComponentProfilePlayerInfo_G_State.Controls.Spinner_PlayerCardEchelon, False);
		}
	}

	// Process trophies retrieve task
	if (ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary != NullId) {
		if (ParentApp.ScoreMgr.TaskResults.existskey(ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary)) {
			declare CTaskResult_AccountTrophyLastYearSummary Task <=> (ParentApp.ScoreMgr.TaskResults[ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary] as CTaskResult_AccountTrophyLastYearSummary);
			if (!Task.IsProcessing) {
				if (Task.HasSucceeded) {
					ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetTrophies(ComponentProfilePlayerInfo_G_State, Task.Summary);
				} else {
					ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesError.Value = ComponentProfilePlayerInfo_TL::Compose("Error while retrieving trophies (code: %1)", ""^Task.ErrorCode);
					ComponentProfilePlayerInfo_G_State.TrophiesLoadingError = True;
				}
				ParentApp.ScoreMgr.TaskResult_Release(ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary);
				ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary = NullId;
				ComponentProfilePlayerInfo_Private_DisplayTrophies(ComponentProfilePlayerInfo_G_State);
			}
		} else {
			ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesError.Value = ComponentProfilePlayerInfo_TL::Compose("Error while retrieving trophies (code: %1)", ComponentProfilePlayerInfo_C_ErrorCode_TaskDeleted);
			ComponentProfilePlayerInfo_G_State.TrophiesLoadingError = True;
			ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary = NullId;
			ComponentProfilePlayerInfo_Private_DisplayTrophies(ComponentProfilePlayerInfo_G_State);
		}
	}

	// Process matchmaking ranked stats request
	if (ComponentProfilePlayerInfo_Http::IsInitialized(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats)) {
		ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats = ComponentProfilePlayerInfo_Http::Update(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats);
		if (!ComponentProfilePlayerInfo_Http::IsRunning(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats)) {
			if (ComponentProfilePlayerInfo_Http::IsSuccess(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats)) {
				ComponentProfilePlayerInfo_G_State.Ranked.Stats = ComponentProfilePlayerInfo_MatchmakingAPI::GetResponseFromGetPlayerMatchmakingStatistics(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats);
			} else {
				ComponentProfilePlayerInfo_G_State.Ranked.Stats = LibStructuresMatchmaking_K_PlayerStatistics {};
			}
			ComponentProfilePlayerInfo_Private_SetRankedStats(ComponentProfilePlayerInfo_G_State, LocalUser.WebServicesUserId == ComponentProfilePlayerInfo_G_State.Ranked.Stats.AccountId);
			ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats);
			CMGame_LoadingSpinner::SetIsLoading(This, ComponentProfilePlayerInfo_G_State.Controls.Spinner_Ranked, False);
		}
	}

	// Process royal stats request
	if (ComponentProfilePlayerInfo_Http::IsInitialized(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats)) {
		ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Update(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats);
		if (!ComponentProfilePlayerInfo_Http::IsRunning(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats)) {
			if (ComponentProfilePlayerInfo_Http::IsSuccess(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats)) {
				ComponentProfilePlayerInfo_G_State.Royal.Stats = ComponentProfilePlayerInfo_MatchmakingAPI::GetResponseFromGetPlayerMatchmakingStatistics(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats);
			} else {
				ComponentProfilePlayerInfo_G_State.Royal.Stats = LibStructuresMatchmaking_K_PlayerStatistics {};
			}
			ComponentProfilePlayerInfo_Private_SetRoyalStats(ComponentProfilePlayerInfo_G_State);
			ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats);
			CMGame_LoadingSpinner::SetIsLoading(This, ComponentProfilePlayerInfo_G_State.Controls.Spinner_Royal, False);
		}
	}

	// Process super royal stats request
	if (ComponentProfilePlayerInfo_Http::IsInitialized(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats)) {
		ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Update(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats);
		if (!ComponentProfilePlayerInfo_Http::IsRunning(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats)) {
			if (ComponentProfilePlayerInfo_Http::IsSuccess(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats)) {
				ComponentProfilePlayerInfo_G_State.SuperRoyal.Stats = ComponentProfilePlayerInfo_MatchmakingAPI::GetResponseFromSuperRoyalStats(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats);
			} else {
				ComponentProfilePlayerInfo_G_State.SuperRoyal.Stats = LibStructuresMatchmaking_K_SuperRoyalStatistics {};
			}
			ComponentProfilePlayerInfo_Private_SetRoyalStats(ComponentProfilePlayerInfo_G_State);
			ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats);
		}
	}

	// Get player display name task
	if (ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName)) {
		ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName = ComponentProfilePlayerInfo_Task::Update(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName);
		if (!ComponentProfilePlayerInfo_Task::IsRunning(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName)) {
			if (ComponentProfilePlayerInfo_Task::IsSuccess(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName)) {
				ComponentProfilePlayerInfo_G_State.PlayerProfile.Name = UserMgr.FindDisplayName(ComponentProfilePlayerInfo_G_State.PlayerProfile.AccountId, ComponentProfilePlayerInfo_G_State.PlayerProfile.IsFirstPartyDisplayName);
			} else {
				ComponentProfilePlayerInfo_G_State.Controls.Label_Error.SetText("Some information were not retrieved correctly. Please try again to display the missing information.");
			}
			ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName = ComponentProfilePlayerInfo_Task::Destroy(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName);
		}
	}

	// Get player club tag task
	if (ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList)) {
		ComponentProfilePlayerInfo_G_State.Task_GetClubTagList = ComponentProfilePlayerInfo_Task::Update(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList);
		if (!ComponentProfilePlayerInfo_Task::IsRunning(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList)) {
			declare CTaskResult_ClubTagList SourceTask = ComponentProfilePlayerInfo_Task::GetSourceTask_ClubTagList(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList);
			if (ComponentProfilePlayerInfo_Task::IsSuccess(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList) && SourceTask != Null) {
				ComponentProfilePlayerInfo_G_State.PlayerProfile.ClubTag = SourceTask.GetClubTag(ComponentProfilePlayerInfo_G_State.PlayerProfile.AccountId);
			} else {
				ComponentProfilePlayerInfo_G_State.Controls.Label_Error.SetText("Some information were not retrieved correctly. Please try again to display the missing information.");
			}
			ComponentProfilePlayerInfo_G_State.Task_GetClubTagList = ComponentProfilePlayerInfo_Task::Destroy(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList);
		}
	}

	// Get player zone task
	if (ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList)) {
		ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList = ComponentProfilePlayerInfo_Task::Update(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList);
		if (!ComponentProfilePlayerInfo_Task::IsRunning(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList)) {
			declare CTaskResult_UserZoneList SourceTask = ComponentProfilePlayerInfo_Task::GetSourceTask_UserZoneList(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList);
			if (ComponentProfilePlayerInfo_Task::IsSuccess(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList) && SourceTask != Null) {
				declare CZone Zone = SourceTask.GetUserZone(ComponentProfilePlayerInfo_G_State.PlayerProfile.AccountId);
				if (Zone != Null) {
					ComponentProfilePlayerInfo_G_State.PlayerProfile.Zone = ComponentProfilePlayerInfo_K_Zone {
						Id = Zone.Id,
						ParentId = Zone.ParentId,
						Name = Zone.Name,
						Path = Zone.Path,
						FullPath = Zone.FullPath,
						FlagUrl = Zone.FlagUrl,
						CountryFlagUrl = Zone.CountryFlagUrl,
						CarSkinName = Zone.Model_CarSport_SkinName,
						CarSkinUrl = Zone.Model_CarSport_SkinUrl,
						PilotSkinName = Zone.Model_CharacterPilot_SkinName,
						PilotSkinUrl = Zone.Model_CharacterPilot_SkinUrl
					};
				}
			} else {
				ComponentProfilePlayerInfo_G_State.Controls.Label_Error.SetText("Some information were not retrieved correctly. Please try again to display the missing information.");
			}
			ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList = ComponentProfilePlayerInfo_Task::Destroy(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList);
		}
	}

	// Get player prestige skin task
	if (ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin)) {
		ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin = ComponentProfilePlayerInfo_Task::Update(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin);
		if (!ComponentProfilePlayerInfo_Task::IsRunning(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin)) {
			declare CTaskResult_UserPrestige SourceTask = ComponentProfilePlayerInfo_Task::GetSourceTask_UserPrestige(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin);
			if (ComponentProfilePlayerInfo_Task::IsSuccess(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin) && SourceTask != Null) {
				if (SourceTask.UserPrestige != Null) {
					ComponentProfilePlayerInfo_G_State.PlayerProfile.CarSkin.PrestigeOptions = ComponentProfilePlayerInfo_PrestigeStruct::ConvertPrestige(SourceTask.UserPrestige).SkinOptions;
				}
			} else {
				ComponentProfilePlayerInfo_G_State.Controls.Label_Error.SetText("Some information were not retrieved correctly. Please try again to display the missing information.");
			}
			ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin = ComponentProfilePlayerInfo_Task::Destroy(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin);
		}
	}

	// Get player skins task
	if (ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetSkinList)) {
		ComponentProfilePlayerInfo_G_State.Task_GetSkinList = ComponentProfilePlayerInfo_Task::Update(ComponentProfilePlayerInfo_G_State.Task_GetSkinList);
		if (!ComponentProfilePlayerInfo_Task::IsRunning(ComponentProfilePlayerInfo_G_State.Task_GetSkinList)) {
			declare CTaskResult_NSSkinList SourceTask = ComponentProfilePlayerInfo_Task::GetSourceTask_NSSkinList(ComponentProfilePlayerInfo_G_State.Task_GetSkinList);
			if (ComponentProfilePlayerInfo_Task::IsSuccess(ComponentProfilePlayerInfo_G_State.Task_GetSkinList) && SourceTask != Null) {
				if (SourceTask.SkinList.count > 0) {
					declare Text PrestigeOptions = ComponentProfilePlayerInfo_G_State.PlayerProfile.CarSkin.PrestigeOptions;
					ComponentProfilePlayerInfo_G_State.PlayerProfile.CarSkin = LibStructuresClub_GetSkinFromNSSkin(SourceTask.SkinList[0], True, False);
					ComponentProfilePlayerInfo_G_State.PlayerProfile.CarSkin.PrestigeOptions = PrestigeOptions; // Keep the prestige skin options rerieved earlier
				}
			} else {
				ComponentProfilePlayerInfo_G_State.Controls.Label_Error.SetText("Some information were not retrieved correctly. Please try again to display the missing information.");
			}
			ComponentProfilePlayerInfo_G_State.Task_GetSkinList = ComponentProfilePlayerInfo_Task::Destroy(ComponentProfilePlayerInfo_G_State.Task_GetSkinList);
		}
	}

	if (
		!ComponentProfilePlayerInfo_G_State.IsPlayerProfileUpdated &&
		!ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList) &&
		!ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList) &&
		!ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName) &&
		!ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin) &&
		!ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetSkinList)
	) {
		ComponentProfilePlayerInfo_G_State.IsPlayerProfileUpdated = True;
		ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.PlayerProfile, True, False);
	}

	if (!ComponentProfilePlayerInfo_Privileges::Check_IsComplete(ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck)) {
		ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck = ComponentProfilePlayerInfo_Privileges::Check_Update(ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck);
		if (ComponentProfilePlayerInfo_Privileges::Check_IsComplete(ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck)) {
			ComponentProfilePlayerInfo_G_State.PrivilegeCheck.User.CanViewGameHistory = ComponentProfilePlayerInfo_Privileges::Check_HasPrivilege(ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck);
			ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck = ComponentProfilePlayerInfo_Privileges::Check_Destroy(ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck);
			ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.PrivilegeCheck.User, False, False);
		}
	}
} else {
	if (This is CMlScriptIngame) {
		/* Report system pop up events (used IN GAME) */
		foreach (Event in ComponentPopUpReportSystem::GetPendingEvents(This)) {
			switch (Event.Type) {
				case ComponentPopUpReportSystem::C_EventType_Close: {
					ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Enable(ComponentProfilePlayerInfo_G_State, True);
				}
			}
		}
	} else {
		/* Report system events (used in MENUS) */
		foreach (Event in ComponentProfilePlayerInfo_ReportSystem::GetPendingEvents()) {
			if (Event.LastUsingId == "component-profileplayerinfo") {
				switch (Event.Type) {
					case ComponentProfilePlayerInfo_ReportSystem::C_EventType_Close: {
						ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Enable(ComponentProfilePlayerInfo_G_State, True);
					}
				}
			}
		}
	}
}
***
		
// */
// @Component end component-profileplayerinfo

// @Component start component-medalstack
// /*

Void ComponentMedalStack_SetMedalsNumber(CMlControl _FrameInstance_Medals, Integer _MedalsNumber) {
	if (_FrameInstance_Medals == Null || !(_FrameInstance_Medals is CMlFrame)) return;

	_FrameInstance_Medals.Visible = _MedalsNumber > 0;
	declare CMlFrame Frame_Align <=> ((_FrameInstance_Medals as CMlFrame).GetFirstChild("ComponentMedalStack_frame-align") as CMlFrame);
	declare CMlFrame Frame_Global <=> ((_FrameInstance_Medals as CMlFrame).GetFirstChild("ComponentMedalStack_frame-global") as CMlFrame);
	if (Frame_Global == Null || Frame_Align == Null) return;

	declare Boolean IsInit for _FrameInstance_Medals = False;
	declare Integer BigMedalDirection for _FrameInstance_Medals = 0;
	declare Boolean IsColorize for _FrameInstance_Medals = True;
	declare Text[] ImageUrlList_Medals for _FrameInstance_Medals = [];
	declare Text[] ImageUrlList_Medals_Small for _FrameInstance_Medals = [];
	declare Text[] ImageUrlList_Medals_VerySmall for _FrameInstance_Medals = [];
	declare Text[] ImageUrlList_MedalsWithMipmaps for _FrameInstance_Medals = ["file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medal_Bronze.dds", "file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medal_Silver.dds", "file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medal_Gold.dds", "file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medal_Nadeo.dds"];
	declare Boolean IsIngame for _FrameInstance_Medals = False;
	declare Boolean DisplayShadows for _FrameInstance_Medals = False;
	declare Real MedalOffset for _FrameInstance_Medals = 0.;
	declare Real BigMedalOffset for _FrameInstance_Medals = 0.;
	declare Real BigMedalYOffset for _FrameInstance_Medals = 15.;
	declare Real MedalSize for _FrameInstance_Medals = 12.;
	declare Real Scale_BigMedal for _FrameInstance_Medals = -1.;

	if (!IsInit) {
		if (_FrameInstance_Medals.DataAttributeExists("bigmedaldirection")) {
			BigMedalDirection = ComponentMedalStack_TL::ToInteger(_FrameInstance_Medals.DataAttributeGet("bigmedaldirection"));
		}
		if (_FrameInstance_Medals.DataAttributeExists("iscolorize")) {
			IsColorize = ComponentMedalStack_Tools::GetBooleanAttribute(_FrameInstance_Medals, "iscolorize");
		}
		if (_FrameInstance_Medals.DataAttributeExists("isingame")) {
			IsIngame = ComponentMedalStack_Tools::GetBooleanAttribute(_FrameInstance_Medals, "isingame");
		}
		if (_FrameInstance_Medals.DataAttributeExists("displayshadows")) {
			DisplayShadows = ComponentMedalStack_Tools::GetBooleanAttribute(_FrameInstance_Medals, "displayshadows");

			declare CMlQuad Quad_ShadowStack <=> ((_FrameInstance_Medals as CMlFrame).GetFirstChild("quad-shadow-stack") as CMlQuad);
			declare CMlQuad Quad_ShadowBigMedal <=> ((_FrameInstance_Medals as CMlFrame).GetFirstChild("quad-shadow-bigmedal") as CMlQuad);

			Quad_ShadowStack.Visible = DisplayShadows;
			Quad_ShadowBigMedal.Visible = DisplayShadows;
			Quad_ShadowStack.ChangeImageUrl("file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medals_Shadow.dds");
			Quad_ShadowBigMedal.ChangeImageUrl("file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medals_Shadow.dds");
		}
		if (_FrameInstance_Medals.DataAttributeExists("medaloffset")) {
			MedalOffset = ComponentMedalStack_TL::ToReal(_FrameInstance_Medals.DataAttributeGet("medaloffset"));
		}
		if (_FrameInstance_Medals.DataAttributeExists("bigmedaloffset")) {
			BigMedalOffset = ComponentMedalStack_TL::ToReal(_FrameInstance_Medals.DataAttributeGet("bigmedaloffset"));
		}
		if (_FrameInstance_Medals.DataAttributeExists("bigmedalyoffset")) {
			BigMedalYOffset = ComponentMedalStack_TL::ToReal(_FrameInstance_Medals.DataAttributeGet("bigmedalyoffset"));
		}
		if (_FrameInstance_Medals.DataAttributeExists("medalsize")) {
			MedalSize = ComponentMedalStack_TL::ToReal(_FrameInstance_Medals.DataAttributeGet("medalsize"));
		}
		if (_FrameInstance_Medals.DataAttributeExists("bigmedalscale")) {
			Scale_BigMedal = ComponentMedalStack_TL::ToReal(_FrameInstance_Medals.DataAttributeGet("bigmedalscale"));
		}
	}


	declare Real Offset_ToBigMedal;
	if (IsIngame) {
		if (MedalOffset == 0.) MedalOffset = 9.;
		if (Scale_BigMedal == -1.) Scale_BigMedal = 1.7;
		if (BigMedalOffset == 0.) Offset_ToBigMedal = 8.5;
		else Offset_ToBigMedal = BigMedalOffset;
	} else {
		if (MedalOffset == 0.) MedalOffset = 5.;
		if (Scale_BigMedal == -1.) Scale_BigMedal = 1.5;
		if (BigMedalOffset == 0.) Offset_ToBigMedal = 6.;
		else Offset_ToBigMedal = BigMedalOffset;
	}

	declare Real SizeStack;
	if (BigMedalDirection == 0 || BigMedalDirection == 4 || BigMedalDirection == 5) {
		SizeStack = _MedalsNumber * MedalSize - ComponentMedalStack_ML::Max(0, _MedalsNumber-1) * MedalOffset;
	} else {
		SizeStack = (_MedalsNumber-1) * MedalSize - ComponentMedalStack_ML::Max(0, _MedalsNumber-2) * MedalOffset;
	}

	if (DisplayShadows) {
		declare CMlQuad Quad_ShadowStack <=> ((_FrameInstance_Medals as CMlFrame).GetFirstChild("quad-shadow-stack") as CMlQuad);
		declare CMlQuad Quad_ShadowBigMedal <=> ((_FrameInstance_Medals as CMlFrame).GetFirstChild("quad-shadow-bigmedal") as CMlQuad);

		Quad_ShadowStack.Visible = _MedalsNumber > 0;
		Quad_ShadowBigMedal.Visible = (
			_MedalsNumber > 1 &&
			BigMedalDirection != 0 &&
			BigMedalDirection != 4 &&
			BigMedalDirection != 5 &&
			BigMedalDirection != 3
		);

		switch (BigMedalDirection) {
			case 0: {
				Quad_ShadowStack.Size.X = SizeStack + MedalSize - MedalOffset * ComponentMedalStack_ML::Clamp(_MedalsNumber-1, 0, 1);
				declare PosX = 22. - (((_MedalsNumber-1)%2)*((MedalSize- MedalOffset)/2.) + ((_MedalsNumber-1)/2) * (MedalSize-MedalOffset) - 3.);
				Quad_ShadowStack.RelativePosition_V3 = <PosX, -3.25>;
			}
			case 1: {
				declare PosX = (MedalSize * Scale_BigMedal) /2. - SizeStack/2. + Offset_ToBigMedal;
				Quad_ShadowStack.RelativePosition_V3 = <PosX, -7.>;
				Quad_ShadowBigMedal.RelativePosition_V3 = <(MedalSize * Scale_BigMedal)/2.+10., -10.>;
			}
			case 2: {
				Quad_ShadowStack.RelativePosition_V3 = <0., -7.>;
				Quad_ShadowBigMedal.RelativePosition_V3 = <-(MedalSize * Scale_BigMedal)/2., 5.>;
			}
			case 3: {
				Quad_ShadowStack.RelativePosition_V3 = <0., -5.>;
			}
			case 4, 5: {
				Quad_ShadowStack.RelativePosition_V3 = <SizeStack/2., -5.>;
			}
		}
	}

	foreach (Index => Control in Frame_Global.Controls) {
		Control.Visible = Index < _MedalsNumber;
		declare Quad_Medal = (Control as CMlQuad);

		Quad_Medal.Size = <MedalSize, MedalSize>;

		if (IsInit && IsColorize) {
			switch (Index) {
				case 0: Quad_Medal.Colorize = <0.866667, 0.509804, 0.294118>;
				case 1: Quad_Medal.Colorize = <0.709804, 0.737255, 0.776471>;
				case 2: Quad_Medal.Colorize = <0.909804, 0.756863, 0.101961>;
				case 3: Quad_Medal.Colorize = <0., 1., 0.0823529>;
			}
		}

		if (Index < _MedalsNumber-1) {
			Quad_Medal.RelativeScale = 1.;

			if (ImageUrlList_MedalsWithMipmaps.existskey(Index)) {
				Quad_Medal.ChangeImageUrl(ImageUrlList_MedalsWithMipmaps[Index]);
			} else {
				declare Real MedalAbsoluteSize = MedalSize * Quad_Medal.AbsoluteScale;
				if (MedalAbsoluteSize < 10.) {
					if (ImageUrlList_Medals_VerySmall.count > 0) {
						if (ImageUrlList_Medals_VerySmall.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals_VerySmall[Index]);
					} else if (ImageUrlList_Medals_Small.count > 0) {
						if (ImageUrlList_Medals_Small.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals_Small[Index]);
					} else {
						Quad_Medal.ChangeImageUrl("");
					}
				} else if (MedalAbsoluteSize < 16.) {
					if ((ImageUrlList_Medals_Small.count > 0)) {
						if (ImageUrlList_Medals_Small.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals_Small[Index]);
					} else if (ImageUrlList_Medals.count > 0) {
						if (ImageUrlList_Medals.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals[Index]);
					} else {
						Quad_Medal.ChangeImageUrl("");
					}
				} else {
					if (ImageUrlList_Medals.count > 0) {
						if (ImageUrlList_Medals.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals[Index]);
					} else if (ImageUrlList_Medals_Small.count > 0) {
						if (ImageUrlList_Medals_Small.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals_Small[Index]);
					} else {
						Quad_Medal.ChangeImageUrl("");
					}
				}
			}

			switch (BigMedalDirection) {
				case 0: {
					declare PosX = - SizeStack + (Quad_Medal.Size.X * (Index)) - (MedalOffset * ComponentMedalStack_ML::Max(Index-1, 0)) + 22.;
					if (Index == 0) PosX += Quad_Medal.Size.X - MedalOffset/4.;
					Quad_Medal.RelativePosition_V3 = <PosX, 0.>;
				}
				case 1: {
					declare PosX = (Quad_Medal.Size.X * Scale_BigMedal) /2. - SizeStack + Quad_Medal.Size.X * Index - Index * MedalOffset + Offset_ToBigMedal;
					Quad_Medal.RelativePosition_V3 = <PosX, 0.>;
				}
				case 2: {
					declare PosX = - SizeStack/2. + Quad_Medal.Size.X * Index - Index * MedalOffset;
					Quad_Medal.RelativePosition_V3 = <PosX, 0.>;
				}
				case 3: {
					declare PosX = - SizeStack/2. + Quad_Medal.Size.X * Index - Index * MedalOffset;
					Quad_Medal.RelativePosition_V3 = <PosX, 0.>;
				}
				case 4, 5: {
					declare PosX = Index * (Quad_Medal.Size.X - MedalOffset);
					Quad_Medal.RelativePosition_V3 = <PosX, 0.>;
				}
			}
		} else {
			switch (BigMedalDirection) {
				case 0: {
					declare PosX = - SizeStack + (Quad_Medal.Size.X * (Index)) - (MedalOffset * ComponentMedalStack_ML::Max(Index-1, 0)) + 22.;
					if (Index == 0) PosX += Quad_Medal.Size.X/2.+ MedalOffset/4.;
					Quad_Medal.RelativePosition_V3 = <PosX, 0.>;
				}
				case 1: {
					declare PosX = (Quad_Medal.Size.X * Scale_BigMedal)/2.;
					Quad_Medal.RelativeScale = Scale_BigMedal;
					Quad_Medal.RelativePosition_V3 = <PosX, 0.>;
				}
				case 2: {
					declare PosX = (- Quad_Medal.Size.X * Scale_BigMedal) /2.;
					Quad_Medal.RelativeScale = Scale_BigMedal;
					Quad_Medal.RelativePosition_V3 = <PosX, BigMedalYOffset>;
				}
				case 3: {
					declare PosX = (- Quad_Medal.Size.X * Scale_BigMedal) /2. + 5.;
					Quad_Medal.RelativeScale = Scale_BigMedal;
					Quad_Medal.RelativePosition_V3 = <PosX, BigMedalYOffset>;
				}
				case 4, 5: {
					declare PosX = Index * (Quad_Medal.Size.X - MedalOffset);
					Quad_Medal.RelativePosition_V3 = <PosX, 0.>;
				}
			}

			if (ImageUrlList_MedalsWithMipmaps.existskey(Index)) {
				Quad_Medal.ChangeImageUrl(ImageUrlList_MedalsWithMipmaps[Index]);
			} else {
				declare Real MedalAbsoluteSize = MedalSize * Quad_Medal.AbsoluteScale;
				if (MedalAbsoluteSize < 10.) {
					if (ImageUrlList_Medals_VerySmall.count > 0) {
						if (ImageUrlList_Medals_VerySmall.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals_VerySmall[Index]);
					} else if (ImageUrlList_Medals_Small.count > 0) {
						if (ImageUrlList_Medals_Small.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals_Small[Index]);
					} else {
						Quad_Medal.ChangeImageUrl("");
					}
				} else if (MedalAbsoluteSize < 16.) {
					if ((ImageUrlList_Medals_Small.count > 0)) {
						if (ImageUrlList_Medals_Small.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals_Small[Index]);
					} else if (ImageUrlList_Medals.count > 0) {
						if (ImageUrlList_Medals.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals[Index]);
					} else {
						Quad_Medal.ChangeImageUrl("");
					}
				} else {
					if (ImageUrlList_Medals.count > 0) {
						if (ImageUrlList_Medals.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals[Index]);
					} else if (ImageUrlList_Medals_Small.count > 0) {
						if (ImageUrlList_Medals_Small.existskey(Index)) Quad_Medal.ChangeImageUrl(ImageUrlList_Medals_Small[Index]);
					} else {
						Quad_Medal.ChangeImageUrl("");
					}
				}
			}
		}
	}

	if (BigMedalDirection == 4) {
		Frame_Align.RelativePosition_V3.X = -SizeStack/2;
	}

	IsInit = True;
}

// */
// @Component end component-medalstack

// @Component start component-racemapinfos
// /*

declare Boolean ComponentRaceMapInfos_G_IgnoreForcedUpdate;
declare Boolean ComponentRaceMapInfos_G_RequestManualUpdate;
declare Boolean ComponentRaceMapInfos_G_RequestRankAnimation;
declare Boolean ComponentRaceMapInfos_G_RequestStopSounds;
declare Boolean ComponentRaceMapInfos_G_IsDisplayed;
declare ComponentRaceMapInfos_K_RankAnim[Integer] ComponentRaceMapInfos_G_RankAnims;
declare ComponentRaceMapInfos_K_ZoneAnim[Integer] ComponentRaceMapInfos_G_ZoneAnims;
declare CMlLabel ComponentRaceMapInfos_G_Label_TimeLegend;

Void ComponentRaceMapInfos_SetIgnoreForcedUpdate(Boolean _IgnoreForcedUpdate) {
	ComponentRaceMapInfos_G_IgnoreForcedUpdate = _IgnoreForcedUpdate;
}

Void ComponentRaceMapInfos_RequestManualUpdate(Boolean _RequestRankAnimation) {
	ComponentRaceMapInfos_G_RequestManualUpdate = True;
	ComponentRaceMapInfos_G_RequestRankAnimation = _RequestRankAnimation;
}

Void ComponentRaceMapInfos_SetDisplayed(Boolean _IsDisplayed) {
	ComponentRaceMapInfos_G_IsDisplayed = _IsDisplayed;
}

Void ComponentRaceMapInfos_PlayZoneAnimation(
	CMlFrame _Frame_Ranking,
	Integer _StartTime,
	Integer _Duration,
	Real _TargetScale,
	Vec2 _StartingPos,
	Vec2 _TargetPos
) {
	_Frame_Ranking.RelativeScale = 1.4*_TargetScale;
	_Frame_Ranking.Hide();
	_Frame_Ranking.RelativeRotation = ComponentRaceMapInfos_ML::Rand(-4.,4.);
	_Frame_Ranking.RelativePosition_V3 = _StartingPos;

	AnimMgr.Flush(_Frame_Ranking);
	AnimMgr.Add(_Frame_Ranking, "<anim scale=\""^_TargetScale^"\" pos=\""^_TargetPos.X^" "^_TargetPos.Y^"\" hidden=\"0\" rot=\""^0^"\"/>", _StartTime, _Duration, CAnimManager::EAnimManagerEasing::QuadIn);
}

ComponentRaceMapInfos_K_RankAnim ComponentRaceMapInfos_PlayRankAnimation(
	CMlLabel _Label_Ranking,
	Integer _InitialPosition,
	Integer _NewPosition,
	Integer _StartTime,
	Integer _MaxDuration,
	Real _LabelRankingSizeX
) {
	declare ComponentRaceMapInfos_K_RankAnim RankAnim;
	RankAnim.Label_Ranking = _Label_Ranking;

	// Rank displayed
	RankAnim.InitialPosition = _InitialPosition;
	RankAnim.PositionDifference = _NewPosition - _InitialPosition;
	_Label_Ranking.Value = ComponentRaceMapInfos_Tools::FormatTop(RankAnim.InitialPosition, True, ComponentRaceMapInfos_C_FormatLimit);
	_Label_Ranking.Size.X = _LabelRankingSizeX;

	// Duration
	RankAnim.StartTime = _StartTime;
	RankAnim.AnimDuration = _MaxDuration;
	if (ComponentRaceMapInfos_ML::Abs(RankAnim.PositionDifference) < 3) RankAnim.AnimDuration = ComponentRaceMapInfos_ML::TruncInteger(_MaxDuration * 0.4);
	RankAnim.MaxUpdateFrequency = 60;

	return RankAnim;
}

Void ComponentRaceMapInfos_SetRanking(
	CMlFrame _Frame_Ranking,
	CMlFrame _Frame_Ranking2,
	CMlFrame _Frame_Ranking3,
	LibCampaignStruct_K_Ranking[] _Rankings,
	LibCampaignStruct_K_Ranking[] _PrevRankings,
	Boolean _PlayAnimation,
	Integer _CurrentMedal,
	Boolean _IsSeasonLive
) {
	declare CMlLabel Label_Ranking <=> (_Frame_Ranking.GetFirstChild("ComponentRaceMapInfos_label-ranking") as CMlLabel);
	declare CMlLabel Label_Zone <=> (_Frame_Ranking.GetFirstChild("ComponentRaceMapInfos_label-zone") as CMlLabel);
	declare CMlLabel Label_Ranking2 <=> (_Frame_Ranking2.GetFirstChild("ComponentRaceMapInfos_label-ranking") as CMlLabel);
	declare CMlLabel Label_Zone2 <=> (_Frame_Ranking2.GetFirstChild("ComponentRaceMapInfos_label-zone") as CMlLabel);
	declare CMlLabel Label_Ranking3 <=> (_Frame_Ranking3.GetFirstChild("ComponentRaceMapInfos_label-ranking") as CMlLabel);
	declare CMlLabel Label_Zone3 <=> (_Frame_Ranking3.GetFirstChild("ComponentRaceMapInfos_label-zone") as CMlLabel);

	declare Boolean PlayRankAnimation = _PlayAnimation;
	declare Boolean PlayZoneAnimation = _PlayAnimation;
	declare Integer ZonesToDisplayNb = 1;

	declare LibCampaignStruct_K_Ranking TopRank = Trackmania_CampaignStore::GetTopRank(_Rankings);
	declare LibCampaignStruct_K_Ranking PrevTopRank = Trackmania_CampaignStore::GetTopRank(_PrevRankings);

	declare Text HigherZoneName;
	declare Text LowerZoneName;
	declare LibCampaignStruct_K_Ranking Zone2Ranking;
	declare LibCampaignStruct_K_Ranking PrevZone2Ranking;
	declare LibCampaignStruct_K_Ranking Zone3Ranking;
	declare LibCampaignStruct_K_Ranking PrevZone3Ranking;
	if (
		InputPlayer != Null && InputPlayer.User != Null && _IsSeasonLive &&
			(_CurrentMedal == ComponentRaceMapInfos_Medals::C_ScoreMgrMedal_Gold ||
			_CurrentMedal == ComponentRaceMapInfos_Medals::C_ScoreMgrMedal_Author)
	) {
		declare Text[] UserZones = ComponentRaceMapInfos_TL::Split("|", InputPlayer.User.ZonePath);
		if (UserZones.exists(TopRank.ZoneName)) {
			declare TopRankZoneKey = UserZones.keyof(TopRank.ZoneName);
			if (UserZones.existskey(TopRankZoneKey - 1)) {
				HigherZoneName = UserZones[TopRankZoneKey - 1];
				foreach (ZoneRanking in _Rankings) {
					if (ZoneRanking.ZoneName == HigherZoneName) {
						Zone2Ranking = ZoneRanking;
						ZonesToDisplayNb += 1;
						break;
					}
				}
				foreach (ZoneRanking in _PrevRankings) {
					if (ZoneRanking.ZoneName == HigherZoneName) {
						PrevZone2Ranking = ZoneRanking;
						break;
					}
				}
			}
			if (UserZones.existskey(TopRankZoneKey + 1)) {
				LowerZoneName = UserZones[TopRankZoneKey + 1];
				foreach (ZoneRanking in _Rankings) {
					if (ZoneRanking.ZoneName == LowerZoneName) {
						ZonesToDisplayNb += 1;
						if (ZonesToDisplayNb == 2) Zone2Ranking = ZoneRanking;
						else if (ZonesToDisplayNb == 3) Zone3Ranking = ZoneRanking;
						break;
					}
				}
				foreach (ZoneRanking in _PrevRankings) {
					if (ZoneRanking.ZoneName == LowerZoneName) {
						if (ZonesToDisplayNb == 2) PrevZone2Ranking = ZoneRanking;
						else if (ZonesToDisplayNb == 3) PrevZone3Ranking = ZoneRanking;
						break;
					}
				}
			}
		}
	}

	declare LibCampaignStruct_K_Ranking CurrentZonePrevRanking;
	foreach (PrevRanking in _PrevRankings) {
		if (PrevRanking.ZoneName == TopRank.ZoneName) {
			CurrentZonePrevRanking = PrevRanking;
			break;
		}
	}

	if (TopRank.ZoneName == PrevTopRank.ZoneName) {
		PlayZoneAnimation = False;
		if (CurrentZonePrevRanking.Position > 0 && TopRank.Position >= CurrentZonePrevRanking.Position) {
			PlayRankAnimation = False;
		}
	}

	if (TopRank.Position <= 0) {
		Label_Ranking.Value = "Not ranked";
		Label_Ranking.Size.X = 50.;
		Label_Zone.Value = "";
		Label_Ranking2.Value = "";
		Label_Zone2.Value = "";
		Label_Ranking3.Value = "";
		Label_Zone3.Value = "";
	} else if (PrevTopRank.Position > 0 && (PlayRankAnimation || PlayZoneAnimation)) { // "PrevTopRank.Position > 0" because anim is not played the first time player plays a map
		declare StartDelay = 250;
		declare AfterZoneChangeDelay = 250;
		declare RankAnimDuration = 2000;
		if (ZonesToDisplayNb > 1) RankAnimDuration = 1250;
		declare AfterRankAnim1Delay = 100;
		declare RankAnim2Duration = 400;
		declare AfterRankAnim2Delay = 100;
		declare RankAnim3Duration = 400;
		declare ZoneAnimDuration = 150;
		declare FrameRankingStartingPos = <-1.25969, -7.14404> + <-14.,2.>;
		declare FrameRanking2StartingPos = <7.84054, -12.2469> + <-14.,2.>;
		declare FrameRanking3StartingPos = <7.08472, -16.5333> + <-14.,2.>;

		Label_Zone.Value = ComponentRaceMapInfos_C_Zone_Translations.get(TopRank.ZoneName, ComponentRaceMapInfos_TL::GetTranslatedText(TopRank.ZoneName));
		ComponentRaceMapInfos_Tools::FitLabelValue(Label_Zone, 3., 0.25);
		Label_Zone.RelativePosition_V3.Y = 3. - (4. - Label_Zone.TextSizeReal) / 2.;
		if (ZonesToDisplayNb > 1 && Zone2Ranking.ZoneName != "") {
			Label_Zone2.Value = ComponentRaceMapInfos_C_Zone_Translations.get(Zone2Ranking.ZoneName, ComponentRaceMapInfos_TL::GetTranslatedText(Zone2Ranking.ZoneName));
			ComponentRaceMapInfos_Tools::FitLabelValue(Label_Zone2, 3., 0.25);
			Label_Zone2.RelativePosition_V3.Y = 3. - (4. - Label_Zone2.TextSizeReal) / 2.;
		}
		if (ZonesToDisplayNb > 2 && Zone3Ranking.ZoneName != "") {
			Label_Zone3.Value = ComponentRaceMapInfos_C_Zone_Translations.get(Zone3Ranking.ZoneName, ComponentRaceMapInfos_TL::GetTranslatedText(Zone3Ranking.ZoneName));
			ComponentRaceMapInfos_Tools::FitLabelValue(Label_Zone3, 3., 0.25);
			Label_Zone3.RelativePosition_V3.Y = 3. - (4. - Label_Zone3.TextSizeReal) / 2.;
		}

		if (PlayRankAnimation) {
			declare InitialPosition = CurrentZonePrevRanking.Position;
			if (InitialPosition <= 0) InitialPosition = TopRank.Length;
			declare StartTime = Now + StartDelay;
			if (PlayZoneAnimation) StartTime += ZoneAnimDuration * ZonesToDisplayNb + AfterZoneChangeDelay;

			declare ComponentRaceMapInfos_K_RankAnim RankAnim = ComponentRaceMapInfos_PlayRankAnimation(Label_Ranking, InitialPosition, TopRank.Position, StartTime, RankAnimDuration, 23.);
			RankAnim.IsSecondary = False;
			ComponentRaceMapInfos_G_RankAnims[1] = RankAnim;
			if (ZonesToDisplayNb > 1 && Zone2Ranking.ZoneName != "") {
				InitialPosition = PrevZone2Ranking.Position;
				if (InitialPosition <= 0) InitialPosition = Zone2Ranking.Length;
				StartTime += AfterRankAnim1Delay + RankAnim.AnimDuration; // RankAnim.AnimDuration can be shorter than RankAnimDuration if rank difference is too small
				RankAnim = ComponentRaceMapInfos_PlayRankAnimation(Label_Ranking2, InitialPosition, Zone2Ranking.Position, StartTime, RankAnim2Duration, 23.);
				RankAnim.IsSecondary = True;
				ComponentRaceMapInfos_G_RankAnims[2] = RankAnim;
			} else {
				Label_Ranking2.Value = "";
				Label_Zone2.Value = "";
			}
			if (ZonesToDisplayNb > 2 && Zone3Ranking.ZoneName != "") {
				InitialPosition = PrevZone3Ranking.Position;
				if (InitialPosition <= 0) InitialPosition = Zone3Ranking.Length;
				StartTime += AfterRankAnim2Delay + RankAnim.AnimDuration;
				RankAnim = ComponentRaceMapInfos_PlayRankAnimation(Label_Ranking3, InitialPosition, Zone3Ranking.Position, StartTime, RankAnim3Duration, 23.);
				RankAnim.IsSecondary = True;
				ComponentRaceMapInfos_G_RankAnims[3] = RankAnim;
			} else {
				Label_Ranking3.Value = "";
				Label_Zone3.Value = "";
			}
		}
		if (PlayZoneAnimation) {
			declare StartTime = Now + StartDelay;
			ComponentRaceMapInfos_G_ZoneAnims[0] = ComponentRaceMapInfos_K_ZoneAnim {PunchSoundPlayTime = StartTime, IsSecondary = False};
			ComponentRaceMapInfos_PlayZoneAnimation(_Frame_Ranking, StartTime, ZoneAnimDuration, 1., FrameRankingStartingPos, <-1.25969, -7.14404>);
			if (ZonesToDisplayNb > 1 && Zone2Ranking.ZoneName != "") {
				StartTime += ZoneAnimDuration;
				ComponentRaceMapInfos_G_ZoneAnims[1] = ComponentRaceMapInfos_K_ZoneAnim {PunchSoundPlayTime = StartTime, IsSecondary = True};
				ComponentRaceMapInfos_PlayZoneAnimation(_Frame_Ranking2, StartTime, ZoneAnimDuration, 0.75, FrameRanking2StartingPos, <7.84054, -12.2469>);
			}
			if (ZonesToDisplayNb > 2 && Zone3Ranking.ZoneName != "") {
				StartTime += ZoneAnimDuration;
				ComponentRaceMapInfos_G_ZoneAnims[2] = ComponentRaceMapInfos_K_ZoneAnim {PunchSoundPlayTime = StartTime, IsSecondary = True};
				ComponentRaceMapInfos_PlayZoneAnimation(_Frame_Ranking3, StartTime, ZoneAnimDuration, 0.75, FrameRanking3StartingPos, <7.08472, -16.5333>);
			}
		}
	} else {
		Label_Ranking.Value = ComponentRaceMapInfos_Tools::FormatTop(TopRank.Position, True, ComponentRaceMapInfos_C_FormatLimit);
		Label_Ranking.Size.X = 23.;
		Label_Zone.Value = ComponentRaceMapInfos_C_Zone_Translations.get(TopRank.ZoneName, ComponentRaceMapInfos_TL::GetTranslatedText(TopRank.ZoneName));
		ComponentRaceMapInfos_Tools::FitLabelValue(Label_Zone, 3., 0.25);
		Label_Zone.RelativePosition_V3.Y = 3. - (4. - Label_Zone.TextSizeReal) / 2.;

		if (ZonesToDisplayNb > 1 && Zone2Ranking.ZoneName != "") {
			Label_Ranking2.Value = ComponentRaceMapInfos_Tools::FormatTop(Zone2Ranking.Position, True, ComponentRaceMapInfos_C_FormatLimit);
			Label_Ranking2.Size.X = 23.;
			Label_Zone2.Value = ComponentRaceMapInfos_C_Zone_Translations.get(Zone2Ranking.ZoneName, ComponentRaceMapInfos_TL::GetTranslatedText(Zone2Ranking.ZoneName));
			ComponentRaceMapInfos_Tools::FitLabelValue(Label_Zone2, 3., 0.25);
			Label_Zone2.RelativePosition_V3.Y = 3. - (4. - Label_Zone2.TextSizeReal) / 2.;
		} else {
			Label_Ranking2.Value = "";
			Label_Zone2.Value = "";
		}

		if (ZonesToDisplayNb > 2 && Zone3Ranking.ZoneName != "") {
			Label_Ranking3.Value = ComponentRaceMapInfos_Tools::FormatTop(Zone3Ranking.Position, True, ComponentRaceMapInfos_C_FormatLimit);
			Label_Ranking3.Size.X = 23.;
			Label_Zone3.Value = ComponentRaceMapInfos_C_Zone_Translations.get(Zone3Ranking.ZoneName, ComponentRaceMapInfos_TL::GetTranslatedText(Zone3Ranking.ZoneName));
			ComponentRaceMapInfos_Tools::FitLabelValue(Label_Zone3, 3., 0.25);
			Label_Zone3.RelativePosition_V3.Y = 3. - (4. - Label_Zone3.TextSizeReal) / 2.;
		} else {
			Label_Ranking3.Value = "";
			Label_Zone3.Value = "";
		}
	}

	Label_Ranking.RelativePosition_V3.X = ComponentRaceMapInfos_ML::Max(57. - Label_Zone.ComputeWidth(Label_Zone.Value) - .5, 5.);
	Label_Ranking2.RelativePosition_V3.X = ComponentRaceMapInfos_ML::Max(57. - Label_Zone2.ComputeWidth(Label_Zone2.Value) - .5, 5.);
	Label_Ranking3.RelativePosition_V3.X = ComponentRaceMapInfos_ML::Max(57. - Label_Zone3.ComputeWidth(Label_Zone3.Value) - .5, 5.);
}

Void ComponentRaceMapInfos_SetNextMedal(CMlFrame _Frame_NextMedal, LibCampaignStruct_K_Map _CurrentMap) {
	if (_Frame_NextMedal == Null) return;
	if (
		(_CurrentMap.Name == "" &&
		_CurrentMap.Uid == "") ||
		_CurrentMap.Score <= 0
	) {
		_Frame_NextMedal.Hide();
		return;
	}
	declare CMlLabel Label_NextMedalTime <=> (_Frame_NextMedal.GetFirstChild("ComponentRaceMapInfos_label-next-medal-time") as CMlLabel);
	declare CMlQuad Quad_Medal <=> (_Frame_NextMedal.GetFirstChild("ComponentRaceMapInfos_quad-next-medal") as CMlQuad);
	_Frame_NextMedal.Show();
	switch (_CurrentMap.Medal) {
		case ComponentRaceMapInfos_Medals::C_ScoreMgrMedal_None: {
			Label_NextMedalTime.Value = LibCampaignStruct_GetMedalScoreText(_CurrentMap.BronzeTime, _CurrentMap.Type);
			Quad_Medal.ChangeImageUrl("file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medal_Bronze.dds");
		}
		case ComponentRaceMapInfos_Medals::C_ScoreMgrMedal_Bronze: {
			Label_NextMedalTime.Value = LibCampaignStruct_GetMedalScoreText(_CurrentMap.SilverTime, _CurrentMap.Type);
			Quad_Medal.ChangeImageUrl("file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medal_Silver.dds");
		}
		case ComponentRaceMapInfos_Medals::C_ScoreMgrMedal_Silver: {
			Label_NextMedalTime.Value = LibCampaignStruct_GetMedalScoreText(_CurrentMap.GoldTime, _CurrentMap.Type);
			Quad_Medal.ChangeImageUrl("file://Media/Manialinks/Nadeo/Trackmania/Menus/Medals/Medal_Gold.dds");
		}
		default: {
			_Frame_NextMedal.Hide();
		}
	}
	if (Label_NextMedalTime.Value != "") ComponentRaceMapInfos_Tools::FitLabelValue(Label_NextMedalTime, 4., 2., 0.5);
}

Void ComponentRaceMapInfos_HideZoneRanking() {
	(Page.GetFirstChild("ComponentRaceMapInfos_frame-ranking")).Hide();
	(Page.GetFirstChild("ComponentRaceMapInfos_frame-ranking-2")).Hide();
	(Page.GetFirstChild("ComponentRaceMapInfos_frame-ranking-3")).Hide();
}

Void ComponentRaceMapInfos_SetRankingsAreLoading(Boolean _Loading) {
	declare Boolean IsRoyalMapType = ComponentRaceMapInfos_TitleControl::IsRoyalMapType(ComponentRaceMapInfos_NetShare::GetMap(Teams[0]).Type);
	declare Boolean IsPlatformMapType = ComponentRaceMapInfos_TitleControl::IsPlatformMapType(ComponentRaceMapInfos_NetShare::GetMap(Teams[0]).Type);
	Page.GetFirstChild("ComponentRaceMapInfos_frame-rankings").Visible = !_Loading && !IsRoyalMapType && !IsPlatformMapType;
	CMGame_LoadingSpinner::SetIsLoading(This, Page.GetFirstChild("ComponentRaceMapInfos_spinner-rankings"), _Loading && !IsRoyalMapType);
}

Void ComponentRaceMapInfos_RequestStopSounds() {
	ComponentRaceMapInfos_G_RequestStopSounds = True;
}

Void ComponentRaceMapInfos_SetTimeLegend(Text _Legend) {
	if (_Legend == "") {
		ComponentRaceMapInfos_G_Label_TimeLegend.Value = "Personal best";
	} else {
		ComponentRaceMapInfos_G_Label_TimeLegend.Value = _Legend;
	}
}

Text ComponentRaceMapInfos_Private_SetMapAuthor(CMlLabel _Label_MapAuthor, Text _AuthorLogin, Text _AuthorName) {
	declare Text DisplayName = "";
	declare Text RequestDisplayNameForLogin = "";

	if (_AuthorLogin != "" && UserMgr != Null) {
		DisplayName = Trackmania_UserStore::GetUserMgrPlayerName(_AuthorLogin);
	}

	if (DisplayName != "") {
		_Label_MapAuthor.Value = ComponentRaceMapInfos_TL::Compose("by %1", DisplayName);
	} else {
		RequestDisplayNameForLogin = _AuthorLogin;

		if (_AuthorName != "") {
			_Label_MapAuthor.Value = ComponentRaceMapInfos_TL::Compose("by %1", _AuthorName);
		} else {
			_Label_MapAuthor.Value = "";
		}
	}

	ComponentRaceMapInfos_Tools::FitLabelValue(_Label_MapAuthor, 4., 1., 0.5);
	ComponentRaceMapInfos_Tools::FirstPartyLogoMatchLuminance(_Label_MapAuthor);

	return RequestDisplayNameForLogin;
}

***MainInit***
***
declare CMlFrame ComponentRaceMapInfos_Frame_Global;
declare CMlFrame ComponentRaceMapInfos_Frame_NextMedal;
declare CMlFrame ComponentRaceMapInfos_Frame_MedalStack;
declare CMlFrame ComponentRaceMapInfos_Frame_Ranking;
declare CMlFrame ComponentRaceMapInfos_Frame_Ranking2;
declare CMlFrame ComponentRaceMapInfos_Frame_Ranking3;
declare CMlFrame ComponentRaceMapInfos_Frame_RoyalSegmentRaceTimes;
declare CMlLabel ComponentRaceMapInfos_Label_MapName;
declare CMlLabel ComponentRaceMapInfos_Label_MapAuthor;
declare CMlLabel ComponentRaceMapInfos_Label_CampaignName;
declare CMlLabel ComponentRaceMapInfos_Label_PB;
declare CMlLabel ComponentRaceMapInfos_Label_Ranking;
declare CMlLabel ComponentRaceMapInfos_Label_Zone;
declare CMlLabel ComponentRaceMapInfos_Label_Closed;

declare LibCampaignStruct_K_Campaign ComponentRaceMapInfos_CurrentCampaign;
declare LibCampaignStruct_K_Map ComponentRaceMapInfos_CurrentMap;
declare LibCampaignStruct_K_Ranking[] ComponentRaceMapInfos_PrevRankings;
declare Integer ComponentRaceMapInfos_BestRaceTime;
declare Integer ComponentRaceMapInfos_BestRacePoints;
declare Integer ComponentRaceMapInfos_BestRaceRespawns;
declare Integer ComponentRaceMapInfos_ForceUpdate;
declare Text ComponentRaceMapInfos_RequestDisplayNameForLogin;
declare Ident ComponentRaceMapInfos_TaskId_DisplayName;
declare Boolean ComponentRaceMapInfos_RankingsAreLoading;
declare Boolean ComponentRaceMapInfos_IsDisplayed;
declare Integer ComponentRaceMapInfos_PlayerTimesEventUpdate;
***

***MainStart***
***
ComponentRaceMapInfos_Frame_Global <=> (Page.GetFirstChild("ComponentRaceMapInfos_frame-global") as CMlFrame);
ComponentRaceMapInfos_Frame_MedalStack <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_frameinstance-medal-stack") as CMlFrame);
ComponentRaceMapInfos_Frame_NextMedal <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_frame-next-medal") as CMlFrame);
ComponentRaceMapInfos_Frame_Ranking <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_frame-ranking") as CMlFrame);
ComponentRaceMapInfos_Frame_Ranking2 <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_frame-ranking-2") as CMlFrame);
ComponentRaceMapInfos_Frame_Ranking3 <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_frame-ranking-3") as CMlFrame);
ComponentRaceMapInfos_Frame_RoyalSegmentRaceTimes <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_frame-royal-segment-race-times") as CMlFrame);
ComponentRaceMapInfos_Label_MapName <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_label-map-name") as CMlLabel);
ComponentRaceMapInfos_Label_MapAuthor <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_label-map-author") as CMlLabel);
ComponentRaceMapInfos_Label_CampaignName <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_label-campaign-name") as CMlLabel);
ComponentRaceMapInfos_G_Label_TimeLegend <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_label-time-legend") as CMlLabel);
ComponentRaceMapInfos_Label_PB <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_label-pb") as CMlLabel);
ComponentRaceMapInfos_Label_Ranking <=> (ComponentRaceMapInfos_Frame_Ranking.GetFirstChild("ComponentRaceMapInfos_label-ranking") as CMlLabel);
ComponentRaceMapInfos_Label_Zone <=> (ComponentRaceMapInfos_Frame_Ranking.GetFirstChild("ComponentRaceMapInfos_label-zone") as CMlLabel);
ComponentRaceMapInfos_Label_Closed <=> (ComponentRaceMapInfos_Frame_Global.GetFirstChild("ComponentRaceMapInfos_label-closed") as CMlLabel);

ComponentRaceMapInfos_CurrentCampaign.Id = LibCampaignStruct_C_Campaign_NullId;
ComponentRaceMapInfos_PrevRankings = ComponentRaceMapInfos_CurrentMap.Rankings;
ComponentRaceMapInfos_BestRaceTime = -123;
ComponentRaceMapInfos_BestRacePoints = -123;
ComponentRaceMapInfos_BestRaceRespawns = -123;
ComponentRaceMapInfos_ForceUpdate = -123;
ComponentRaceMapInfos_RequestDisplayNameForLogin = "";
ComponentRaceMapInfos_TaskId_DisplayName = NullId;
ComponentRaceMapInfos_RankingsAreLoading = ComponentRaceMapInfos_NetShare::RankingsAreLoading(Teams[0]);

ComponentRaceMapInfos_G_RequestManualUpdate = False;
ComponentRaceMapInfos_G_RequestRankAnimation = False;

ComponentRaceMapInfos_SetDisplayed(True);
ComponentRaceMapInfos_SetRankingsAreLoading(ComponentRaceMapInfos_RankingsAreLoading);

ComponentRaceMapInfos_IsDisplayed = ComponentRaceMapInfos_G_IsDisplayed;
***

***MainLoop***
***
if (PageIsVisible) {
	declare Owner <=> ComponentRaceMapInfos_MV_Utils::GetOwner(This);
	switch(ComponentRaceMapInfos_CurrentMap.Type) {
		case "TrackMania\\TM_Stunt": {
			// Display points for PB in Stunt mode
			if (ComponentRaceMapInfos_BestRacePoints != ComponentRaceMapInfos_CurrentMap.Points) {
				ComponentRaceMapInfos_BestRacePoints = ComponentRaceMapInfos_CurrentMap.Points;
				ComponentRaceMapInfos_Label_PB.Value =	LibCampaignStruct_GetMedalScoreText(ComponentRaceMapInfos_BestRacePoints, ComponentRaceMapInfos_CurrentMap.Type);
				ComponentRaceMapInfos_SetNextMedal(ComponentRaceMapInfos_Frame_NextMedal, ComponentRaceMapInfos_CurrentMap);
			}
		}
		case "TrackMania\\TM_Platform": {
			// Display respawns for PB in Platform mode
			if (ComponentRaceMapInfos_BestRaceRespawns != ComponentRaceMapInfos_CurrentMap.RespawnCount) {
				ComponentRaceMapInfos_BestRaceRespawns = ComponentRaceMapInfos_CurrentMap.RespawnCount;
				ComponentRaceMapInfos_Label_PB.Value =	LibCampaignStruct_GetMedalScoreText(ComponentRaceMapInfos_BestRaceRespawns, ComponentRaceMapInfos_CurrentMap.Type);
				ComponentRaceMapInfos_SetNextMedal(ComponentRaceMapInfos_Frame_NextMedal, ComponentRaceMapInfos_CurrentMap);
			}
		}
		case "TrackMania\\TM_Royal": {
			if (ComponentRaceMapInfos_PlayerTimesEventUpdate != ComponentRaceMapInfos_RoyalPlayerData::GetPlayerTimesEventUpdate(Owner)) {
				ComponentRaceMapInfos_PlayerTimesEventUpdate = ComponentRaceMapInfos_RoyalPlayerData::GetPlayerTimesEventUpdate(Owner);
				ComponentRaceMapInfos_BestRaceTime = ComponentRaceMapInfos_RoyalPlayerData::GetPlayerTimes(Owner).Total;
				ComponentRaceMapInfos_SetTimeLegend("Total time");
				ComponentRaceMapInfos_Label_PB.Value =	LibCampaignStruct_GetMedalScoreText(ComponentRaceMapInfos_BestRaceTime, ComponentRaceMapInfos_CurrentMap.Type);
				foreach (Index => Control in ComponentRaceMapInfos_Frame_RoyalSegmentRaceTimes.Controls) {
					declare CMlLabel Label_Time = (Control as CMlFrame).GetFirstChild("ComponentRaceMapInfos_label-time") as CMlLabel;
					Label_Time.SetText(LibCampaignStruct_GetMedalScoreText(ComponentRaceMapInfos_RoyalPlayerData::GetPlayerTimes(Owner).SegmentRaceTimes.get(Index, -1), ComponentRaceMapInfos_CurrentMap.Type));
				}
			}
		}
		default: { // classic PB in time for other map types
			if (
				Owner != Null &&
				Owner.Score != Null &&
				Owner.Score.BestRaceTimes.count > 0 &&
				ComponentRaceMapInfos_BestRaceTime != Owner.Score.BestRaceTimes[Owner.Score.BestRaceTimes.count-1]
			) {
				ComponentRaceMapInfos_BestRaceTime = Owner.Score.BestRaceTimes[Owner.Score.BestRaceTimes.count-1];
				ComponentRaceMapInfos_Label_PB.Value =	LibCampaignStruct_GetMedalScoreText(ComponentRaceMapInfos_BestRaceTime, ComponentRaceMapInfos_CurrentMap.Type);
				ComponentRaceMapInfos_SetNextMedal(ComponentRaceMapInfos_Frame_NextMedal, ComponentRaceMapInfos_CurrentMap);
			} else if (
				ComponentRaceMapInfos_BestRaceTime != -1 &&
				(
					Owner == Null ||
					Owner.Score == Null ||
					Owner.Score.BestRaceTimes.count == 0
				)
			) {
				ComponentRaceMapInfos_BestRaceTime = -1;
				ComponentRaceMapInfos_Label_PB.Value =	LibCampaignStruct_GetMedalScoreText(ComponentRaceMapInfos_BestRaceTime, ComponentRaceMapInfos_CurrentMap.Type);
			}
		}
	}

	if (UserMgr != Null) {
		if (ComponentRaceMapInfos_RequestDisplayNameForLogin != "" && ComponentRaceMapInfos_TaskId_DisplayName == NullId) {
			declare CTaskResult_GetDisplayNameResult Task = UserMgr.RetrieveDisplayName(ComponentRaceMapInfos_MainUser::GetMainUserId(), [ComponentRaceMapInfos_RequestDisplayNameForLogin]);
			if (Task != Null) {
				ComponentRaceMapInfos_TaskId_DisplayName = Task.Id;
			}
			ComponentRaceMapInfos_RequestDisplayNameForLogin = "";
		}
		if (ComponentRaceMapInfos_TaskId_DisplayName != NullId) {
			if (UserMgr.TaskResults.existskey(ComponentRaceMapInfos_TaskId_DisplayName)) {
				declare Task = UserMgr.TaskResults[ComponentRaceMapInfos_TaskId_DisplayName];
				if (!Task.IsProcessing) {
					if (Task.HasSucceeded) {
						ComponentRaceMapInfos_Private_SetMapAuthor(
							ComponentRaceMapInfos_Label_MapAuthor,
							ComponentRaceMapInfos_CurrentMap.AuthorLogin,
							ComponentRaceMapInfos_CurrentMap.AuthorDisplayName
						); //< Ignore return value, we don't want to start a new request
					}
					UserMgr.TaskResult_Release(ComponentRaceMapInfos_TaskId_DisplayName);
					ComponentRaceMapInfos_TaskId_DisplayName = NullId;
				}
			} else {
				ComponentRaceMapInfos_TaskId_DisplayName = NullId;
			}
		}
	}

	if (ComponentRaceMapInfos_RankingsAreLoading != ComponentRaceMapInfos_NetShare::RankingsAreLoading(Teams[0])) {
		// Rankings finished loading, request animation
		if (ComponentRaceMapInfos_RankingsAreLoading && !ComponentRaceMapInfos_NetShare::RankingsAreLoading(Teams[0])) {
			ComponentRaceMapInfos_RequestManualUpdate(True);
		}
		ComponentRaceMapInfos_RankingsAreLoading = ComponentRaceMapInfos_NetShare::RankingsAreLoading(Teams[0]);
		ComponentRaceMapInfos_SetRankingsAreLoading(ComponentRaceMapInfos_RankingsAreLoading);
	}

	if (
		ComponentRaceMapInfos_ForceUpdate != ComponentRaceMapInfos_NetShare::GetForceUpdate(Teams[0]) ||
		(ComponentRaceMapInfos_G_IsDisplayed && ComponentRaceMapInfos_G_RequestManualUpdate) || //< Wait until the component is visible before processing manual update and animation
		ComponentRaceMapInfos_IsDisplayed != ComponentRaceMapInfos_G_IsDisplayed
	) {
		ComponentRaceMapInfos_ForceUpdate = ComponentRaceMapInfos_NetShare::GetForceUpdate(Teams[0]);
		ComponentRaceMapInfos_IsDisplayed = ComponentRaceMapInfos_G_IsDisplayed;
		if (ComponentRaceMapInfos_CurrentMap.Uid != ComponentRaceMapInfos_NetShare::GetMap(Teams[0]).Uid) {
			ComponentRaceMapInfos_PrevRankings = ComponentRaceMapInfos_NetShare::GetMap(Teams[0]).Rankings;
			ComponentRaceMapInfos_SetRankingsAreLoading(ComponentRaceMapInfos_RankingsAreLoading);
		}
		ComponentRaceMapInfos_CurrentMap = ComponentRaceMapInfos_NetShare::GetMap(Teams[0]);
		ComponentRaceMapInfos_CurrentCampaign = ComponentRaceMapInfos_NetShare::GetCampaign(Teams[0]);

		ComponentRaceMapInfos_Frame_Ranking.Visible = ComponentRaceMapInfos_CurrentCampaign.SeasonUid != "" || ComponentRaceMapInfos_CurrentCampaign.SeasonUid != "";
		ComponentRaceMapInfos_Frame_Ranking2.Visible = ComponentRaceMapInfos_CurrentCampaign.SeasonUid != "" || ComponentRaceMapInfos_CurrentCampaign.SeasonUid != "";
		ComponentRaceMapInfos_Frame_Ranking3.Visible = ComponentRaceMapInfos_CurrentCampaign.SeasonUid != "" || ComponentRaceMapInfos_CurrentCampaign.SeasonUid != "";
		ComponentRaceMapInfos_Frame_RoyalSegmentRaceTimes.Visible = ComponentRaceMapInfos_TitleControl::IsRoyalMapType(ComponentRaceMapInfos_CurrentMap.Type);

		declare Text MapName = ComponentRaceMapInfos_CurrentMap.Name;
		if (Map != Null) {
			MapName = ComponentRaceMapInfos_Tools::TranslateOfficialMapName(ComponentRaceMapInfos_CurrentMap.Name, Map.AuthorLogin);
		}
		declare Text CampaignName = ComponentRaceMapInfos_CurrentCampaign.Name;
		if (ComponentRaceMapInfos_CurrentCampaign.Type == LibCampaignStruct_C_CampaignType_Quarterly) {
			declare LibCampaignStruct_K_CampaignName CampaignNameStruct = LibCampaignStruct_ParseCampaignName(CampaignName);
			if (CampaignNameStruct.IsValid) CampaignName = CampaignNameStruct.TranslatedName;
		}
		if (CampaignName == "") {
			ComponentRaceMapInfos_Label_MapName.Visible = False;
			ComponentRaceMapInfos_Label_MapAuthor.Visible = True;
			ComponentRaceMapInfos_RequestDisplayNameForLogin = ComponentRaceMapInfos_Private_SetMapAuthor(
				ComponentRaceMapInfos_Label_MapAuthor,
				ComponentRaceMapInfos_CurrentMap.AuthorLogin,
				ComponentRaceMapInfos_CurrentMap.AuthorDisplayName
			);
			ComponentRaceMapInfos_Label_CampaignName.SetText(MapName);
		} else {
			ComponentRaceMapInfos_Label_MapName.Visible = True;
			ComponentRaceMapInfos_Label_MapAuthor.Visible = False;
			ComponentRaceMapInfos_Label_MapName.SetText(MapName);
			ComponentRaceMapInfos_Label_CampaignName.SetText(CampaignName);
			ComponentRaceMapInfos_Tools::FitLabelValue(ComponentRaceMapInfos_Label_MapName, 7., 4., 0.5);
		}
		ComponentRaceMapInfos_Tools::FitLabelValue(ComponentRaceMapInfos_Label_CampaignName, 7., 4., 0.5);

		ComponentMedalStack_SetMedalsNumber(ComponentRaceMapInfos_Frame_MedalStack, ComponentRaceMapInfos_CurrentMap.Medal);
		ComponentRaceMapInfos_SetNextMedal(ComponentRaceMapInfos_Frame_NextMedal, ComponentRaceMapInfos_CurrentMap);

		ComponentRaceMapInfos_Label_Closed.Visible = ComponentRaceMapInfos_Frame_Ranking.Visible && !ComponentRaceMapInfos_CurrentCampaign.IsSeasonLive;

		if (ComponentRaceMapInfos_G_IsDisplayed && ComponentRaceMapInfos_Frame_Ranking.Visible) {
			if (!ComponentRaceMapInfos_G_IgnoreForcedUpdate || ComponentRaceMapInfos_G_RequestManualUpdate) {
				ComponentRaceMapInfos_SetRanking(
					ComponentRaceMapInfos_Frame_Ranking,
					ComponentRaceMapInfos_Frame_Ranking2,
					ComponentRaceMapInfos_Frame_Ranking3,
					ComponentRaceMapInfos_CurrentMap.Rankings,
					ComponentRaceMapInfos_PrevRankings,
					ComponentRaceMapInfos_G_RequestRankAnimation,
					ComponentRaceMapInfos_CurrentMap.Medal,
					ComponentRaceMapInfos_CurrentCampaign.IsSeasonLive
				);
				ComponentRaceMapInfos_PrevRankings = ComponentRaceMapInfos_CurrentMap.Rankings;
			}
		}

		ComponentRaceMapInfos_G_RequestManualUpdate = False;
		ComponentRaceMapInfos_G_RequestRankAnimation = False;
	}
	if (ComponentRaceMapInfos_G_RequestStopSounds) {
		ComponentRaceMapInfos_G_RequestStopSounds = False;
		foreach (Key => Anim in ComponentRaceMapInfos_G_ZoneAnims) {
			declare SoundName = ComponentRaceMapInfos_C_Sound_StartPlacementCounter;
			if (Anim.IsSecondary) SoundName = ComponentRaceMapInfos_C_Sound_StartSecondaryPlacementCounter;
			ComponentRaceMapInfos_AudioManager::StopSound(This, SoundName);
			ComponentRaceMapInfos_G_ZoneAnims.removekey(Key);
		}
		foreach (Key => Anim in ComponentRaceMapInfos_G_RankAnims) {
			declare SoundName = ComponentRaceMapInfos_C_Sound_PlacementCounter;
			if (Anim.IsSecondary) SoundName = ComponentRaceMapInfos_C_Sound_SecondaryPlacementCounter;
			ComponentRaceMapInfos_AudioManager::StopSound(This, SoundName);
			ComponentRaceMapInfos_G_RankAnims.removekey(Key);
		}
	}
	foreach (Key => Anim in ComponentRaceMapInfos_G_RankAnims) {
		if (Anim.StartTime > 0 && Anim.StartTime < Now) {
			if (Anim.NextUpdate <= Now && Anim.StartTime + Anim.AnimDuration < Now) {
				declare Text NewValue = ComponentRaceMapInfos_Tools::FormatTop(Anim.InitialPosition + Anim.PositionDifference, True, ComponentRaceMapInfos_C_FormatLimit);
				if (Anim.Label_Ranking.Value != NewValue) {
					Anim.Label_Ranking.Value = NewValue;
					AnimMgr.Flush(Anim.Label_Ranking);
					AnimMgr.Add(Anim.Label_Ranking, "<anim scale=\"1.15\"/>", Now, 20, CAnimManager::EAnimManagerEasing::Linear);
					AnimMgr.Add(Anim.Label_Ranking, "<anim scale=\"1.\"/>", Now+20, 40, CAnimManager::EAnimManagerEasing::Linear);
				}
				ComponentRaceMapInfos_G_RankAnims.removekey(Key);
			} else if (Anim.NextUpdate <= Now) {
				ComponentRaceMapInfos_G_RankAnims[Key].NextUpdate = Now + Anim.MaxUpdateFrequency;
				declare PositionDifference = Anim.PositionDifference;
				// easeCubicOut y = (1 - (1 - t)^3) where y and t are normed between 0 and 1
				// NB: AnimLib::EaseOutCubic(...) do the same
				declare Text NewValue = ComponentRaceMapInfos_Tools::FormatTop(Anim.InitialPosition + ComponentRaceMapInfos_ML::NearestInteger(PositionDifference * (1 - ComponentRaceMapInfos_ML::Pow(1.-ComponentRaceMapInfos_ML::ToReal(Now - Anim.StartTime)/Anim.AnimDuration, 3.))), True, ComponentRaceMapInfos_C_FormatLimit);
				if (NewValue != Anim.Label_Ranking.Value) {
					Anim.Label_Ranking.Value = NewValue;
					AnimMgr.Flush(Anim.Label_Ranking);
					AnimMgr.Add(Anim.Label_Ranking, "<anim scale=\"1.15\"/>", Now, 20, CAnimManager::EAnimManagerEasing::Linear);
					AnimMgr.Add(Anim.Label_Ranking, "<anim scale=\"1.\"/>", Now+20, 40, CAnimManager::EAnimManagerEasing::Linear);
					declare SoundName = ComponentRaceMapInfos_C_Sound_PlacementCounter;
					if (Anim.IsSecondary) SoundName = ComponentRaceMapInfos_C_Sound_SecondaryPlacementCounter;
					ComponentRaceMapInfos_AudioManager::StopSound(This, SoundName);
					ComponentRaceMapInfos_AudioManager::PlaySound(This, SoundName);
				}
			}
		}
	}
	foreach (Key => Anim in ComponentRaceMapInfos_G_ZoneAnims) {
		if (Anim.PunchSoundPlayTime > 0 && Anim.PunchSoundPlayTime <= Now) {
			declare SoundName = ComponentRaceMapInfos_C_Sound_StartPlacementCounter;
			if (Anim.IsSecondary) SoundName = ComponentRaceMapInfos_C_Sound_StartSecondaryPlacementCounter;
			ComponentRaceMapInfos_AudioManager::StopSound(This, SoundName);
			ComponentRaceMapInfos_AudioManager::PlaySound(This, SoundName);
			ComponentRaceMapInfos_G_ZoneAnims.removekey(Key);
		}
	}
}
***

// */
// @Component end component-racemapinfos

// @Component start component-tmgame-record
// /*

Boolean TMGame_Record_IsRecordsModuleAvailable() {
	declare Boolean TMGame_Record_IsRecordsModuleDisplayed for ClientUI;
	return TMGame_Record_IsRecordsModuleDisplayed;
}

Boolean TMGame_Record_IsControllerNavigationEnabled() {
	declare Boolean TMGame_Record_IsControllerNavigationEnabled for ClientUI;
	return TMGame_Record_IsControllerNavigationEnabled;
}

Boolean TMGame_Record_UpdateControllerNavigationState(Boolean _NewState) {
	declare Boolean TMGame_Record_IsControllerNavigationEnabled for ClientUI;
	TMGame_Record_IsControllerNavigationEnabled = _NewState;
	return _NewState;
}
Boolean TMGame_Record_EnableControllerNavigation() {
	return TMGame_Record_UpdateControllerNavigationState(True);
}
Boolean TMGame_Record_DisableControllerNavigation() {
	return TMGame_Record_UpdateControllerNavigationState(False);
}

		
// */
// @Component end component-tmgame-record

// @Component start Component_UIModule_Race_ScoresTable_Visibility
// /*

Boolean Component_UIModule_Race_ScoresTable_Visibility_LayerIsVisible() {
	declare Boolean Component_UIModule_Race_ScoresTable_Visibility_LayerIsVisible for UI;
	return Component_UIModule_Race_ScoresTable_Visibility_LayerIsVisible;
}

Void Component_UIModule_Race_ScoresTable_Visibility_SetLayerIsVisible(Boolean _LayerIsVisible) {
	declare Boolean Component_UIModule_Race_ScoresTable_Visibility_LayerIsVisible for UI;
	Component_UIModule_Race_ScoresTable_Visibility_LayerIsVisible = _LayerIsVisible;
}

Boolean Component_UIModule_Race_ScoresTable_Visibility_EnabledFromMenu() {
	declare Boolean Component_UIModule_Race_ScoresTable_Visibility_EnabledFromMenu for UI;
	return Component_UIModule_Race_ScoresTable_Visibility_EnabledFromMenu;
}

Void Component_UIModule_Race_ScoresTable_Visibility_SetEnabledFromMenu(Boolean _Enabled) {
	declare Boolean Component_UIModule_Race_ScoresTable_Visibility_EnabledFromMenu for UI;
	Component_UIModule_Race_ScoresTable_Visibility_EnabledFromMenu = _Enabled;
}

Integer Component_UIModule_Race_ScoresTable_Visibility_GetSourceMenu() {
	declare Integer Component_UIModule_Race_ScoresTable_Visibility_SourceMenu for UI;
	return Component_UIModule_Race_ScoresTable_Visibility_SourceMenu;
}

Void Component_UIModule_Race_ScoresTable_Visibility_SetSourceMenu(Integer _SourceMenu) {
	declare Integer Component_UIModule_Race_ScoresTable_Visibility_SourceMenu for UI;
	Component_UIModule_Race_ScoresTable_Visibility_SourceMenu = _SourceMenu;
}

Boolean Component_UIModule_Race_ScoresTable_Visibility_DisplayScoresTableFromMenu(Boolean _Display, Integer _SourceMenu, CMlFrame _Frame_ToHide) {
	Component_UIModule_Race_ScoresTable_Visibility_SetEnabledFromMenu(_Display);
	if (_Frame_ToHide != Null) _Frame_ToHide.Visible = !_Display;
	if (_Display) Component_UIModule_Race_ScoresTable_Visibility_SetSourceMenu(_SourceMenu);
	else Component_UIModule_Race_ScoresTable_Visibility_SetSourceMenu(Component_UIModule_Race_ScoresTable_Visibility_C_ScoresTable_PauseMenu_None);
	return Component_UIModule_Race_ScoresTable_Visibility_EnabledFromMenu();
}

Component_UIModule_Race_ScoresTable_Visibility_K_ScoresTableIsVisible Component_UIModule_Race_ScoresTable_Visibility_SetScoresTableVisibility(CMlFrame _Frame_Layer, CMlQuad _QuadBg, Boolean _IsFromLayer, Boolean _IsFromMenu) {
	declare Component_UIModule_Race_ScoresTable_Visibility_K_ScoresTableIsVisible ScoresTableIsVisible = Component_UIModule_Race_ScoresTable_Visibility_K_ScoresTableIsVisible {
		FromLayer = _IsFromLayer,
		FromMenu = _IsFromMenu
	};

	_Frame_Layer.Visible = (ScoresTableIsVisible.FromLayer || ScoresTableIsVisible.FromMenu);
	_QuadBg.Visible = ScoresTableIsVisible.FromMenu;
	EnableMenuNavigation(ScoresTableIsVisible.FromMenu, False, False, Null, InputPriority::C_InputPriority_ScoresTable);

	return ScoresTableIsVisible;
}

Component_UIModule_Race_ScoresTable_Visibility_K_ScoresTableIsVisible Component_UIModule_Race_ScoresTable_Visibility_SetScoresTableVisibility(CMlFrame _Frame_Layer, CMlFrame _Frame_Global, CMlQuad _QuadBg, Boolean _IsFromLayer, Boolean _IsFromMenu) {
	declare Component_UIModule_Race_ScoresTable_Visibility_K_ScoresTableIsVisible ScoresTableIsVisible = Component_UIModule_Race_ScoresTable_Visibility_K_ScoresTableIsVisible {
		FromLayer = _IsFromLayer,
		FromMenu = _IsFromMenu
	};

	declare Boolean VisibleFromMenu = ((ScoresTableIsVisible.FromMenu && SplitScreenCount == 1) || (ScoresTableIsVisible.FromMenu && SplitScreenCount > 1 && SplitScreenNum == 0))	;
	_Frame_Layer.Visible = (ScoresTableIsVisible.FromLayer || VisibleFromMenu);
	_QuadBg.Visible = VisibleFromMenu;
	EnableMenuNavigation((ScoresTableIsVisible.FromMenu && _Frame_Layer.Visible), False, False, Null, InputPriority::C_InputPriority_ScoresTable);

	// Display Scores Table from menu only for common layer in SplitScreen
	if (SplitScreenCount > 1 && SplitScreenNum == 0) {
		_Frame_Global.Visible = Component_UIModule_Race_ScoresTable_Visibility_EnabledFromMenu();
	}

	return ScoresTableIsVisible;
}

Void Component_UIModule_Race_ScoresTable_Visibility_SetPageShift(Integer _Shift) {
	declare Integer Component_UIModule_Race_ScoresTable_Visibility_PageShift for UI = 0;
	Component_UIModule_Race_ScoresTable_Visibility_PageShift = _Shift;
}

Integer Component_UIModule_Race_ScoresTable_Visibility_GetPageShift() {
	declare Integer Component_UIModule_Race_ScoresTable_Visibility_PageShift for UI = 0;
	return Component_UIModule_Race_ScoresTable_Visibility_PageShift;
}

// */
// @Component end Component_UIModule_Race_ScoresTable_Visibility

// @Component start component-latency-test
// /*

***MainInit***
***
CMGame_LatencyTest::MainInit(This);
***

***MainLoop***
***
CMGame_LatencyTest::MainLoop(This);
***

// */
// @Component end component-latency-test

// @Component start component-cmgame-slider
// /*

declare CMGame_Slider_K_Properties[Text] CMGame_Slider_G_Styles;
declare CMGame_Slider_K_Properties CMGame_Slider_G_DefaultProperties;
declare CMGame_Slider_K_Event[] CMGame_Slider_PendingEvents;

// Check if the control is a slide
Boolean CMGame_Slider_IsSlider(CMlControl _Control) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Control;
	return CMGame_Slider_State.IsSlider;
}

// Add or remove a property from the enabled array
Integer[] CMGame_Slider_Private_EnableProperty(Integer[] _EnabledProperties, Integer _Property, Boolean _Enabled) {
	declare Integer[] EnabledProperties = _EnabledProperties;

	if (_Enabled) {
		if (!EnabledProperties.exists(_Property)) {
			EnabledProperties.add(_Property);
		}
	} else {
		EnabledProperties.remove(_Property);
	}

	return EnabledProperties;
}

// Set and enable a property
CMGame_Slider_K_Properties CMGame_Slider_Private_SetProperty(CMGame_Slider_K_Properties _TargetProperties, Integer _PropertyId, CMGame_Slider_K_Properties _SourceProperties) {
	declare CMGame_Slider_K_Properties Properties = _TargetProperties;

	Properties.Enabled = CMGame_Slider_Private_EnableProperty(Properties.Enabled, _PropertyId, True);

	switch (_PropertyId) {
		case CMGame_Slider_C_Property_HAlign: Properties.HAlign = _SourceProperties.HAlign;
		case CMGame_Slider_C_Property_VAlign: Properties.VAlign = _SourceProperties.VAlign;
		case CMGame_Slider_C_Property_BarSize: Properties.BarSize = _SourceProperties.BarSize;
		case CMGame_Slider_C_Property_CursorSize: Properties.CursorSize = _SourceProperties.CursorSize;
		case CMGame_Slider_C_Property_BarColor: Properties.BarColor = _SourceProperties.BarColor;
		case CMGame_Slider_C_Property_CursorColor: Properties.CursorColor = _SourceProperties.CursorColor;
		case CMGame_Slider_C_Property_BarColorMode: Properties.BarColorMode = _SourceProperties.BarColorMode;
		case CMGame_Slider_C_Property_CursorColorMode: Properties.CursorColorMode = _SourceProperties.CursorColorMode;
		case CMGame_Slider_C_Property_Opacity: Properties.Opacity = _SourceProperties.Opacity;
		case CMGame_Slider_C_Property_Rotation: Properties.Rotation = _SourceProperties.Rotation;
		case CMGame_Slider_C_Property_RangeReal: Properties.RangeReal = _SourceProperties.RangeReal;
		case CMGame_Slider_C_Property_RangeInteger: Properties.RangeInteger = _SourceProperties.RangeInteger;
		case CMGame_Slider_C_Property_RangeColor: Properties.RangeColor = _SourceProperties.RangeColor;
		case CMGame_Slider_C_Property_ApplyColorOnCursor: Properties.ApplyColorOnCursor = _SourceProperties.ApplyColorOnCursor;
		case CMGame_Slider_C_Property_BarImageUrl: Properties.BarImageUrl = _SourceProperties.BarImageUrl;
		case CMGame_Slider_C_Property_SoundUpdate: Properties.SoundUpdate = _SourceProperties.SoundUpdate;
	}

	return Properties;
}

// Merge a base properties struct with other enabled properties
CMGame_Slider_K_Properties CMGame_Slider_Private_MergeProperties(CMGame_Slider_K_Properties _Base, CMGame_Slider_K_Properties[] _PropertiesToMerge) {
	declare CMGame_Slider_K_Properties MergedProperties = _Base;

	foreach (Properties in _PropertiesToMerge) {
		foreach (PropertyId in Properties.Enabled) {
			MergedProperties = CMGame_Slider_Private_SetProperty(MergedProperties, PropertyId, Properties);
		}
	}

	return MergedProperties;
}

// Check if one of the given property is dirty
Boolean CMGame_Slider_Private_IsDirty(Boolean _IsInit, Integer[] _DirtyProperties, Integer[] _PropertyIds) {
	if (_IsInit) return True;
	return _DirtyProperties.containsoneof(_PropertyIds) || _DirtyProperties.exists(CMGame_Slider_C_Property_Styles);
}

// Get the RGB color selected on the slider
Vec3 CMGame_Slider_Private_GetColorValue(CMGame_Slider_K_State _State) {
	return CMGame_Slider_CL::HsvToRgb(<
		CMGame_Slider_ML::Clamp(
			_State.MergedProperties.RangeColor.RangeHue.X + (_State.Ratio * (_State.MergedProperties.RangeColor.RangeHue.Y - _State.MergedProperties.RangeColor.RangeHue.X)),
			_State.MergedProperties.RangeColor.RangeHue.X,
			_State.MergedProperties.RangeColor.RangeHue.Y
		),
		_State.MergedProperties.RangeColor.Saturation,
		_State.MergedProperties.RangeColor.Value
	>);
}

// Set the slider ratio
CMGame_Slider_K_State CMGame_Slider_Private_SetRatio(CMGame_Slider_K_State _State, Real _Ratio, Boolean _PlaySound) {
	declare CMGame_Slider_K_State State = _State;

	declare Real ClampedRatio = CMGame_Slider_ML::Clamp(_Ratio, 0., 1.);
	declare Real OldRatio = State.Ratio;
	if (State.Steps <= 0) {
		State.Ratio = ClampedRatio;
	} else if (State.Steps == 1) {
		State.Ratio = 1.;
	} else {
		declare Real StepSize = (1. / (State.Steps - 1));
		declare Real Remainder = CMGame_Slider_ML::Mod(ClampedRatio, 0., StepSize);
		if (Remainder > StepSize * 0.5) {
			State.Ratio = CMGame_Slider_ML::Clamp(ClampedRatio - Remainder + StepSize, 0., 1.);
		} else {
			State.Ratio = CMGame_Slider_ML::Clamp(ClampedRatio - Remainder, 0., 1.);
		}
	}
	if (_PlaySound && OldRatio != State.Ratio && State.MergedProperties.SoundUpdate != "") {
		CMGame_MenuSounds::PlaySound(This, State.MergedProperties.SoundUpdate);
	}

	State.Controls.Quad_Cursor.RelativePosition_V3 = State.SliderDirection * State.Ratio;
	State.Controls.Frame_ClipBarLeft.Size = <CMGame_Slider_ML::Max(0., (State.SliderLength * State.Ratio) - 0.5), State.BoundingBox.Y>;
	State.Controls.Frame_ClipBarRight.Size = <CMGame_Slider_ML::Max(0., State.SliderLength - (State.SliderLength * State.Ratio) - 0.5), State.BoundingBox.Y>;
	State.Controls.Frame_ClipBarLeft.Visible = State.Controls.Frame_ClipBarLeft.Size.X > 0.;
	State.Controls.Frame_ClipBarRight.Visible = State.Controls.Frame_ClipBarRight.Size.X > 0.;

	if (State.MergedProperties.ApplyColorOnCursor) {
		State.Controls.Quad_Cursor.BgColor = CMGame_Slider_Private_GetColorValue(State);
	}

	return State;
}

// Set the slider steps
CMGame_Slider_K_State CMGame_Slider_Private_SetSteps(CMGame_Slider_K_State _State, Integer _Steps) {
	if (_State.Steps == _Steps) return _State;

	declare CMGame_Slider_K_State State = _State;

	State.Steps = _Steps;
	State = CMGame_Slider_Private_SetRatio(State, State.Ratio, False);

	return State;
}

// Disable the mouse interaction
CMGame_Slider_K_State CMGame_Slider_Private_SetMouseInteractionDisabled(CMGame_Slider_K_State _State, Boolean _MouseInteractionDisabled) {
	if (_State.MouseInteractionDisabled == _MouseInteractionDisabled) return _State;

	declare CMGame_Slider_K_State State = _State;
	State.MouseInteractionDisabled = _MouseInteractionDisabled;
	return State;
}

Void CMGame_Slider_Private_SetQuadColor(CMlQuad _Quad, Integer _ColorMode, Vec3 _Color) {
	// Initialize all properties properly here first
	// Modifying one of them afterward can also have an effect on the others.
	// eg: modifying `ModulateColor` will also change the value of `Colorize`.
	_Quad.Colorize = CMGame_Slider_C_Default_Colorize;
	_Quad.ModulateColor = CMGame_Slider_C_Default_ModulateColor;
	_Quad.BgColor = CMGame_Slider_C_Default_BgColor;

	switch (_ColorMode) {
		case CMGame_Slider_C_ColorMode_Colorize: {
			_Quad.Colorize = _Color;
		}
		case CMGame_Slider_C_ColorMode_Modulate: {
			_Quad.ModulateColor = _Color;
		}
		case CMGame_Slider_C_ColorMode_Background: {
			_Quad.BgColor = _Color;
		}
	}
}

// Redraw the slider (apply style, size, ...)
Void CMGame_Slider_RedrawSlider(CMlFrame _Frame_Slider, Boolean _IsInit) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;

	declare CMGame_Slider_K_Properties[] PropertiesToMerge = [CMGame_Slider_G_DefaultProperties];
	foreach (Style in CMGame_Slider_State.Styles) {
		PropertiesToMerge.add(CMGame_Slider_G_Styles.get(Style, CMGame_Slider_K_Properties {}));
	}
	PropertiesToMerge.add(CMGame_Slider_State.CustomizedProperties);

	CMGame_Slider_State.MergedProperties = CMGame_Slider_Private_MergeProperties(CMGame_Slider_C_DefaultProperties, PropertiesToMerge);

	// Position and size of the bar and cursor
	if (CMGame_Slider_Private_IsDirty(_IsInit, CMGame_Slider_State.DirtyProperties, [CMGame_Slider_C_Property_BarSize, CMGame_Slider_C_Property_CursorSize])) {
		assert(CMGame_Slider_State.MergedProperties.CursorSize.X <= CMGame_Slider_State.MergedProperties.BarSize.X, "The slider cursor cannot be larger than the slider bar");
		CMGame_Slider_State.BoundingBox = <
			CMGame_Slider_ML::Max(CMGame_Slider_State.MergedProperties.BarSize.X, CMGame_Slider_State.MergedProperties.CursorSize.X),
			CMGame_Slider_ML::Max(CMGame_Slider_State.MergedProperties.BarSize.Y, CMGame_Slider_State.MergedProperties.CursorSize.Y)
		>;
		CMGame_Slider_State.Controls.Quad_BarLeft.Size = CMGame_Slider_State.MergedProperties.BarSize;
		CMGame_Slider_State.Controls.Quad_BarRight.Size = CMGame_Slider_State.MergedProperties.BarSize;
		CMGame_Slider_State.Controls.Quad_BarMouse.Size = <CMGame_Slider_State.MergedProperties.BarSize.X, CMGame_Slider_ML::Max(CMGame_Slider_State.MergedProperties.CursorSize.Y, CMGame_Slider_State.MergedProperties.BarSize.Y)>;
		CMGame_Slider_State.Controls.Quad_Cursor.Size = CMGame_Slider_State.MergedProperties.CursorSize;
		CMGame_Slider_State.Controls.Frame_VCenter.RelativePosition_V3.Y = CMGame_Slider_State.BoundingBox.Y * -0.5;
		CMGame_Slider_State.Controls.Frame_ClipBarRight.RelativePosition_V3.X = CMGame_Slider_State.MergedProperties.BarSize.X;
	}

	// Rotation of the slider. We have to rotate multiple frames to keep the alignment and direction correct.
	if (CMGame_Slider_Private_IsDirty(_IsInit, CMGame_Slider_State.DirtyProperties, [CMGame_Slider_C_Property_Rotation])) {
		CMGame_Slider_State.Controls.Frame_CounterRot.RelativeRotation = CMGame_Slider_State.MergedProperties.Rotation;
		CMGame_Slider_State.Controls.Frame_SliderAlign.RelativeRotation = -CMGame_Slider_State.MergedProperties.Rotation;
		CMGame_Slider_State.Controls.Frame_Bar.RelativeRotation = CMGame_Slider_State.MergedProperties.Rotation;
		CMGame_Slider_State.Controls.Quad_Cursor.RelativeRotation = CMGame_Slider_State.MergedProperties.Rotation;
	}

	// Compute direction and length of the slider
	if (CMGame_Slider_Private_IsDirty(_IsInit, CMGame_Slider_State.DirtyProperties, [CMGame_Slider_C_Property_BarSize, CMGame_Slider_C_Property_CursorSize, CMGame_Slider_C_Property_Rotation])) {
		CMGame_Slider_State.SliderDirection = <CMGame_Slider_State.BoundingBox.X - CMGame_Slider_State.MergedProperties.CursorSize.X, 0.>;
		if (CMGame_Slider_State.MergedProperties.Rotation != 0.) {
			declare Real RotationRad = -CMGame_Slider_ML::DegToRad(CMGame_Slider_State.MergedProperties.Rotation);
			CMGame_Slider_State.SliderDirection = <
				(CMGame_Slider_State.SliderDirection.X * CMGame_Slider_ML::Cos(RotationRad)) - (CMGame_Slider_State.SliderDirection.Y * CMGame_Slider_ML::Sin(RotationRad)),
				(CMGame_Slider_State.SliderDirection.X * CMGame_Slider_ML::Sin(RotationRad)) + (CMGame_Slider_State.SliderDirection.Y * CMGame_Slider_ML::Cos(RotationRad))
			>;
		}
		CMGame_Slider_State.SliderLength = CMGame_Slider_ML::Distance(<0., 0.>, CMGame_Slider_State.SliderDirection);
		CMGame_Slider_State.SliderDirectionNormalized = <CMGame_Slider_State.SliderDirection.X / CMGame_Slider_State.SliderLength, CMGame_Slider_State.SliderDirection.Y / CMGame_Slider_State.SliderLength>;
		CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, CMGame_Slider_State.Ratio, False);
	}

	// Align the slider
	if (CMGame_Slider_Private_IsDirty(_IsInit, CMGame_Slider_State.DirtyProperties, [CMGame_Slider_C_Property_BarSize, CMGame_Slider_C_Property_CursorSize, CMGame_Slider_C_Property_HAlign, CMGame_Slider_C_Property_VAlign])) {
		CMGame_Slider_Tools::AlignFrame(
			CMGame_Slider_State.Controls.Frame_SliderAlign,
			CMGame_Slider_State.BoundingBox,
			CMGame_Slider_State.MergedProperties.HAlign,
			CMGame_Slider_State.MergedProperties.VAlign
		);
	}

	// Apply opacity
	if (CMGame_Slider_Private_IsDirty(_IsInit, CMGame_Slider_State.DirtyProperties, [CMGame_Slider_C_Property_Opacity])) {
		CMGame_Slider_State.Controls.Quad_BarLeft.Opacity = CMGame_Slider_State.MergedProperties.Opacity;
		CMGame_Slider_State.Controls.Quad_BarRight.Opacity = CMGame_Slider_State.MergedProperties.Opacity;
		CMGame_Slider_State.Controls.Quad_Cursor.Opacity = CMGame_Slider_State.MergedProperties.Opacity;
	}

	// Apply color on cursor
	if (CMGame_Slider_Private_IsDirty(_IsInit, CMGame_Slider_State.DirtyProperties, [CMGame_Slider_C_Property_ApplyColorOnCursor, CMGame_Slider_C_Property_CursorColor, CMGame_Slider_C_Property_CursorColorMode])) {
		if (CMGame_Slider_State.MergedProperties.ApplyColorOnCursor) {
			CMGame_Slider_Private_SetQuadColor(
				CMGame_Slider_State.Controls.Quad_Cursor,
				CMGame_Slider_C_ColorMode_Background,
				CMGame_Slider_Private_GetColorValue(CMGame_Slider_State)
			);
		} else {
			CMGame_Slider_Private_SetQuadColor(
				CMGame_Slider_State.Controls.Quad_Cursor,
				CMGame_Slider_State.MergedProperties.CursorColorMode,
				CMGame_Slider_State.MergedProperties.CursorColor
			);
		}
	}

	// Apply color and image on bar
	if (CMGame_Slider_Private_IsDirty(_IsInit, CMGame_Slider_State.DirtyProperties, [CMGame_Slider_C_Property_BarImageUrl, CMGame_Slider_C_Property_BarColor, CMGame_Slider_C_Property_BarColorMode])) {
		CMGame_Slider_State.Controls.Quad_BarLeft.ImageUrl = CMGame_Slider_State.MergedProperties.BarImageUrl;
		CMGame_Slider_State.Controls.Quad_BarRight.ImageUrl = CMGame_Slider_State.MergedProperties.BarImageUrl;
		CMGame_Slider_Private_SetQuadColor(
			CMGame_Slider_State.Controls.Quad_BarLeft,
			CMGame_Slider_State.MergedProperties.BarColorMode,
			CMGame_Slider_State.MergedProperties.BarColor
		);
		CMGame_Slider_Private_SetQuadColor(
			CMGame_Slider_State.Controls.Quad_BarRight,
			CMGame_Slider_State.MergedProperties.BarColorMode,
			CMGame_Slider_State.MergedProperties.BarColor
		);
	}

	CMGame_Slider_State.DirtyProperties = [];
}
Void CMGame_Slider_RedrawSlider(CMlFrame _Frame_Slider) {
	CMGame_Slider_RedrawSlider(_Frame_Slider, False);
}

// Redraw all sliders
Void CMGame_Slider_RedrawSliders() {
	Page.GetClassChildren("CMGame_Slider_slider", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare CMlFrame Frame_Slider = (Control as CMlFrame).Parent;
		if (CMGame_Slider_IsSlider(Frame_Slider)) {
			CMGame_Slider_RedrawSlider(Frame_Slider);
		}
	}
}

// Customize a property
Void CMGame_Slider_Private_SetCustomizedProperty(CMlFrame _Frame_Slider, Integer _PropertyId, CMGame_Slider_K_Properties _Properties, Boolean _Redraw) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	CMGame_Slider_State.CustomizedProperties = CMGame_Slider_Private_SetProperty(CMGame_Slider_State.CustomizedProperties, _PropertyId, _Properties);
	if (!CMGame_Slider_State.DirtyProperties.exists(_PropertyId)) {
		CMGame_Slider_State.DirtyProperties.add(_PropertyId);
	}
	if (_Redraw) CMGame_Slider_RedrawSlider(_Frame_Slider);
}

// Reset a customized property
Void CMGame_Slider_Private_ResetCustomizedProperty(CMlFrame _Frame_Slider, Integer _PropertyId, Boolean _Redraw) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	CMGame_Slider_State.CustomizedProperties.Enabled = CMGame_Slider_Private_EnableProperty(CMGame_Slider_State.CustomizedProperties.Enabled, _PropertyId, False);
	if (!CMGame_Slider_State.DirtyProperties.exists(_PropertyId)) {
		CMGame_Slider_State.DirtyProperties.add(_PropertyId);
	}
	if (_Redraw) CMGame_Slider_RedrawSlider(_Frame_Slider);
}

// Update the horizontal alignment of the slider
Void CMGame_Slider_SetHAlign(CMlFrame _Frame_Slider, CMlControl::AlignHorizontal _HAlign, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_HAlign, CMGame_Slider_K_Properties { HAlign = _HAlign }, _Redraw);
}
Void CMGame_Slider_SetHAlign(CMlFrame _Frame_Slider, CMlControl::AlignHorizontal _HAlign) {
	CMGame_Slider_SetHAlign(_Frame_Slider, _HAlign, True);
}
Void CMGame_Slider_ResetHAlign(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_HAlign, _Redraw);
}
Void CMGame_Slider_ResetHAlign(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetHAlign(_Frame_Slider, True);
}

// Update the vertical alignment of the slider
Void CMGame_Slider_SetVAlign(CMlFrame _Frame_Slider, CMlControl::AlignVertical _VAlign, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_VAlign, CMGame_Slider_K_Properties { VAlign = _VAlign }, _Redraw);
}
Void CMGame_Slider_SetVAlign(CMlFrame _Frame_Slider, CMlControl::AlignVertical _VAlign) {
	CMGame_Slider_SetVAlign(_Frame_Slider, _VAlign, True);
}
Void CMGame_Slider_ResetVAlign(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_VAlign, _Redraw);
}
Void CMGame_Slider_ResetVAlign(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetVAlign(_Frame_Slider, True);
}

// Update the size of the slider bar
Void CMGame_Slider_SetBarSize(CMlFrame _Frame_Slider, Vec2 _BarSize, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_BarSize, CMGame_Slider_K_Properties { BarSize = _BarSize }, _Redraw);
}
Void CMGame_Slider_SetBarSize(CMlFrame _Frame_Slider, Vec2 _BarSize) {
	CMGame_Slider_SetBarSize(_Frame_Slider, _BarSize, True);
}
Void CMGame_Slider_ResetBarSize(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_BarSize, _Redraw);
}
Void CMGame_Slider_ResetBarSize(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetBarSize(_Frame_Slider, True);
}

// Update the size of the slider cursor
Void CMGame_Slider_SetCursorSize(CMlFrame _Frame_Slider, Vec2 _CursorSize, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_CursorSize, CMGame_Slider_K_Properties { CursorSize = _CursorSize }, _Redraw);
}
Void CMGame_Slider_SetCursorSize(CMlFrame _Frame_Slider, Vec2 _CursorSize) {
	CMGame_Slider_SetCursorSize(_Frame_Slider, _CursorSize, True);
}
Void CMGame_Slider_ResetCursorSize(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_CursorSize, _Redraw);
}
Void CMGame_Slider_ResetCursorSize(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetCursorSize(_Frame_Slider, True);
}

// Update the color of the slider bar
Void CMGame_Slider_SetBarColor(CMlFrame _Frame_Slider, Vec3 _BarColor, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_BarColor, CMGame_Slider_K_Properties { BarColor = _BarColor }, _Redraw);
}
Void CMGame_Slider_SetBarColor(CMlFrame _Frame_Slider, Text _BarColor, Boolean _Redraw) {
	CMGame_Slider_SetBarColor(_Frame_Slider, CMGame_Slider_CL::HexToRgb(_BarColor), _Redraw);
}
Void CMGame_Slider_SetBarColor(CMlFrame _Frame_Slider, Vec3 _BarColor) {
	CMGame_Slider_SetBarColor(_Frame_Slider, _BarColor, True);
}
Void CMGame_Slider_SetBarColor(CMlFrame _Frame_Slider, Text _BarColor) {
	CMGame_Slider_SetBarColor(_Frame_Slider, CMGame_Slider_CL::HexToRgb(_BarColor));
}
Void CMGame_Slider_ResetBarColor(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_BarColor, _Redraw);
}
Void CMGame_Slider_ResetBarColor(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetBarColor(_Frame_Slider, True);
}

// Update the color of the slider cursor
Void CMGame_Slider_SetCursorColor(CMlFrame _Frame_Slider, Vec3 _CursorColor, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_CursorColor, CMGame_Slider_K_Properties { CursorColor = _CursorColor }, _Redraw);
}
Void CMGame_Slider_SetCursorColor(CMlFrame _Frame_Slider, Text _CursorColor, Boolean _Redraw) {
	CMGame_Slider_SetBarColor(_Frame_Slider, CMGame_Slider_CL::HexToRgb(_CursorColor), _Redraw);
}
Void CMGame_Slider_SetCursorColor(CMlFrame _Frame_Slider, Vec3 _CursorColor) {
	CMGame_Slider_SetCursorColor(_Frame_Slider, _CursorColor, True);
}
Void CMGame_Slider_SetCursorColor(CMlFrame _Frame_Slider, Text _CursorColor) {
	CMGame_Slider_SetBarColor(_Frame_Slider, CMGame_Slider_CL::HexToRgb(_CursorColor));
}
Void CMGame_Slider_ResetCursorColor(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_CursorColor, _Redraw);
}
Void CMGame_Slider_ResetCursorColor(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetCursorColor(_Frame_Slider, True);
}

// Update the color mode of the slider bar
Void CMGame_Slider_SetBarColorMode(CMlFrame _Frame_Slider, Integer _BarColorMode, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_BarColorMode, CMGame_Slider_K_Properties { BarColorMode = _BarColorMode }, _Redraw);
}
Void CMGame_Slider_SetBarColorMode(CMlFrame _Frame_Slider, Integer _BarColorMode) {
	CMGame_Slider_SetBarColorMode(_Frame_Slider, _BarColorMode, True);
}
Void CMGame_Slider_ResetBarColorMode(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_BarColorMode, _Redraw);
}
Void CMGame_Slider_ResetBarColorMode(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetBarColorMode(_Frame_Slider, True);
}

// Update the color mode of the slider cursor
Void CMGame_Slider_SetCursorColorMode(CMlFrame _Frame_Slider, Integer _CursorColorMode, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_CursorColorMode, CMGame_Slider_K_Properties { CursorColorMode = _CursorColorMode }, _Redraw);
}
Void CMGame_Slider_SetCursorColorMode(CMlFrame _Frame_Slider, Integer _CursorColorMode) {
	CMGame_Slider_SetCursorColorMode(_Frame_Slider, _CursorColorMode, True);
}
Void CMGame_Slider_ResetCursorColorMode(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_CursorColorMode, _Redraw);
}
Void CMGame_Slider_ResetCursorColorMode(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetCursorColorMode(_Frame_Slider, True);
}

// Update the opacity of the slider
Void CMGame_Slider_SetOpacity(CMlFrame _Frame_Slider, Real _Opacity, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_Opacity, CMGame_Slider_K_Properties { Opacity = _Opacity }, _Redraw);
}
Void CMGame_Slider_SetOpacity(CMlFrame _Frame_Slider, Real _Opacity) {
	CMGame_Slider_SetOpacity(_Frame_Slider, _Opacity, True);
}
Void CMGame_Slider_ResetOpacity(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_Opacity, _Redraw);
}
Void CMGame_Slider_ResetOpacity(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetOpacity(_Frame_Slider, True);
}

// Update the rotation of the slider
Void CMGame_Slider_SetRotation(CMlFrame _Frame_Slider, Real _Rotation, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_Rotation, CMGame_Slider_K_Properties { Rotation = _Rotation }, _Redraw);
}
Void CMGame_Slider_SetRotation(CMlFrame _Frame_Slider, Real _Rotation) {
	CMGame_Slider_SetRotation(_Frame_Slider, _Rotation, True);
}
Void CMGame_Slider_ResetRotation(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_Rotation, _Redraw);
}
Void CMGame_Slider_ResetRotation(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetRotation(_Frame_Slider, True);
}

// Update the range of Real values the slider can return
Void CMGame_Slider_SetRangeReal(CMlFrame _Frame_Slider, Vec2 _RangeReal, Boolean _Redraw) {
	assert(_RangeReal.X <= _RangeReal.Y, "Maximum range (Y) must be superior or equal to minimum range (X)");
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_RangeReal, CMGame_Slider_K_Properties { RangeReal = _RangeReal }, _Redraw);
}
Void CMGame_Slider_SetRangeReal(CMlFrame _Frame_Slider, Vec2 _RangeReal) {
	CMGame_Slider_SetRangeReal(_Frame_Slider, _RangeReal, True);
}
Void CMGame_Slider_ResetRangeReal(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_RangeReal, _Redraw);
}
Void CMGame_Slider_ResetRangeReal(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetRangeReal(_Frame_Slider, True);
}

// Update the range of Integer values the slider can return
Void CMGame_Slider_SetRangeInteger(CMlFrame _Frame_Slider, Int2 _RangeInteger, Boolean _Redraw) {
	assert(_RangeInteger.X <= _RangeInteger.Y, "Maximum range (Y) must be superior or equal to minimum range (X)");
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_RangeInteger, CMGame_Slider_K_Properties { RangeInteger = _RangeInteger }, _Redraw);
}
Void CMGame_Slider_SetRangeInteger(CMlFrame _Frame_Slider, Int2 _RangeInteger) {
	CMGame_Slider_SetRangeInteger(_Frame_Slider, _RangeInteger, True);
}
Void CMGame_Slider_ResetRangeInteger(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_RangeInteger, _Redraw);
}
Void CMGame_Slider_ResetRangeInteger(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetRangeInteger(_Frame_Slider, True);
}

// Update the range of Color values the slider can return
Void CMGame_Slider_SetRangeColor(CMlFrame _Frame_Slider, Vec2 _RangeHue, Real _Saturation, Real _Value, Boolean _Redraw) {
	assert(_RangeHue.X <= _RangeHue.Y, "Maximum range (Y) must be superior or equal to minimum range (X)");
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_RangeColor, CMGame_Slider_K_Properties { RangeColor = CMGame_Slider_K_RangeColor { RangeHue = _RangeHue, Saturation = _Saturation, Value = _Value } }, _Redraw);
}
Void CMGame_Slider_SetRangeColor(CMlFrame _Frame_Slider, Vec2 _RangeHue, Real _Saturation, Real _Value) {
	CMGame_Slider_SetRangeColor(_Frame_Slider, _RangeHue, _Saturation, _Value, True);
}
Void CMGame_Slider_ResetRangeColor(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_RangeColor, _Redraw);
}
Void CMGame_Slider_ResetRangeColor(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetRangeColor(_Frame_Slider, True);
}

// Apply the the color from the color range to the cursor
Void CMGame_Slider_SetApplyColorOnCursor(CMlFrame _Frame_Slider, Boolean _ApplyColorOnCursor, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_ApplyColorOnCursor, CMGame_Slider_K_Properties { ApplyColorOnCursor = _ApplyColorOnCursor }, _Redraw);
}
Void CMGame_Slider_SetApplyColorOnCursor(CMlFrame _Frame_Slider, Boolean _ApplyColorOnCursor) {
	CMGame_Slider_SetApplyColorOnCursor(_Frame_Slider, _ApplyColorOnCursor, True);
}
Void CMGame_Slider_ResetApplyColorOnCursor(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_ApplyColorOnCursor, _Redraw);
}
Void CMGame_Slider_ResetApplyColorOnCursor(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetApplyColorOnCursor(_Frame_Slider, True);
}

// Update the bar image
Void CMGame_Slider_SetBarImageUrl(CMlFrame _Frame_Slider, Text _BarImageUrl, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_BarImageUrl, CMGame_Slider_K_Properties { BarImageUrl = _BarImageUrl }, _Redraw);
}
Void CMGame_Slider_SetBarImageUrl(CMlFrame _Frame_Slider, Text _BarImageUrl) {
	CMGame_Slider_SetBarImageUrl(_Frame_Slider, _BarImageUrl, True);
}
Void CMGame_Slider_ResetBarImageUrl(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_BarImageUrl, _Redraw);
}
Void CMGame_Slider_ResetBarImageUrl(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetBarImageUrl(_Frame_Slider, True);
}

// Update sound to play when changing the slider value
Void CMGame_Slider_SetSoundUpdate(CMlFrame _Frame_Slider, Text _SoundUpdate, Boolean _Redraw) {
	CMGame_Slider_Private_SetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_SoundUpdate, CMGame_Slider_K_Properties { SoundUpdate = _SoundUpdate }, _Redraw);
}
Void CMGame_Slider_SetSoundUpdate(CMlFrame _Frame_Slider, Text _SoundUpdate) {
	CMGame_Slider_SetSoundUpdate(_Frame_Slider, _SoundUpdate, True);
}
Void CMGame_Slider_ResetSoundUpdate(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_Private_ResetCustomizedProperty(_Frame_Slider, CMGame_Slider_C_Property_SoundUpdate, _Redraw);
}
Void CMGame_Slider_ResetSoundUpdate(CMlFrame _Frame_Slider) {
	CMGame_Slider_ResetSoundUpdate(_Frame_Slider, True);
}

// Update the styles of the slider
Void CMGame_Slider_SetStyles(CMlFrame _Frame_Slider, Text[] _StyleIds, Boolean _Redraw) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	CMGame_Slider_State.Styles = _StyleIds;
	if (!CMGame_Slider_State.DirtyProperties.exists(CMGame_Slider_C_Property_Styles)) {
		CMGame_Slider_State.DirtyProperties.add(CMGame_Slider_C_Property_Styles);
	}
	if (_Redraw) CMGame_Slider_RedrawSlider(_Frame_Slider);
}
Void CMGame_Slider_SetStyles(CMlFrame _Frame_Slider, Text[] _StyleIds) {
	CMGame_Slider_SetStyles(_Frame_Slider, _StyleIds, True);
}
Void CMGame_Slider_ResetStyles(CMlFrame _Frame_Slider, Boolean _Redraw) {
	CMGame_Slider_SetStyles(_Frame_Slider, [], _Redraw);
}
Void CMGame_Slider_ResetStyles(CMlFrame _Frame_Slider) {
	CMGame_Slider_SetStyles(_Frame_Slider, []);
}
Void CMGame_Slider_AddStyle(CMlFrame _Frame_Slider, Text _StyleId, Boolean _Redraw) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	if (!CMGame_Slider_State.Styles.exists(_StyleId)) {
		CMGame_Slider_State.Styles.add(_StyleId);
		if (!CMGame_Slider_State.DirtyProperties.exists(CMGame_Slider_C_Property_Styles)) {
			CMGame_Slider_State.DirtyProperties.add(CMGame_Slider_C_Property_Styles);
		}
	}
	if (_Redraw) CMGame_Slider_RedrawSlider(_Frame_Slider);
}
Void CMGame_Slider_AddStyle(CMlFrame _Frame_Slider, Text _StyleId) {
	CMGame_Slider_AddStyle(_Frame_Slider, _StyleId, True);
}
Void CMGame_Slider_RemoveStyle(CMlFrame _Frame_Slider, Text _StyleId, Boolean _Redraw) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	declare Boolean Removed = CMGame_Slider_State.Styles.remove(_StyleId);
	if (Removed && !CMGame_Slider_State.DirtyProperties.exists(CMGame_Slider_C_Property_Styles)) {
		CMGame_Slider_State.DirtyProperties.add(CMGame_Slider_C_Property_Styles);
	}
	if (_Redraw) CMGame_Slider_RedrawSlider(_Frame_Slider);
}
Void CMGame_Slider_RemoveStyle(CMlFrame _Frame_Slider, Text _StyleId) {
	CMGame_Slider_RemoveStyle(_Frame_Slider, _StyleId, True);
}

// Set the default properties of all sliders
Void CMGame_Slider_SetSlidersDefaultProperties(CMGame_Slider_K_Properties _DefaultProperties, Boolean _Redraw) {
	CMGame_Slider_G_DefaultProperties = _DefaultProperties;
	if (_Redraw) CMGame_Slider_RedrawSliders();
}
Void CMGame_Slider_SetSlidersDefaultProperties(CMGame_Slider_K_Properties _DefaultProperties) {
	CMGame_Slider_SetSlidersDefaultProperties(_DefaultProperties, True);
}

// Create a new slider style
Void CMGame_Slider_CreateStyle(Text _StyleId, CMGame_Slider_K_Properties _Style) {
	CMGame_Slider_G_Styles[_StyleId] = _Style;
}

// Initialize a slider
Void CMGame_Slider_InitializeSlider(CMlFrame _Frame_Slider) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	CMGame_Slider_State = CMGame_Slider_K_State {
		IsSlider = True,
		SliderDirection = <0., 1.>,
		SliderDirectionNormalized = <0., 1.>,
		SliderLength = 1.,
		BoundingBox = <0., 0.>,
		Ratio = 0.,
		Steps = 0,
		MouseInteractionDisabled = False,
		CustomizedProperties = CMGame_Slider_K_Properties {},
		MergedProperties = CMGame_Slider_K_Properties {},
		DirtyProperties = [],
		Styles = []
	};

	if (_Frame_Slider.DataAttributeExists("steps")) {
		CMGame_Slider_State = CMGame_Slider_Private_SetSteps(CMGame_Slider_State, CMGame_Slider_TL::ToInteger(_Frame_Slider.DataAttributeGet("steps")));
	}

	if (_Frame_Slider.DataAttributeExists("mouse-interaction-disabled")) {
		CMGame_Slider_State = CMGame_Slider_Private_SetMouseInteractionDisabled(CMGame_Slider_State, CMGame_Slider_Tools::TextToBoolean(_Frame_Slider.DataAttributeGet("mouse-interaction-disabled")));
	}

	CMGame_Slider_State.Controls = CMGame_Slider_K_Controls {
		Frame_CounterRot = (_Frame_Slider.GetFirstChild("CMGame_Slider_frame-counter-rot") as CMlFrame),
		Frame_SliderAlign = (_Frame_Slider.GetFirstChild("CMGame_Slider_frame-slider-align") as CMlFrame),
		Frame_VCenter = (_Frame_Slider.GetFirstChild("CMGame_Slider_frame-vcenter") as CMlFrame),
		Frame_Bar = (_Frame_Slider.GetFirstChild("CMGame_Slider_frame-bar") as CMlFrame),
		Frame_ClipBarLeft = (_Frame_Slider.GetFirstChild("CMGame_Slider_frame-clip-bar-left") as CMlFrame),
		Frame_ClipBarRight = (_Frame_Slider.GetFirstChild("CMGame_Slider_frame-clip-bar-right") as CMlFrame),
		Quad_BarLeft = (_Frame_Slider.GetFirstChild("CMGame_Slider_quad-bar-left") as CMlQuad),
		Quad_BarRight = (_Frame_Slider.GetFirstChild("CMGame_Slider_quad-bar-right") as CMlQuad),
		Quad_BarMouse = (_Frame_Slider.GetFirstChild("CMGame_Slider_quad-bar-mouse") as CMlQuad),
		Quad_Cursor = (_Frame_Slider.GetFirstChild("CMGame_Slider_quad-cursor") as CMlQuad)
	};

	declare CMlFrame CMGame_Slider_ParentSlider as CMGame_Slider_ParentSliderBarMouse for CMGame_Slider_State.Controls.Quad_BarMouse;
	declare CMlFrame CMGame_Slider_ParentSlider as CMGame_Slider_ParentSliderCursor for CMGame_Slider_State.Controls.Quad_Cursor;
	CMGame_Slider_ParentSliderBarMouse = _Frame_Slider;
	CMGame_Slider_ParentSliderCursor = _Frame_Slider;

	if (_Frame_Slider.DataAttributeExists("halign")) {
		CMGame_Slider_SetHAlign(_Frame_Slider, CMGame_Slider_Tools::TextToHAlign2(_Frame_Slider.DataAttributeGet("halign")), False);
	}
	if (_Frame_Slider.DataAttributeExists("valign")) {
		CMGame_Slider_SetVAlign(_Frame_Slider, CMGame_Slider_Tools::TextToVAlign2(_Frame_Slider.DataAttributeGet("valign")), False);
	}
	if (_Frame_Slider.DataAttributeExists("bar-size")) {
		CMGame_Slider_SetBarSize(_Frame_Slider, CMGame_Slider_Tools::TextToVec2(_Frame_Slider.DataAttributeGet("bar-size")), False);
	}
	if (_Frame_Slider.DataAttributeExists("cursor-size")) {
		CMGame_Slider_SetCursorSize(_Frame_Slider, CMGame_Slider_Tools::TextToVec2(_Frame_Slider.DataAttributeGet("cursor-size")), False);
	}
	if (_Frame_Slider.DataAttributeExists("bar-color")) {
		CMGame_Slider_SetBarColor(_Frame_Slider, _Frame_Slider.DataAttributeGet("bar-color"), False);
	}
	if (_Frame_Slider.DataAttributeExists("cursor-color")) {
		CMGame_Slider_SetCursorColor(_Frame_Slider, _Frame_Slider.DataAttributeGet("cursor-color"), False);
	}
	if (_Frame_Slider.DataAttributeExists("bar-color-mode")) {
		CMGame_Slider_SetBarColorMode(_Frame_Slider, CMGame_Slider_TL::ToInteger(_Frame_Slider.DataAttributeGet("bar-color-mode")), False);
	}
	if (_Frame_Slider.DataAttributeExists("cursor-color-mode")) {
		CMGame_Slider_SetCursorColorMode(_Frame_Slider, CMGame_Slider_TL::ToInteger(_Frame_Slider.DataAttributeGet("cursor-color-mode")), False);
	}
	if (_Frame_Slider.DataAttributeExists("opacity")) {
		CMGame_Slider_SetOpacity(_Frame_Slider, CMGame_Slider_TL::ToReal(_Frame_Slider.DataAttributeGet("opacity")), False);
	}
	if (_Frame_Slider.DataAttributeExists("rot")) {
		CMGame_Slider_SetRotation(_Frame_Slider, CMGame_Slider_TL::ToReal(_Frame_Slider.DataAttributeGet("rot")), False);
	}
	if (_Frame_Slider.DataAttributeExists("range-real")) {
		CMGame_Slider_SetRangeReal(_Frame_Slider, CMGame_Slider_Tools::TextToVec2(_Frame_Slider.DataAttributeGet("range-real")), False);
	}
	if (_Frame_Slider.DataAttributeExists("range-integer")) {
		CMGame_Slider_SetRangeInteger(_Frame_Slider, CMGame_Slider_Tools::TextToInt2(_Frame_Slider.DataAttributeGet("range-integer")), False);
	}
	if (_Frame_Slider.DataAttributeExists("range-color")) {
		declare Real[] RangeColor = CMGame_Slider_Tools::TextToRealArray(_Frame_Slider.DataAttributeGet("range-color"));
		declare Vec2 RangeHue = <0., 1.>;
		declare Real Saturation = 1.;
		declare Real Value = 1.;
		if (RangeColor.count >= 2) {
			RangeHue = <RangeColor[0], RangeColor[1]>;
		}
		if (RangeColor.count >= 3) {
			Saturation = RangeColor[2];
		}
		if (RangeColor.count >= 4) {
			Value = RangeColor[3];
		}
		CMGame_Slider_SetRangeColor(_Frame_Slider, RangeHue, Saturation, Value, False);
	}
	if (_Frame_Slider.DataAttributeExists("apply-color-on-cursor")) {
		CMGame_Slider_SetApplyColorOnCursor(_Frame_Slider, CMGame_Slider_Tools::TextToBoolean(_Frame_Slider.DataAttributeGet("apply-color-on-cursor")), False);
	}
	if (_Frame_Slider.DataAttributeExists("bar-image")) {
		CMGame_Slider_SetBarImageUrl(_Frame_Slider, _Frame_Slider.DataAttributeGet("bar-image"), False);
	}
	if (_Frame_Slider.DataAttributeExists("sound-update")) {
		CMGame_Slider_SetSoundUpdate(_Frame_Slider, _Frame_Slider.DataAttributeGet("sound-update"), False);
	}

	CMGame_Slider_RedrawSlider(_Frame_Slider, True);
}

// Initialize all sliders in the manialink
Void CMGame_Slider_InitializeSliders() {
	Page.GetClassChildren("CMGame_Slider_slider", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		CMGame_Slider_InitializeSlider((Control as CMlFrame).Parent);
	}
}

// Compute the ratio of the slider from the position of the cursor
Void CMGame_Slider_Private_SetCursorPosition(CMlFrame _Frame_Slider, Vec2 _CursorPosition) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;

	declare Vec2 ConstrainedPosition = CMGame_Slider_State.SliderDirectionNormalized * CMGame_Slider_ML::DotProduct(<_CursorPosition.X, _CursorPosition.Y, 0.>, <CMGame_Slider_State.SliderDirectionNormalized.X, CMGame_Slider_State.SliderDirectionNormalized.Y, 0.>);
	ConstrainedPosition = <
		CMGame_Slider_ML::Clamp(ConstrainedPosition.X, CMGame_Slider_ML::Min(0., CMGame_Slider_State.SliderDirection.X), CMGame_Slider_ML::Max(0., CMGame_Slider_State.SliderDirection.X)),
		CMGame_Slider_ML::Clamp(ConstrainedPosition.Y, CMGame_Slider_ML::Min(0., CMGame_Slider_State.SliderDirection.Y), CMGame_Slider_ML::Max(0., CMGame_Slider_State.SliderDirection.Y))
	>;

	CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, CMGame_Slider_ML::Distance(<0., 0.>, ConstrainedPosition) / CMGame_Slider_State.SliderLength, False);
}

CMGame_Slider_K_MovingCursor CMGame_Slider_Private_StopMovingCursor(CMGame_Slider_K_MovingCursor _PreviousMovingCursor) {
	CMGame_Slider_PendingEvents.add(CMGame_Slider_K_Event {
		Type = CMGame_Slider_C_EventType_CursorDragStop,
		Slider = _PreviousMovingCursor.Slider
	});
	return CMGame_Slider_K_MovingCursor { IsMoving = False };
}

CMGame_Slider_K_MovingCursor CMGame_Slider_Private_StartMovingCursor(CMGame_Slider_K_MovingCursor _PreviousMovingCursor, CMlControl _Slider, Real _MouseX, Real _MouseY, Boolean _ClickOnBar) {
	if (_PreviousMovingCursor.IsMoving) {
		CMGame_Slider_Private_StopMovingCursor(_PreviousMovingCursor);
	}
	if (_Slider == Null) {
		return CMGame_Slider_K_MovingCursor { IsMoving = False };
	}
	declare CMGame_Slider_K_State CMGame_Slider_State for _Slider;
	if (CMGame_Slider_State.MouseInteractionDisabled) {
		return CMGame_Slider_K_MovingCursor { IsMoving = False };
	}

	// Move the cursor where the user clicked on the bar
	declare CMlFrame Frame_Slider = (_Slider as CMlFrame);
	declare Vec2 CursorRelativePosition = CMGame_Slider_State.Controls.Quad_Cursor.RelativePosition_V3;
	if (_ClickOnBar) {
		CursorRelativePosition -= CMGame_Slider_State.Controls.Quad_Cursor.AbsolutePosition_V3 - <_MouseX, _MouseY> + <CMGame_Slider_State.Controls.Quad_Cursor.Size.X * 0.5, 0.>;
	}

	CMGame_Slider_PendingEvents.add(CMGame_Slider_K_Event {
		Type = CMGame_Slider_C_EventType_CursorDragStart,
		Slider = Frame_Slider
	});

	return CMGame_Slider_K_MovingCursor {
		IsMoving = True,
		Slider = Frame_Slider,
		MouseShift = <_MouseX, _MouseY> - CursorRelativePosition
	};
}

// Set the slider steps
Void CMGame_Slider_SetSteps(CMlFrame _Frame_Slider, Integer _Steps) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	CMGame_Slider_State = CMGame_Slider_Private_SetSteps(CMGame_Slider_State, _Steps);
}

// Disable mouse interaction
Void CMGame_Slider_SetMouseInteractionDisabled(CMlFrame _Frame_Slider, Boolean _MouseInteractionDisabled) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	CMGame_Slider_State = CMGame_Slider_Private_SetMouseInteractionDisabled(CMGame_Slider_State, _MouseInteractionDisabled);
}

// Get the slider ratio
Real CMGame_Slider_GetRatio(CMlFrame _Frame_Slider) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	return CMGame_Slider_State.Ratio;
}

// Set the slider ratio
Void CMGame_Slider_SetRatio(CMlFrame _Frame_Slider, Real _Ratio, Boolean _PlaySound) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, _Ratio, _PlaySound);
}
Void CMGame_Slider_SetRatio(CMlFrame _Frame_Slider, Real _Ratio) {
	CMGame_Slider_SetRatio(_Frame_Slider, _Ratio, False);
}
Void CMGame_Slider_IncrementRatio(CMlFrame _Frame_Slider, Real _Ratio, Boolean _PlaySound) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, CMGame_Slider_State.Ratio + _Ratio, _PlaySound);
}
Void CMGame_Slider_IncrementRatio(CMlFrame _Frame_Slider, Real _Ratio) {
	CMGame_Slider_IncrementRatio(_Frame_Slider, _Ratio, True);
}
Void CMGame_Slider_DecrementRatio(CMlFrame _Frame_Slider, Real _Ratio, Boolean _PlaySound) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, CMGame_Slider_State.Ratio - _Ratio, _PlaySound);
}
Void CMGame_Slider_DecrementRatio(CMlFrame _Frame_Slider, Real _Ratio) {
	CMGame_Slider_DecrementRatio(_Frame_Slider, _Ratio, True);
}
Void CMGame_Slider_NextStep(CMlFrame _Frame_Slider, Boolean _PlaySound) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	if (CMGame_Slider_State.Steps > 1) {
		CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, CMGame_Slider_State.Ratio + (1. / (CMGame_Slider_State.Steps - 1)), _PlaySound);
	}
}
Void CMGame_Slider_NextStep(CMlFrame _Frame_Slider) {
	CMGame_Slider_NextStep(_Frame_Slider, True);
}
Void CMGame_Slider_PreviousStep(CMlFrame _Frame_Slider, Boolean _PlaySound) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	if (CMGame_Slider_State.Steps > 1) {
		CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, CMGame_Slider_State.Ratio - (1. / (CMGame_Slider_State.Steps - 1)), _PlaySound);
	}
}
Void CMGame_Slider_PreviousStep(CMlFrame _Frame_Slider) {
	CMGame_Slider_PreviousStep(_Frame_Slider, True);
}

// Check if the slider is at the maximum or minimum value of its range
Boolean CMGame_Slider_IsAtMaximumValue(CMlFrame _Frame_Slider) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	return CMGame_Slider_State.Ratio >= 1.;
}
Boolean CMGame_Slider_IsAtMinimumValue(CMlFrame _Frame_Slider) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	return CMGame_Slider_State.Ratio <= 0.;
}

// Get the slider Real value in the defined range
Real CMGame_Slider_GetValueReal(CMlFrame _Frame_Slider) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	return CMGame_Slider_ML::Clamp(
		CMGame_Slider_State.MergedProperties.RangeReal.X + (CMGame_Slider_State.Ratio * (CMGame_Slider_State.MergedProperties.RangeReal.Y - CMGame_Slider_State.MergedProperties.RangeReal.X)),
		CMGame_Slider_State.MergedProperties.RangeReal.X,
		CMGame_Slider_State.MergedProperties.RangeReal.Y
	);
}

// Set the slider Real value in the defined range
Void CMGame_Slider_SetValueReal(CMlFrame _Frame_Slider, Real _Value, Boolean _PlaySound) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	if (CMGame_Slider_State.MergedProperties.RangeReal.X != CMGame_Slider_State.MergedProperties.RangeReal.Y) {
		CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, (CMGame_Slider_ML::Clamp(_Value, CMGame_Slider_State.MergedProperties.RangeReal.X, CMGame_Slider_State.MergedProperties.RangeReal.Y) - CMGame_Slider_State.MergedProperties.RangeReal.X) / (CMGame_Slider_State.MergedProperties.RangeReal.Y - CMGame_Slider_State.MergedProperties.RangeReal.X), _PlaySound);
	} else {
		CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, 0., _PlaySound);
	}
}
Void CMGame_Slider_SetValueReal(CMlFrame _Frame_Slider, Real _Value) {
	CMGame_Slider_SetValueReal(_Frame_Slider, _Value, False);
}

// Get the slider Integer value in the defined range
Integer CMGame_Slider_GetValueInteger(CMlFrame _Frame_Slider) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	return CMGame_Slider_ML::Clamp(
		CMGame_Slider_State.MergedProperties.RangeInteger.X + CMGame_Slider_ML::NearestInteger(CMGame_Slider_State.Ratio * (CMGame_Slider_State.MergedProperties.RangeInteger.Y - CMGame_Slider_State.MergedProperties.RangeInteger.X)),
		CMGame_Slider_State.MergedProperties.RangeInteger.X,
		CMGame_Slider_State.MergedProperties.RangeInteger.Y
	);
}

// Set the slider Integer value in the defined range
Void CMGame_Slider_SetValueInteger(CMlFrame _Frame_Slider, Integer _Value, Boolean _PlaySound) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	if (CMGame_Slider_State.MergedProperties.RangeInteger.X != CMGame_Slider_State.MergedProperties.RangeInteger.Y) {
		CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, (CMGame_Slider_ML::Clamp(_Value, CMGame_Slider_State.MergedProperties.RangeInteger.X, CMGame_Slider_State.MergedProperties.RangeInteger.Y) - CMGame_Slider_State.MergedProperties.RangeInteger.X) / ((CMGame_Slider_State.MergedProperties.RangeInteger.Y - CMGame_Slider_State.MergedProperties.RangeInteger.X) * 1.), _PlaySound);
	} else {
		CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, 0., _PlaySound);
	}
}
Void CMGame_Slider_SetValueInteger(CMlFrame _Frame_Slider, Integer _Value) {
	CMGame_Slider_SetValueInteger(_Frame_Slider, _Value, False);
}

// Get the slider color hue value in the defined range
Vec3 CMGame_Slider_GetValueColor(CMlFrame _Frame_Slider) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	return CMGame_Slider_Private_GetColorValue(CMGame_Slider_State);
}

// Set the slider Color value in the defined range
Void CMGame_Slider_SetValueColor(CMlFrame _Frame_Slider, Vec3 _RGBColor, Boolean _PlaySound) {
	declare CMGame_Slider_K_State CMGame_Slider_State for _Frame_Slider;
	assert(CMGame_Slider_State.IsSlider, "This control is not a slider");
	if (CMGame_Slider_State.MergedProperties.RangeColor.RangeHue.X != CMGame_Slider_State.MergedProperties.RangeColor.RangeHue.Y) {
		CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, (CMGame_Slider_ML::Clamp(CMGame_Slider_CL::RgbToHsv(_RGBColor).X, CMGame_Slider_State.MergedProperties.RangeColor.RangeHue.X, CMGame_Slider_State.MergedProperties.RangeColor.RangeHue.Y) - CMGame_Slider_State.MergedProperties.RangeColor.RangeHue.X) / (CMGame_Slider_State.MergedProperties.RangeColor.RangeHue.Y - CMGame_Slider_State.MergedProperties.RangeColor.RangeHue.X), _PlaySound);
	} else {
		CMGame_Slider_State = CMGame_Slider_Private_SetRatio(CMGame_Slider_State, 0., _PlaySound);
	}
}
Void CMGame_Slider_SetValueColor(CMlFrame _Frame_Slider, Vec3 _RGBColor) {
	CMGame_Slider_SetValueColor(_Frame_Slider, _RGBColor, False);
}

***MainInit***
***
declare CMGame_Slider_K_MovingCursor CMGame_Slider_MovingCursor;
***

***MainStart***
***
CMGame_Slider_InitializeSliders();
***

***MainLoop***
***
CMGame_Slider_PendingEvents = [];

foreach (Event in PendingEvents) {
	if (Event.Type == CMlScriptEvent::Type::MouseClick) {
		if (Event.ControlId == "CMGame_Slider_quad-cursor" && Event.Control != Null) {
			declare CMlFrame CMGame_Slider_ParentSlider for Event.Control;
			CMGame_Slider_MovingCursor = CMGame_Slider_Private_StartMovingCursor(CMGame_Slider_MovingCursor, CMGame_Slider_ParentSlider, MouseX, MouseY, False);
		} else if (Event.Control != Null && Event.Control.HasClass("CMGame_Slider_slider-bar")) {
			declare CMlFrame CMGame_Slider_ParentSlider for Event.Control;
			CMGame_Slider_MovingCursor = CMGame_Slider_Private_StartMovingCursor(CMGame_Slider_MovingCursor, CMGame_Slider_ParentSlider, MouseX, MouseY, True);
		}
	}
}

if (CMGame_Slider_MovingCursor.IsMoving) {
	if (MouseLeftButton) {
		CMGame_Slider_Private_SetCursorPosition(CMGame_Slider_MovingCursor.Slider, <MouseX, MouseY> - CMGame_Slider_MovingCursor.MouseShift);
	} else {
		CMGame_Slider_MovingCursor = CMGame_Slider_Private_StopMovingCursor(CMGame_Slider_MovingCursor);
	}
}
***
		
// */
// @Component end component-cmgame-slider

// @Component start component-display-version
// /*

/* The `_ExeVersion` argument is kept for backward compatibility
 * The exe version is now provided directly in the _BuildInfo argument
 */
Void ComponentDisplayVersion_UpdateVersion(CMlLabel[] _Labels_Version, Text _BuildInfo, Text _ExeVersion, Text _ConfigName) {
	declare Text Version = _BuildInfo;
	if (_ConfigName != "" && _ConfigName != "production") {
		if (Version != "") Version ^= "-";
		Version ^= _ConfigName;
	}
	foreach (Label_Version in _Labels_Version) {
		Label_Version.Value = Version;
	}
}
Void ComponentDisplayVersion_UpdateVersion(CMlLabel[] _Labels_Version, Text _BuildInfo, Text _ConfigName) {
	ComponentDisplayVersion_UpdateVersion(_Labels_Version, _BuildInfo, "", _ConfigName);
}

Text ComponentDisplayVersion_GetBuildInfo() {
	return ComponentDisplayVersion_BuildInfo::FormatBuildInfo_Short(ComponentDisplayVersion_BuildInfo::GetBuildInfo(System));
}
// Backward compatibility
Text ComponentDisplayVersion_GetTitleVersion() {
	return ComponentDisplayVersion_GetBuildInfo();
}

Text ComponentDisplayVersion_GetClipboard() {
	return ComponentDisplayVersion_BuildInfo::FormatBuildInfo_Clipboard(ComponentDisplayVersion_BuildInfo::GetBuildInfo(System));
}

***MainInit***
***
declare CMlLabel[] ComponentDisplayVersion_Labels_Version;
declare Integer ComponentDisplayVersion_BuildInfoDirtyCounter;
declare Integer ComponentDisplayVersion_ConfigDirtyCounter;
***

***MainStart***
***
Page.GetClassChildren("ComponentDisplayVersion_label-version", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare CMlLabel Label_Version = (Control as CMlLabel);
	ComponentDisplayVersion_Labels_Version.add(Label_Version);
}

ComponentDisplayVersion_BuildInfoDirtyCounter = ComponentDisplayVersion_BuildInfo::GetDirtyCounter(System);
ComponentDisplayVersion_ConfigDirtyCounter = ComponentDisplayVersion_Config::GetDirtyCounter();

ComponentDisplayVersion_UpdateVersion(ComponentDisplayVersion_Labels_Version, ComponentDisplayVersion_GetBuildInfo(), ComponentDisplayVersion_Config::Get().ConfigName);
***

***MainLoop***
***
if (PageIsVisible) {
	if (
		ComponentDisplayVersion_BuildInfoDirtyCounter != ComponentDisplayVersion_BuildInfo::GetDirtyCounter(System) ||
		ComponentDisplayVersion_ConfigDirtyCounter != ComponentDisplayVersion_Config::GetDirtyCounter()
	) {
		ComponentDisplayVersion_BuildInfoDirtyCounter = ComponentDisplayVersion_BuildInfo::GetDirtyCounter(System);
		ComponentDisplayVersion_ConfigDirtyCounter = ComponentDisplayVersion_Config::GetDirtyCounter();
		ComponentDisplayVersion_UpdateVersion(ComponentDisplayVersion_Labels_Version, ComponentDisplayVersion_GetBuildInfo(), ComponentDisplayVersion_Config::Get().ConfigName);
	}

	foreach (Event in PendingEvents) {
		if (Event.Type == CMlScriptEvent::Type::MouseClick && Event.Control != Null && Event.Control.HasClass("ComponentDisplayVersion_label-version")) {
			System.ClipboardSet(ComponentDisplayVersion_GetClipboard());
		}
	}
}
***
		
// */
// @Component end component-display-version

// @Component start onlineservices-status-api
// /*

		
// */
// @Component end onlineservices-status-api

// @Component start lib-online-services-status-store
// /*


***MainInit***
***
Trackmania_OnlineServicesStatusStore::MainInit(This);
***
		
// */
// @Component end lib-online-services-status-store

// @Component start component-onlineservicescard
// /*

// Update the info displayed in the online services status card
Void ComponentOnlineServicesStatusCard_DisplayOnlineServicesStatus(OnlineServicesStatusAPI_K_OnlineServiceOverview _OnlineServicesStatus, CMlFrame _Frame_OnlineServicesStatusCard) {
	declare ComponentOnlineServicesStatusCard_K_Controls ComponentOnlineServicesStatusCard_Controls for _Frame_OnlineServicesStatusCard;
	switch (_OnlineServicesStatus.Event.Type) {
		case Trackmania_OnlineServicesStatusStore::C_OnlineServicesStatus_None, Trackmania_OnlineServicesStatusStore::C_OnlineServicesStatus_FailedRequest: {
			ComponentOnlineServicesStatusCard_Controls.Frame_Global.Visible = False;
		}
		case Trackmania_OnlineServicesStatusStore::C_OnlineServicesStatus_Maintenance, Trackmania_OnlineServicesStatusStore::C_OnlineServicesStatus_Outage: {
			ComponentOnlineServicesStatusCard_Controls.Label_OnlineServicesStatusName.Value = Trackmania_OnlineServicesStatusStore::GetCurrentStatusNameAndIconColorized();
			CMGame_ExpendableAsset::SetColor(This, ComponentOnlineServicesStatusCard_Controls.Contour_OnlineServicesStatusCard, Trackmania_OnlineServicesStatusStore::GetCurrentStatusColor(), False);
			CMGame_ExpendableAsset::RedrawAsset(This, ComponentOnlineServicesStatusCard_Controls.Contour_OnlineServicesStatusCard, False);

			declare Text EventTimeFrame = "";
			if (_OnlineServicesStatus.Event.StartTimestamp != -1) {
				declare Text StartTimestamp = ComponentOnlineServicesStatusCard_TL::ToText(_OnlineServicesStatus.Event.StartTimestamp);
				if (_OnlineServicesStatus.Event.EndTimestamp != -1) { // event has an end time
					declare Text EndTimestamp = ComponentOnlineServicesStatusCard_TL::ToText(_OnlineServicesStatus.Event.EndTimestamp);
					// Start and end timestamp are on differents days
					if (
						ComponentOnlineServicesStatusCard_TiL::GetDelta(EndTimestamp, StartTimestamp) > ComponentOnlineServicesStatusCard_C_OneDay_InSecs || // more than 24h of difference
						ComponentOnlineServicesStatusCard_TiL::Clamp01TZDay(StartTimestamp) > ComponentOnlineServicesStatusCard_TiL::Clamp01TZDay(EndTimestamp) // or less than 24h diff but EndTimeStamp hour smaller than StartTimestamp (for ex starts at 23:30 on 1st and ends at 1:30 on 2nd)
					) {
						declare Text StartDate = ComponentOnlineServicesStatusCard_TiL::FormatDate(StartTimestamp, ComponentOnlineServicesStatusCard_TiL::EDateFormats::DateShort);
						declare Text StartHour = ComponentOnlineServicesStatusCard_TiL::FormatDate(StartTimestamp, ComponentOnlineServicesStatusCard_TiL::EDateFormats::TimeShort);
						declare Text EndDate = ComponentOnlineServicesStatusCard_TiL::FormatDate(EndTimestamp, ComponentOnlineServicesStatusCard_TiL::EDateFormats::DateShort);
						declare Text EndHour = ComponentOnlineServicesStatusCard_TiL::FormatDate(EndTimestamp, ComponentOnlineServicesStatusCard_TiL::EDateFormats::TimeShort);

						EventTimeFrame = ComponentOnlineServicesStatusCard_TL::Compose(
							//L16N The timeframe of an event (eg. maintenance, outage), %1 for the start date, %2 for the start time, %3 for the end date, %4 for the end time. The text must be on two lines. eg: "From 2022/11/11 at 10:00pm to 2022/11/13 at 12:00am"
							_("|Online Services Status|From %1 at %2\nto %3 at %4"),
							StartDate,
							StartHour,
							EndDate,
							EndHour
						);
					} else { // Same day but different hours
						declare Text Date = ComponentOnlineServicesStatusCard_TiL::FormatDate(StartTimestamp, ComponentOnlineServicesStatusCard_TiL::EDateFormats::DateShort);
						declare Text StartHour = ComponentOnlineServicesStatusCard_TiL::FormatDate(StartTimestamp, ComponentOnlineServicesStatusCard_TiL::EDateFormats::TimeShort);
						declare Text EndHour = ComponentOnlineServicesStatusCard_TiL::FormatDate(EndTimestamp, ComponentOnlineServicesStatusCard_TiL::EDateFormats::TimeShort);

						EventTimeFrame = ComponentOnlineServicesStatusCard_TL::Compose(
							//L16N The timeframe of an event (eg. maintenance, outage), %1 for the start time, %2 for the end time, %3 for the date. eg: "From 10:00am to 11:00pm on 2022/02/11"
							_("|Online Services Status|From %1 to %2 on %3"),
							StartHour,
							EndHour,
							Date
						);
					}
				} else { // event has only a start time
					declare Text Date = ComponentOnlineServicesStatusCard_TiL::FormatDate(StartTimestamp, ComponentOnlineServicesStatusCard_TiL::EDateFormats::DateShort);
					declare Text StartHour = ComponentOnlineServicesStatusCard_TiL::FormatDate(StartTimestamp, ComponentOnlineServicesStatusCard_TiL::EDateFormats::TimeShort);

					if (ComponentOnlineServicesStatusCard_TiL::GetDelta(StartTimestamp, ComponentOnlineServicesStatusCard_TiL::GetCurrent()) >= 0) {
						EventTimeFrame = ComponentOnlineServicesStatusCard_TL::Compose(
							//L16N An event that will start soon (eg. maintenance, outage), %1 for the start time, %2 for the date. eg: "Starts at 10:30am on 2022/02/11"
							_("|Online Services Status|Starts at %1 on %2"),
							StartHour,
							Date
						);
					} else {
						EventTimeFrame = ComponentOnlineServicesStatusCard_TL::Compose(
							//L16N An event already started (eg. maintenance, outage), %1 for the started time, %2 for the date. eg: "Started at 09:00pm on 2022/01/11"
							_("|Online Services Status|Started at %1 on %2"),
							StartHour,
							Date
						);
					}
				}
			}
			ComponentOnlineServicesStatusCard_Controls.Label_OnlineServicesStatusDetails.Value = EventTimeFrame;
			ComponentOnlineServicesStatusCard_Tools::FitLabelValue(ComponentOnlineServicesStatusCard_Controls.Label_OnlineServicesStatusDetails, 2., 1., 0.25);
			ComponentOnlineServicesStatusCard_Controls.Frame_Global.Visible = True;
		}
		case Trackmania_OnlineServicesStatusStore::C_OnlineServicesStatus_Degraded: {
			ComponentOnlineServicesStatusCard_Controls.Label_OnlineServicesStatusName.Value = Trackmania_OnlineServicesStatusStore::GetCurrentStatusNameAndIconColorized();
			CMGame_ExpendableAsset::SetColor(This, ComponentOnlineServicesStatusCard_Controls.Contour_OnlineServicesStatusCard, Trackmania_OnlineServicesStatusStore::GetCurrentStatusColor(), False);
			CMGame_ExpendableAsset::RedrawAsset(This, ComponentOnlineServicesStatusCard_Controls.Contour_OnlineServicesStatusCard, False);

			//L16N The list of services impacted by a degradation, will be followed by the services names, e.g "Services impacted : Live, Core"
			declare Text ServicesImpacted = _("|Online Services Status|Impacted services: ");
			declare Text[] ServicesNames = [];
			foreach (ServiceGroup in _OnlineServicesStatus.ServicesGroups) {
				foreach (Service in ServiceGroup.Services) {
					if (Service.StatusCode < 200 || Service.StatusCode >= 400) {
						ServicesNames.add(Service.Name);
					}
				}
			}
			declare Text ServicesNamesList = ComponentOnlineServicesStatusCard_TL::Join(", ", ServicesNames);
			ComponentOnlineServicesStatusCard_Controls.Label_OnlineServicesStatusDetails.Value = ComponentOnlineServicesStatusCard_TL::Compose("%1 %2", ServicesImpacted, ServicesNamesList);
			ComponentOnlineServicesStatusCard_Tools::FitLabelValue(ComponentOnlineServicesStatusCard_Controls.Label_OnlineServicesStatusDetails, 2., 1., 0.25);
			ComponentOnlineServicesStatusCard_Controls.Frame_Global.Visible = True;
		}
		default: ComponentOnlineServicesStatusCard_Controls.Frame_Global.Visible = False;
	}
}

Void ComponentOnlineServicesStatusCard_HideOnlineServicesStatus(CMlFrame _Frame_OnlineServicesStatusCard) {
	declare ComponentOnlineServicesStatusCard_K_Controls ComponentOnlineServicesStatusCard_Controls for _Frame_OnlineServicesStatusCard;
	ComponentOnlineServicesStatusCard_Controls.Frame_Global.Visible = False;
}

// Initialize online services status card
Void ComponentOnlineServicesStatusCard_InitializeOnlineServicesStatusCard(CMlFrame _Frame_OnlineServicesStatusCard) {
	declare ComponentOnlineServicesStatusCard_K_Controls ComponentOnlineServicesStatusCard_Controls for _Frame_OnlineServicesStatusCard;

	declare CMlFrame Frame_Global <=> (_Frame_OnlineServicesStatusCard.GetFirstChild("ComponentOnlineServicesStatusCard_frame-global") as CMlFrame);
	declare CMlFrame Contour_OnlineServicesStatusCard <=> (_Frame_OnlineServicesStatusCard.GetFirstChild("ComponentOnlineServicesStatusCard_expendable-contour-online-services-status") as CMlFrame);
	declare CMlLabel Label_OnlineServicesStatusName <=> (_Frame_OnlineServicesStatusCard.GetFirstChild("ComponentOnlineServicesStatusCard_label-online-services-status-name") as CMlLabel);
	declare CMlLabel Label_OnlineServicesStatusDetails <=> (_Frame_OnlineServicesStatusCard.GetFirstChild("ComponentOnlineServicesStatusCard_label-online-services-status-details") as CMlLabel);
	ComponentOnlineServicesStatusCard_Controls = ComponentOnlineServicesStatusCard_K_Controls {
		Frame_Global = Frame_Global,
		Contour_OnlineServicesStatusCard = Contour_OnlineServicesStatusCard,
		Label_OnlineServicesStatusName = Label_OnlineServicesStatusName,
		Label_OnlineServicesStatusDetails = Label_OnlineServicesStatusDetails
	};
}

// Initialize all online services status cards in the manialink
Void ComponentOnlineServicesStatusCard_InitializeOnlineServicesStatusCards() {
	Page.GetClassChildren("class-component-onlineservicescard", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare CMlFrame Frame_OnlineServicesStatusCard = (Control as CMlFrame).Parent;
		ComponentOnlineServicesStatusCard_InitializeOnlineServicesStatusCard(Frame_OnlineServicesStatusCard);
	}
}

***MainStart***
***
ComponentOnlineServicesStatusCard_InitializeOnlineServicesStatusCards();
***

// */
// @Component end component-onlineservicescard

// @Component start component-settings
// /*

declare ComponentSettings_K_State ComponentSettings_G_State;
declare ComponentSettings_K_Event[] ComponentSettings_PendingEvents;
declare ComponentSettings_Http::K_Request ComponentSettings_G_Request_PostCheckKey;
declare ComponentSettings_Http::K_Request ComponentSettings_G_Request_PostActivateKey;
declare Ident ComponentSettings_G_TTSContextIdent_Tabs;
declare Ident ComponentSettings_G_TTSContextIdent_Section;
declare Ident ComponentSettings_G_TTSContextIdent_Setting;

// Get a setting from the scroll
ComponentSettings_K_Setting ComponentSettings_Private_GetSettingFromScroll(ComponentSettings_K_State _State, Integer _SettingKey) {
	declare ComponentSettings_K_Setting Setting = ComponentSettings_C_Setting_Null;

	if (_SettingKey >= 0) {
		if (
			_State.ScrollSettingIds.existskey(_State.DisplayedCategory) &&
			_State.ScrollSettingIds[_State.DisplayedCategory].existskey(_SettingKey)
		) {
			Setting = _State.Settings.get(_State.ScrollSettingIds[_State.DisplayedCategory][_SettingKey], ComponentSettings_C_Setting_Null);
		} else if (
			_State.DisplayedCategory == ComponentSettings_C_SettingCategory_Controls &&
			_State.Bindings.existskey(_SettingKey - _State.BindingsKeyShift)
		) {
			declare ComponentSettings_K_Setting SectionSetting = ComponentSettings_C_Setting_Null;
			if (
				_State.ScrollSettingIds.existskey(_State.DisplayedCategory) &&
				_State.ScrollSettingIds[_State.DisplayedCategory].existskey(_State.BindingsKeyShift - 1)
			) {
				SectionSetting = _State.Settings.get(_State.ScrollSettingIds[_State.DisplayedCategory][_State.BindingsKeyShift - 1], ComponentSettings_C_Setting_Null);
			}

			declare ComponentSettings_K_Binding Binding = _State.Bindings[_SettingKey - _State.BindingsKeyShift];
			Setting = ComponentSettings_K_Setting {
				Id = ComponentSettings_C_SettingId_ControlEditBind,
				Name = Binding.ActionName,
				ActionIndex = Binding.ActionIndex,
				Type = ComponentSettings_C_SettingType_Binding,
				New = ComponentSettings_K_Values {
					ValueBinds = Binding.Binds,
					ValueButtonIcons = Binding.ButtonIcons
				},
				SectionKey = SectionSetting.SectionKey,
				SectionId = SectionSetting.SectionId
			};
		}
	}

	return Setting;
}

// Get the value of a slider and convert it to a Text
Text ComponentSettings_Private_SliderValueToText(CMlFrame _Slider_Value, Integer _SliderType) {
	declare Text Value = "";

	switch (_SliderType) {
		case ComponentSettings_C_SliderType_Color: {
			Value = ComponentSettings_CL::RgbToHex6(CMGame_Slider_GetValueColor(_Slider_Value));
		}
		case ComponentSettings_C_SliderType_Integer: {
			Value = ""^CMGame_Slider_GetValueInteger(_Slider_Value);
		}
		default: { //< ComponentSettings_C_SliderType_Real
			declare Real SliderValueReal = CMGame_Slider_GetValueReal(_Slider_Value);
			if (SliderValueReal > -10. && SliderValueReal < 10.) {
				Value = ComponentSettings_TL::FormatReal(CMGame_Slider_GetValueReal(_Slider_Value), 3, False, False);
			} else if (SliderValueReal > -100. && SliderValueReal < 100.) {
				Value = ComponentSettings_TL::FormatReal(CMGame_Slider_GetValueReal(_Slider_Value), 2, False, False);
			} else {
				Value = ComponentSettings_TL::FormatReal(CMGame_Slider_GetValueReal(_Slider_Value), 1, False, False);
			}
		}
	}

	return Value;
}

// Update the buttons in the controller info
ComponentSettings_K_State ComponentSettings_Private_UpdateControllerInfo(
	ComponentSettings_K_State _State,
	Boolean _ForceUpdate,
	Integer _FocusedSettingType,
	Boolean _ScrollIsFocused,
	Boolean _ControllerInfoEnabled,
	Boolean _CanEditSlider,
	Boolean _SettingIsLocked
) {
	if (
		!_ForceUpdate &&
		_State.FocusedSettingType == _FocusedSettingType &&
		_State.ScrollIsFocused == _ScrollIsFocused &&
		_State.ControllerInfoEnabled == _ControllerInfoEnabled &&
		_State.CanEditSlider == _CanEditSlider &&
		_State.SettingIsLocked == _SettingIsLocked
	) {
		return _State;
	}

	declare ComponentSettings_K_State State = _State;
	State.FocusedSettingType = _FocusedSettingType;
	State.ScrollIsFocused = _ScrollIsFocused;
	State.ControllerInfoEnabled = _ControllerInfoEnabled;
	State.CanEditSlider = _CanEditSlider;
	State.SettingIsLocked = _SettingIsLocked;

	State.Controls.ButtonList_Settings.Visible = !State.ControllerInfoEnabled && !State.SettingIsLocked;

	declare Text[Text] Buttons;
	if (State.IsWaitingBind || State.SettingIsLocked) {
		// No buttons displayed during button binding
		// We cannot use `Buttons["B"] = _("Cancel");` because it would display the `B` button icon when using a gamepad.
		// It's really only the "escape" key on the keyboard that can cancel the bind not it's equivalent on the gamepad.
	} else if (State.DiscardPopUpDisplayed || State.ActivateKeyPopUpDisplayed) {
		//L16N [Settings] Select a button.
		Buttons["A"] = _("Select");
		//L16N [Settings] Cancel an action.
		Buttons["B"] = _("Cancel");
	} else if (State.ScrollIsFocused) {
		switch (State.FocusedSettingType) {
			case ComponentSettings_C_SettingType_List, ComponentSettings_C_SettingType_Slider: {
				if (_CanEditSlider) {
					//L16N [Settings] Edit the value of a setting.
					Buttons["A"] = _("|Setting|Edit");
				}
				Buttons["left"] = "";
				//L16N [Settings] Select a value in a list.
				Buttons["right"] = _("Select value");
			}
			case ComponentSettings_C_SettingType_TextField: {
				//L16N [Settings] Edit the value of a setting.
				Buttons["A"] = _("|Setting|Edit");
			}
			case ComponentSettings_C_SettingType_Checkbox: {
				//L16N [Settings] Toggle a setting checkbox.
				Buttons["A"] = _("|Setting|Toggle");
			}
			case ComponentSettings_C_SettingType_Binding: {
				//L16N [Settings] Bind a keyboard or gamepad button.
				Buttons["A"] = _("|ControllerButton|Bind");
			}
			case ComponentSettings_C_SettingType_Button: {
				//L16N [Settings] Select a button.
				Buttons["A"] = _("Select");
			}
		}
	} else {
		//L16N [Settings] Select a button.
		Buttons["A"] = _("Select");
	}

	if (State.ControllerInfoEnabled) {
		ComponentSettings_ControllerInfo::SetButtons(Buttons);
	} else {
		ComponentMenuButtonList_SetButtons(State.Controls.ButtonList_Settings, Buttons);
	}

	return State;
}
ComponentSettings_K_State ComponentSettings_Private_UpdateControllerInfo(
	ComponentSettings_K_State _State,
	Integer _FocusedSettingType,
	Boolean _ScrollIsFocused,
	Boolean _ControllerInfoEnabled,
	Boolean _CanEditSlider,
	Boolean _SettingIsLocked
) {
	return ComponentSettings_Private_UpdateControllerInfo(_State, False, _FocusedSettingType, _ScrollIsFocused, _ControllerInfoEnabled, _CanEditSlider, _SettingIsLocked);
}
ComponentSettings_K_State ComponentSettings_Private_UpdateControllerInfo(ComponentSettings_K_State _State) {
	return ComponentSettings_Private_UpdateControllerInfo(_State, True, _State.FocusedSettingType, _State.ScrollIsFocused, _State.ControllerInfoEnabled, _State.CanEditSlider, _State.SettingIsLocked);
}

ComponentSettings_K_State ComponentSettings_Private_DisplayCalibrationArrows(ComponentSettings_K_State _State, Boolean _IsDisplayed, Boolean _IsAnimated) {
	declare ComponentSettings_K_State State = _State;

	State.IsAreaCalibrationDisplayed = _IsDisplayed;
	foreach (Control_Arrow in State.Controls.Frame_AreaCalibration.Controls) {
		AnimMgr.Flush(Control_Arrow);
		if (_IsAnimated) {
			if (State.IsAreaCalibrationDisplayed) {
				AnimMgr.Add(Control_Arrow, "<anim opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(Control_Arrow, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			if (State.IsAreaCalibrationDisplayed) {
				(Control_Arrow as CMlQuad).Opacity = 1.;
			} else {
				(Control_Arrow as CMlQuad).Opacity = 0.;
			}
		}
	}

	return State;
}

// Enable or disable the navigation in the component
Void ComponentSettings_Private_UpdateNavigationLock(ComponentSettings_K_State _State) {
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-component-settings-global", _State.ComponentEnabled && !_State.DiscardPopUpDisplayed && !_State.ActivateKeyPopUpDisplayed);
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-component-settings-main", _State.ComponentEnabled && !_State.DiscardPopUpDisplayed && !_State.ActivateKeyPopUpDisplayed);
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-component-settings-mouseonly", _State.ComponentEnabled && !_State.DiscardPopUpDisplayed && !_State.ActivateKeyPopUpDisplayed);
	Trackmania_NavigationTabs::LockTabs(This, _State.Controls.NavigationTabs_Categories, !_State.ComponentEnabled || _State.DiscardPopUpDisplayed || _State.ActivateKeyPopUpDisplayed);
	CMGame_Scroll::LockNavigation(_State.Controls.Scroll_Settings, !_State.ComponentEnabled || _State.DiscardPopUpDisplayed || _State.ActivateKeyPopUpDisplayed);
}

// Get the status of a setting
Integer ComponentSettings_Private_GetSettingStatus(ComponentSettings_K_State _State, ComponentSettings_K_Setting _Setting) {
	if (
		_Setting.PlatformFamily.count > 0 && _Setting.Platforms.count > 0 &&
		!_Setting.PlatformFamily.exists(ComponentSettings_Platform::GetFamily(System)) && !_Setting.Platforms.exists(ComponentSettings_Platform::GetPlatform(System))
	) {
		return ComponentSettings_C_SettingStatus_Hidden;
	}
	if (_Setting.Platforms.count <= 0 && _Setting.PlatformFamily.count > 0 && !_Setting.PlatformFamily.exists(ComponentSettings_Platform::GetFamily(System))) {
		return ComponentSettings_C_SettingStatus_Hidden;
	}
	if (_Setting.Platforms.count > 0 && _Setting.PlatformFamily.count <= 0 && !_Setting.Platforms.exists(ComponentSettings_Platform::GetPlatform(System))) {
		return ComponentSettings_C_SettingStatus_Hidden;
	}

	if (_Setting.Id == ComponentSettings_C_SettingId_ControlAnalogVehicleSelection && !_State.VehicleSelectionEnabled) {
		return ComponentSettings_C_SettingStatus_Hidden;
	}

	if (
		(_Setting.Id == ComponentSettings_C_SettingId_SystemCredits && !_State.CreditsEnabled) ||
		(_Setting.Id == ComponentSettings_C_SettingId_ProfileOpenProfilePage && !_State.ProfileEnabled) ||
		(_Setting.Id == ComponentSettings_C_SettingId_ControlLatencyTest && !_State.LatencyTestEnabled)
	) {
		return ComponentSettings_C_SettingStatus_Disabled;
	}

	if (!_State.ShowSettingsThatHaveDisplaySettingsPreset && _Setting.HasDisplaySettingsPreset) {
		return ComponentSettings_C_SettingStatus_Hidden;
	}

	if (!_State.TrackEditorQuickStartEnabled && _Setting.NeedEditorQuickStart) {
		return ComponentSettings_C_SettingStatus_Disabled;
	}

	if (!_State.VoiceChatVoiceDetectionManualSensitivity && _Setting.NeedManualVoiceChatVoiceDetection) {
		return ComponentSettings_C_SettingStatus_Disabled;
	}

	if (_Setting.Permissions.count > 0 && !Trackmania_UserStore::HasGamePermissions(PrivilegeMgr, _Setting.Permissions)) {
		return ComponentSettings_C_SettingStatus_MissingPermission;
	}

	return _Setting.Status;
}

// Check if the setting has one of the given status
Boolean ComponentSettings_Private_SettingHasStatus(ComponentSettings_K_State _State, ComponentSettings_K_Setting _Setting, Integer[] _Statuses) {
	return _Statuses.exists(ComponentSettings_Private_GetSettingStatus(_State, _Setting));
}
Boolean ComponentSettings_Private_SettingHasStatus(ComponentSettings_K_State _State, ComponentSettings_K_Setting _Setting, Integer _Status) {
	return ComponentSettings_Private_GetSettingStatus(_State, _Setting) == _Status;
}

// Update the focus on a line of the settings scroll
ComponentSettings_K_State ComponentSettings_Private_FocusSettingsLine(ComponentSettings_K_State _State, CMlFrame _Frame_SettingLine, Integer _SettingKey, Boolean _IsFocused, Boolean _IsAnimated) {
	declare ComponentSettings_K_State State = _State;

	declare ComponentSettings_K_Setting Setting = ComponentSettings_Private_GetSettingFromScroll(State, _SettingKey);

	if (_Frame_SettingLine != Null) {
		declare CMlFrame Asset_BgLeft <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_asset-bg-left") as CMlFrame);
		declare CMlFrame Asset_BgRight <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_asset-bg-right") as CMlFrame);
		declare CMlFrame Asset_BgDisabled <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_asset-bg-disabled") as CMlFrame);
		declare CMlQuad Quad_Lock <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_quad-lock") as CMlQuad);
		declare CMlLabel Label_Name <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_label-name") as CMlLabel);
		declare CMlLabel Label_ListValue <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_label-list-value") as CMlLabel);
		declare CMlFrame Button_ListPrevious <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_button-list-previous") as CMlFrame);
		declare CMlFrame Button_ListNext <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_button-list-next") as CMlFrame);
		declare CMlFrame Checkbox_Value <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_checkbox-value") as CMlFrame);
		declare CMlFrame Slider_Value <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_slider-value") as CMlFrame);
		declare CMlFrame TextField_SliderValue <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_textfield-slider-value") as CMlFrame);
		declare CMlFrame Textfield_Value <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_textfield-value") as CMlFrame);
		declare CMlFrame Frame_AlignKeybinds <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_frame-align-keybinds") as CMlFrame);
		declare CMlLabel Label_ButtonValue <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_label-button-value") as CMlLabel);
		declare CMlFrame Frame_LatencyTest <=> (_Frame_SettingLine.GetFirstChild("menu-libs-latency-test_frame-latency-test") as CMlFrame);

		declare Vec3 NameTextColor = <0.5, 0.5, 0.5>;
		declare Real ScrollLineOpacity = 0.6;
		declare Real BindingBgOpacity = 0.2;
		declare Real LockOpacity = 0.4;
		if (ComponentSettings_Private_SettingHasStatus(State, Setting, ComponentSettings_C_SettingStatus_Enabled)) {
			if (_IsFocused) {
				NameTextColor = <0.431373, 0.980392, 0.627451>;
				ScrollLineOpacity = 1.;
				BindingBgOpacity = 0.4;
				LockOpacity = 0.6;
			} else {
				NameTextColor = <1., 1., 1.>;
				ScrollLineOpacity = 0.6;
				BindingBgOpacity = 0.2;
			}
		} else if (ComponentSettings_Private_SettingHasStatus(State, Setting, ComponentSettings_C_SettingStatus_MissingPermission)) {
			if (_IsFocused) {
				NameTextColor = <0.431373, 0.980392, 0.627451>;
				ScrollLineOpacity = 0.8;
				BindingBgOpacity = 0.3;
				LockOpacity = 0.6;
			}
		}

		CMGame_ExpendableAsset::SetOpacity(This, Asset_BgLeft, ScrollLineOpacity, False);
		CMGame_ExpendableAsset::RedrawAsset(This, Asset_BgLeft, _IsAnimated);
		CMGame_ExpendableAsset::SetOpacity(This, Asset_BgRight, ScrollLineOpacity, False);
		CMGame_ExpendableAsset::RedrawAsset(This, Asset_BgRight, _IsAnimated);
		CMGame_ExpendableAsset::SetOpacity(This, Asset_BgDisabled, ScrollLineOpacity, False);
		CMGame_ExpendableAsset::RedrawAsset(This, Asset_BgDisabled, _IsAnimated);
		Quad_Lock.Opacity = LockOpacity;
		Label_Name.Opacity = ScrollLineOpacity;
		Label_Name.TextColor = NameTextColor;
		switch (Setting.Type) {
			case ComponentSettings_C_SettingType_List: {
				Label_ListValue.Opacity = ScrollLineOpacity;
				Trackmania_Button::SetBackgroundOpacity(This, Button_ListPrevious, ScrollLineOpacity, False);
				Trackmania_Button::SetOpacityUnfocus(This, Button_ListPrevious, ScrollLineOpacity, False);
				Trackmania_Button::ApplyProperties(This, Button_ListPrevious);
				Trackmania_Button::SetBackgroundOpacity(This, Button_ListNext, ScrollLineOpacity, False);
				Trackmania_Button::SetOpacityUnfocus(This, Button_ListNext, ScrollLineOpacity, False);
				Trackmania_Button::ApplyProperties(This, Button_ListNext);
				if (_IsFocused) Label_ListValue.TTS_Focus();
				else Label_ListValue.TTS_Unfocus();
			}
			case ComponentSettings_C_SettingType_TextField: {
				if (_IsFocused) {
					CMGame_TextField::Focus(This, Textfield_Value, False, _IsAnimated);
				} else {
					CMGame_TextField::Unfocus(This, Textfield_Value, False, _IsAnimated);
				}
			}
			case ComponentSettings_C_SettingType_Checkbox: {
				if (_IsFocused) {
					Trackmania_Checkbox::Focus(This, Checkbox_Value, _IsAnimated);
				} else {
					Trackmania_Checkbox::Unfocus(This, Checkbox_Value, _IsAnimated);
				}
			}
			case ComponentSettings_C_SettingType_Slider: {
				CMGame_Slider_SetOpacity(Slider_Value, ScrollLineOpacity);
				if (TextField_SliderValue.Visible) {
					if (_IsFocused) {
						CMGame_TextField::Focus(This, TextField_SliderValue, False, _IsAnimated);
					} else {
						CMGame_TextField::Unfocus(This, TextField_SliderValue, False, _IsAnimated);
					}
				}
			}
			case ComponentSettings_C_SettingType_Binding: {
				foreach (Control in Frame_AlignKeybinds.Controls) {
					if (Control.HasClass("ComponentSettings_keybind")) {
						declare CMlFrame Frame_Keybind <=> (Control as CMlFrame);
						declare CMlFrame Asset_BgKeybind <=> (Frame_Keybind.GetFirstChild("ComponentSettings_asset-bg-keybind") as CMlFrame);
						declare CMlLabel Label_Keybind <=> (Frame_Keybind.GetFirstChild("ComponentSettings_label-keybind") as CMlLabel);
						CMGame_ExpendableAsset::SetOpacity(This, Asset_BgKeybind, BindingBgOpacity, False);
						CMGame_ExpendableAsset::RedrawAsset(This, Asset_BgKeybind, _IsAnimated);
						Label_Keybind.Opacity = ScrollLineOpacity;
						if (Control.HasClass("ComponentSettings_text-to-speech")) {
							if (_IsFocused) Label_Keybind.TTS_Focus();
							else Label_Keybind.TTS_Unfocus();
						}
					}
				}
			}
			case ComponentSettings_C_SettingType_Button: {
				Label_ButtonValue.Opacity = ScrollLineOpacity;
				if (_IsFocused) Label_ButtonValue.TTS_Focus();
				else Label_ButtonValue.TTS_Unfocus();
				if (Setting.Id == ComponentSettings_C_SettingId_ControlLatencyTest) {
					CMGame_LatencyTest::SetFocusState(This, Frame_LatencyTest, _IsFocused);
				}
			}
		}

		// Reset latency test
		if ((!_IsFocused && CMGame_LatencyTest::IsRunning(Frame_LatencyTest)) || (_IsFocused && Setting.Id == ComponentSettings_C_SettingId_ControlLatencyTest)) {
			CMGame_LatencyTest::Reset(This, Frame_LatencyTest);
			Label_ButtonValue.Show();
		}

		// Display calibration arrows for output scale
		if (State.IsAreaCalibrationDisplayed != (_IsFocused && Setting.Id == ComponentSettings_C_SettingId_VideoOutputScale)) {
			State = ComponentSettings_Private_DisplayCalibrationArrows(State, _IsFocused && Setting.Id == ComponentSettings_C_SettingId_VideoOutputScale, True);
		}

		// Text to speech context
		// The previously focused setting ID is used to avoid reading the entire TTS context when a setting is updated
		if (_IsFocused && (State.PreviouslyFocusedSettingId != Setting.Id || Setting.Id == ComponentSettings_C_SettingId_ControlEditBind)) {
			State.PreviouslyFocusedSettingId = Setting.Id;
			if (ComponentSettings_G_TTSContextIdent_Setting == NullId) ComponentSettings_G_TTSContextIdent_Setting = ParentApp.TTS_Context_Enter(ComponentSettings_C_TTSContextLevel_Setting);
			ParentApp.TTS_Context_Change(ComponentSettings_G_TTSContextIdent_Setting, Label_Name.Value, True);
			ParentApp.TTS_Context_Read(ComponentSettings_C_TTSContextLevel_Setting);
		}
	}

	// Text to speech context
	// The previously focused section ID is used to avoid reading the entire TTS context when a setting is updated
	if (_IsFocused && State.PreviouslyFocusedSectionId != Setting.SectionId) {
		State.PreviouslyFocusedSectionId = Setting.SectionId;
		if (ComponentSettings_G_TTSContextIdent_Section == NullId) ComponentSettings_G_TTSContextIdent_Section = ParentApp.TTS_Context_Enter(ComponentSettings_C_TTSContextLevel_Section);
		ParentApp.TTS_Context_Change(ComponentSettings_G_TTSContextIdent_Section, State.Settings.get(Setting.SectionId, ComponentSettings_K_Setting {}).Name, True);
		ParentApp.TTS_Context_Read(ComponentSettings_C_TTSContextLevel_Section);
	}

	// Highlight the focused section
	if (_IsFocused) {
		State.FocusedSectionId = Setting.SectionId;
	} else {
		State.FocusedSectionId = ComponentSettings_C_SettingId_NullId;
	}
	declare CMlFrame Frame_Section <=> CMGame_Scroll::GetElementVisible(State.Controls.Scroll_Settings, Setting.SectionKey);
	if (Frame_Section != Null) {
		declare CMlLabel Label_SectionName <=> (Frame_Section.GetFirstChild("ComponentSettings_label-section-name") as CMlLabel);
		if (_IsFocused) {
			Label_SectionName.TextColor = <0.431373, 0.980392, 0.627451>;
		} else {
			Label_SectionName.TextColor = <1., 1., 1.>;
		}
	}

	if (_IsFocused) {
		State = ComponentSettings_Private_UpdateControllerInfo(State, Setting.Type, State.ScrollIsFocused, State.ControllerInfoEnabled, Setting.Slider.DisplayTextField, ComponentSettings_Private_SettingHasStatus(State, Setting, ComponentSettings_C_SettingStatus_MissingPermission));
	}

	return State;
}

// Update navigation focus
ComponentSettings_K_State ComponentSettings_Private_Focus(ComponentSettings_K_State _State, CMlControl _From, CMlControl _To) {
	declare ComponentSettings_K_State State = _State;

	if (_From != Null) {
		ComponentNavigation_ComponentNavigation::Unfocus(This, _From);

		if (!_From.HasClass(ComponentSettings_C_Class_NoFocus)) {
			if (CMGame_Scroll::IsScroll(_From)) {
				CMGame_Scroll::Unfocus(This, (_From as CMlFrame));
			} else if (CMGame_ExpendableButton::IsButton(_From)) {
				CMGame_ExpendableButton::Unfocus(This, (_From as CMlFrame));
			} else if (Trackmania_Button::IsButton(_From)) {
				Trackmania_Button::Unfocus(This, (_From as CMlFrame));
			} else if (Trackmania_Checkbox::IsCheckbox(_From)) {
				Trackmania_Checkbox::Unfocus(This, (_From as CMlFrame));
			} else if (CMGame_TextField::IsTextField(_From)) {
				CMGame_TextField::Unfocus(This, (_From as CMlFrame));
			}
		}
	}

	if (_To != Null) {
		ComponentNavigation_ComponentNavigation::Focus(This, _To);

		if (!_To.HasClass(ComponentSettings_C_Class_NoFocus)) {
			if (CMGame_Scroll::IsScroll(_To)) {
				CMGame_Scroll::Focus(This, (_To as CMlFrame));
			} else if (CMGame_ExpendableButton::IsButton(_To)) {
				CMGame_ExpendableButton::Focus(This, (_To as CMlFrame));
			} else if (Trackmania_Button::IsButton(_To)) {
				Trackmania_Button::Focus(This, (_To as CMlFrame));
			} else if (Trackmania_Checkbox::IsCheckbox(_To)) {
				Trackmania_Checkbox::Focus(This, (_To as CMlFrame));
			} else if (CMGame_TextField::IsTextField(_To)) {
				CMGame_TextField::Focus(This, (_To as CMlFrame));
			}
		}

		if (_To.HasClass(ComponentSettings_C_Class_BottomButton)) {
			State.LastBottomButtonFocused = _To;
		}

		// When focusing one of the widget with the mouse
		// force the focus on the corresponding setting line
		// if it's not focused already
		if (_To.HasClass(ComponentSettings_C_Class_FocusSettingLine)) {
			declare Integer ComponentSettings_MouseScrollFocusSettingKey for _To = ComponentSettings_C_SettingKey_Null;
			if (ComponentSettings_MouseScrollFocusSettingKey != ComponentSettings_C_SettingKey_Null && CMGame_Scroll::GetFocusedElementKey(State.Controls.Scroll_Settings) != ComponentSettings_MouseScrollFocusSettingKey) {
				CMGame_Scroll::SetFocusedElementKey(This, State.Controls.Scroll_Settings, ComponentSettings_MouseScrollFocusSettingKey, True, True);
			}
		}
	}

	State = ComponentSettings_Private_UpdateControllerInfo(State, State.FocusedSettingType, CMGame_Scroll::IsFocused(_State.Controls.Scroll_Settings), State.ControllerInfoEnabled, State.CanEditSlider, State.SettingIsLocked);

	return State;
}

// Update the content of a setting line in the scroll
Void ComponentSettings_Private_DisplayList(ComponentSettings_K_State _State, CMlFrame _Frame_TypeList, ComponentSettings_K_Setting _Setting, Boolean _IsTTSFocused) {
	declare CMlLabel Label_ListValue <=> (_Frame_TypeList.GetFirstChild("ComponentSettings_label-list-value") as CMlLabel);
	if (_Setting.List.Labels.existskey(_Setting.New.ValueInteger)) {
		Label_ListValue.Value = _Setting.List.Labels[_Setting.New.ValueInteger];
	} else {
		Label_ListValue.Value = "";
	}
	if (ComponentSettings_Private_SettingHasStatus(_State, _Setting, ComponentSettings_C_SettingStatus_Enabled)) {
		Label_ListValue.TextColor = <1., 1., 1.>;
	} else {
		Label_ListValue.TextColor = <0.5, 0.5, 0.5>;
	}
	// Disable italic on device name to respect first party naming convention
	// Check : /trackmania-next/tmnext/-/issues/4418
	if (
		_Setting.Id == ComponentSettings_C_SettingId_ControlDevice &&
		ComponentSettings_Platform::GetFamily(System) != ComponentSettings_Platform::C_Family_PC
	) {
		Label_ListValue.TextPrefix = "";
	} else {
		Label_ListValue.TextPrefix = "$t$i";
	}
	ComponentSettings_Tools::FitLabelValue(Label_ListValue, 2.5, 1.5, 0.25);

	if (_IsTTSFocused) { //< Read the updated value
		Label_ListValue.TTS_Focus();
	}

	declare CMlFrame Button_ListPrevious <=> (_Frame_TypeList.GetFirstChild("ComponentSettings_button-list-previous") as CMlFrame);
	declare CMlFrame Button_ListNext <=> (_Frame_TypeList.GetFirstChild("ComponentSettings_button-list-next") as CMlFrame);
	declare CMlQuad Quad_ListPreviousDisabled <=> (_Frame_TypeList.GetFirstChild("ComponentSettings_quad-list-previous-disabled") as CMlQuad);
	declare CMlQuad Quad_ListNextDisabled <=> (_Frame_TypeList.GetFirstChild("ComponentSettings_quad-list-next-disabled") as CMlQuad);
	Button_ListPrevious.Visible = ComponentSettings_Private_SettingHasStatus(_State, _Setting, ComponentSettings_C_SettingStatus_Enabled) && (_Setting.List.CanLoop || _Setting.New.ValueInteger > 0);
	Button_ListNext.Visible = ComponentSettings_Private_SettingHasStatus(_State, _Setting, ComponentSettings_C_SettingStatus_Enabled) && (_Setting.List.CanLoop || _Setting.New.ValueInteger < _Setting.List.Labels.count - 1);
	Quad_ListPreviousDisabled.Visible = !Button_ListPrevious.Visible;
	Quad_ListNextDisabled.Visible = !Button_ListNext.Visible;
}

// Update the alert message displayed at the bottom of the screen
ComponentSettings_K_State ComponentSettings_Private_DisplayAlertMessage(ComponentSettings_K_State _State, Text _Message, Boolean _IsError) {
	declare ComponentSettings_K_State State = _State;

	if (_IsError) {
		State.Controls.Label_InfoAlert.TextColor = <0.807843, 0., 0.>;
	} else {
		State.Controls.Label_InfoAlert.TextColor = <0.431373, 0.980392, 0.627451>;
	}

	AnimMgr.Flush(State.Controls.Label_InfoTitle);
	AnimMgr.Flush(State.Controls.Label_InfoDescription);
	AnimMgr.Flush(State.Controls.Label_InfoAlert);

	State.Controls.Label_InfoAlert.Value = _Message;
	State.Controls.Label_InfoAlert.Opacity = 0.;
	State.Controls.Label_InfoAlert.RelativeScale = 1.3;
	State.AlertMessageEndTime = Now + ComponentSettings_C_AlertMessageDuration;

	AnimMgr.Add(State.Controls.Label_InfoTitle, "<a opacity=\"0\" hidden=\"1\" />", 125, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(State.Controls.Label_InfoDescription, "<a opacity=\"0\" hidden=\"1\" />", 125, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(State.Controls.Label_InfoAlert, "<a opacity=\"1\" scale=\"1\" hidden=\"0\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);

	ComponentSettings_Tools::FitLabelValue(State.Controls.Label_InfoAlert, 2.5, 0.25, 0.25);

	return State;
}
ComponentSettings_K_State ComponentSettings_Private_DisplayAlertMessage(ComponentSettings_K_State _State, Text _Message) {
	return ComponentSettings_Private_DisplayAlertMessage(_State, _Message, False);
}
ComponentSettings_K_State ComponentSettings_Private_DisplayErrorMessage(ComponentSettings_K_State _State, Text _Message) {
	return ComponentSettings_Private_DisplayAlertMessage(_State, _Message, True);
}
ComponentSettings_K_State ComponentSettings_Private_HideAlertMessage(ComponentSettings_K_State _State) {
	declare ComponentSettings_K_State State = _State;

	AnimMgr.Flush(State.Controls.Label_InfoTitle);
	AnimMgr.Flush(State.Controls.Label_InfoDescription);
	AnimMgr.Flush(State.Controls.Label_InfoAlert);

	State.AlertMessageEndTime = -1;

	AnimMgr.Add(State.Controls.Label_InfoTitle, "<a opacity=\"1\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(State.Controls.Label_InfoDescription, "<a opacity=\"1\" hidden=\"0\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(State.Controls.Label_InfoAlert, "<a opacity=\"0\" scale=\"1\" hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::Linear);

	return State;
}

// Update the info text displayed at the bottom of the screen
Void ComponentSettings_Private_DisplaySettingInfo(ComponentSettings_K_State _State, Integer _SettingKey) {
	declare ComponentSettings_K_Setting Setting = ComponentSettings_Private_GetSettingFromScroll(_State, _SettingKey);

	if (Setting.Id != ComponentSettings_C_SettingId_NullId && (Setting.InfoDescription != "" || Setting.NeedRestart)) {
		if (Setting.InfoTitle != "") {
			_State.Controls.Label_InfoTitle.Value = Setting.InfoTitle;
		} else {
			_State.Controls.Label_InfoTitle.Value = Setting.Name;
		}
		if (Setting.Id == ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionMode && ComponentSettings_Platform::IsPC(System)) { // @TODO remove this when PTT binding fixed (see trackmania-next/tmnext/-/issues/4757)
			_State.Controls.Label_InfoDescription.Value = ComponentSettings_TL::Compose("%1 %2", _("Set the voice detection mode for the voice chat microphone"), "\n(For Push-To-Talk, hold on the key 'Right Ctrl' to talk)");
		} else if (Setting.Id == ComponentSettings_C_SettingId_ControlLatencyTest) {
			_State.Controls.Label_InfoDescription.Value = ComponentSettings_TL::Compose(Setting.InfoDescription, ComponentSettings_Tools::Ternary(CMGame_LatencyTest::GetAverageLatency(This) >= 0, ""^CMGame_LatencyTest::GetAverageLatency(This), "-")); //< Add the average input latency of players
		}  else if (Setting.Id == ComponentSettings_C_SettingId_SystemCredits) {
			_State.Controls.Label_InfoDescription.Value = ComponentSettings_TL::Compose(Setting.InfoDescription, ""); //< Add a heart symbol at the end of the description
		} else if (Setting.NeedRestart) {
			declare Text Separator = "";
			if (Setting.InfoDescription != "") {
				// We use a new line to separate the setting description from the restart message
				// This means that if the description is longer than two lines, the restart message won't be visible
				Separator = "\n";
			}
			_State.Controls.Label_InfoDescription.Value = ComponentSettings_TL::Compose("%1%2$<$f00%3$>", Setting.InfoDescription, Separator, "Game restart will be required");
		} else {
			_State.Controls.Label_InfoDescription.Value = Setting.InfoDescription;
		}
		ComponentSettings_Tools::FitLabelValue(_State.Controls.Label_InfoDescription, 2., 0.25, 0.25);
	} else {
		_State.Controls.Label_InfoTitle.Value = "";
		_State.Controls.Label_InfoDescription.Value = "";
	}
}

// Update the binds displayed in the setting line
Void ComponentSettings_Private_DisplayBinds(CMlFrame _Frame_AlignKeybinds, Text[] _Binds, Text[] _ButtonIcons) {
	declare Real PosX = 0.;
	foreach (Key => Control in _Frame_AlignKeybinds.Controls) {
		if (Control.HasClass("ComponentSettings_keybind")) {
			declare CMlFrame Frame_Keybind <=> (Control as CMlFrame);
			declare CMlFrame Asset_BgKeybind <=> (Frame_Keybind.GetFirstChild("ComponentSettings_asset-bg-keybind") as CMlFrame);
			declare CMlLabel Label_Keybind <=> (Frame_Keybind.GetFirstChild("ComponentSettings_label-keybind") as CMlLabel);
			declare CMlQuad Quad_PadButtonIcon <=> (Frame_Keybind.GetFirstChild("ComponentSettings_quad-pad-button-icon") as CMlQuad);
			if (_ButtonIcons.existskey(Key)) {
				Quad_PadButtonIcon.ImageUrl = _ButtonIcons[Key];
				Frame_Keybind.Visible = True;
				Asset_BgKeybind.Visible = False;
				Label_Keybind.Visible = False;
				Quad_PadButtonIcon.Visible = True;
				Frame_Keybind.RelativePosition_V3.X = PosX;
				PosX += Quad_PadButtonIcon.Size.X + 1.;
			} else if (_Binds.existskey(Key)) {
				// `$` starts a special formatting sequence, if we want to display the $ key, we must escape it.
				if (_Binds[Key] == "$") {
					Label_Keybind.Value = "$$";
				} else {
					Label_Keybind.Value = _Binds[Key];
				}
				ComponentSettings_Tools::FitLabelValue(Label_Keybind, 2.5, 1.5, 0.25);
				declare Real Width = ComponentSettings_ML::Clamp(Label_Keybind.ComputeWidth(Label_Keybind.Value, True), 3.29144, Label_Keybind.Size.X) + 3.29144;
				CMGame_ExpendableAsset::SetWidth(This, Asset_BgKeybind, Width, False);
				CMGame_ExpendableAsset::RedrawAsset(This, Asset_BgKeybind, False);
				Label_Keybind.RelativePosition_V3.X = Width * 0.5;
				if (ComponentSettings_TL::Find(Label_Keybind.Value, ComponentSettings_C_GamepadButtons, False, True)) {
					Label_Keybind.RelativePosition_V3.Y = -0.75;
				} else {
					Label_Keybind.RelativePosition_V3.Y = 0.;
				}
				Frame_Keybind.RelativePosition_V3.X = PosX;
				PosX += Width - 1.64572 + 2.;
				Frame_Keybind.Visible = True;
				Asset_BgKeybind.Visible = True;
				Label_Keybind.Visible = True;
				Quad_PadButtonIcon.Visible = False;
			} else {
				Frame_Keybind.Visible = False;
			}

			// Text to speech
			if (Frame_Keybind.HasClass("ComponentSettings_text-to-speech")) {
				if (_Binds.count <= 0) {
					Label_Keybind.TTS_AltText = "|TTS|No bind";
				} else {
					Label_Keybind.TTS_AltText = "";
					foreach (Bind in _Binds) {
						Label_Keybind.TTS_AltText ^= Bind^" - ";
					}
				}
			}
		}
	}
	_Frame_AlignKeybinds.RelativePosition_V3.X = (89.6457 - PosX - 3.12687) * 0.5;
}

// Update the content of a setting line in the scroll
Void ComponentSettings_Private_DisplaySettingLine(ComponentSettings_K_State _State, Integer _SettingKey, CMlFrame _Frame_SettingLine) {
	declare ComponentSettings_K_Setting Setting = ComponentSettings_Private_GetSettingFromScroll(_State, _SettingKey);

	// Display the setting name
	declare CMlLabel Label_Name <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_label-name") as CMlLabel);
	if (Setting.Id == ComponentSettings_C_SettingId_ProfileCopyAccountId) {
		if (LocalUser != Null) {
			Label_Name.Value = ComponentSettings_TL::Compose(Setting.Name, LocalUser.WebServicesUserId);
		} else {
			//L16N [Settings] Displayed when we cannot get the user account ID
			Label_Name.Value = ComponentSettings_TL::Compose(Setting.Name, _("|AccountId|Unknown"));
		}
	} else if (Setting.Id == ComponentSettings_C_SettingId_ControlLatencyTest && CMGame_LatencyTest::GetPersonalBest(This) != -1) {
		//L16N [Settings] Calculate the input lag by pressing the button when it appears. %1 will be replaced by the best latency achieved by the player. e.g. "Latency test (Personal best: 15ms)"
		Label_Name.Value = ComponentSettings_TL::Compose(_("Latency test (personal best: %1ms)"), ""^CMGame_LatencyTest::GetPersonalBest(This));
	} else {
		Label_Name.Value = Setting.Name;
	}
	ComponentSettings_Tools::FitLabelValue(Label_Name, 2.5, 1., 0.25);
	if (ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_Enabled)) {
		Label_Name.TextColor = <1., 1., 1.>;
	} else {
		Label_Name.TextColor = <0.5, 0.5, 0.5>;
	}

	// Toggle between setting and section
	declare CMlFrame Frame_SettingLineBg <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_frame-setting-line-bg") as CMlFrame);
	declare CMlFrame Frame_Widget <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_frame-widget") as CMlFrame);
	declare CMlLabel Label_SectionName <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_label-section-name") as CMlLabel);
	Frame_SettingLineBg.Visible = Setting.Type != ComponentSettings_C_SettingType_Section;
	Frame_Widget.Visible = Setting.Type != ComponentSettings_C_SettingType_Section;
	Label_SectionName.Visible = Setting.Type == ComponentSettings_C_SettingType_Section;

	// Display the correct widget
	declare CMlFrame Frame_TypeList <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_frame-type-list") as CMlFrame);
	declare CMlFrame Frame_TypeTextField <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_frame-type-textfield") as CMlFrame);
	declare CMlFrame Frame_TypeCheckbox <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_frame-type-checkbox") as CMlFrame);
	declare CMlFrame Frame_TypeSlider <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_frame-type-slider") as CMlFrame);
	declare CMlFrame Frame_TypeBinding <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_frame-type-binding") as CMlFrame);
	declare CMlFrame Frame_AlignKeybinds <=> (Frame_TypeBinding.GetFirstChild("ComponentSettings_frame-align-keybinds") as CMlFrame);
	declare CMlFrame Frame_TypeButton <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_frame-type-button") as CMlFrame);
	declare CMlFrame Frame_LatencyTest <=> (_Frame_SettingLine.GetFirstChild("menu-libs-latency-test_frame-latency-test") as CMlFrame);
	Frame_TypeList.Visible = Setting.Type == ComponentSettings_C_SettingType_List;
	Frame_TypeTextField.Visible = Setting.Type == ComponentSettings_C_SettingType_TextField;
	Frame_TypeCheckbox.Visible = Setting.Type == ComponentSettings_C_SettingType_Checkbox;
	Frame_TypeSlider.Visible = Setting.Type == ComponentSettings_C_SettingType_Slider;
	Frame_TypeBinding.Visible = Setting.Type == ComponentSettings_C_SettingType_Binding;
	Frame_TypeButton.Visible = Setting.Type == ComponentSettings_C_SettingType_Button;
	Frame_LatencyTest.Visible = Setting.Type == ComponentSettings_C_SettingType_Button && Setting.Id == ComponentSettings_C_SettingId_ControlLatencyTest;

	// Update background behind disabled setting
	declare CMlFrame Asset_BgLeft <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_asset-bg-left") as CMlFrame);
	declare CMlFrame Asset_BgRight <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_asset-bg-right") as CMlFrame);
	declare CMlFrame Asset_BgDisabled <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_asset-bg-disabled") as CMlFrame);
	declare Boolean ActiveBgVisible = ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_Enabled);
	Asset_BgLeft.Visible = ActiveBgVisible;
	Asset_BgRight.Visible = ActiveBgVisible;
	Asset_BgDisabled.Visible = !ActiveBgVisible;

	// Display a lock icon beside the settings where the player is missing a permission
	declare CMlQuad Quad_Lock <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_quad-lock") as CMlQuad);
	Quad_Lock.Visible = ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_MissingPermission);

	// Update the setting value
	switch (Setting.Type) {
		case ComponentSettings_C_SettingType_Section: {
			Label_SectionName.Value = Setting.Name;
			if (_State.FocusedSectionId == Setting.Id) {
				Label_SectionName.TextColor = <0.431373, 0.980392, 0.627451>;
			} else {
				Label_SectionName.TextColor = <1., 1., 1.>;
			}
		}
		case ComponentSettings_C_SettingType_TextField: {
			declare CMlFrame TextField_Value <=> (Frame_TypeTextField.GetFirstChild("ComponentSettings_textfield-value") as CMlFrame);
			declare CMlLabel Label_TextFieldDisabled <=> (Frame_TypeTextField.GetFirstChild("ComponentSettings_label-textfield-disabled") as CMlLabel);
			declare Text Value;

			switch (Setting.Id) {
				case ComponentSettings_C_SettingId_SystemNetworkSpeedDownload, ComponentSettings_C_SettingId_SystemNetworkSpeedUpload: {
					declare ComponentSettings_K_Setting NetworkSpeedSetting = _State.Settings.get(ComponentSettings_C_SettingId_SystemNetworkSpeed, ComponentSettings_C_Setting_Null);
					declare CManiaPlanet::ENetworkSpeed NetworkSpeed = CManiaPlanet::ENetworkSpeed::Custom;
					if (
						NetworkSpeedSetting.Id != ComponentSettings_C_SettingId_NullId &&
						NetworkSpeedSetting.List.ValuesNetworkSpeed.existskey(NetworkSpeedSetting.New.ValueInteger)
					) {
						NetworkSpeed = NetworkSpeedSetting.List.ValuesNetworkSpeed[NetworkSpeedSetting.New.ValueInteger];
					}

					if (NetworkSpeed == CManiaPlanet::ENetworkSpeed::Custom) {
						Value = Setting.New.ValueText;
					} else {
						if (Setting.Id == ComponentSettings_C_SettingId_SystemNetworkSpeedDownload) {
							if (ComponentSettings_C_NetworkSpeeds.existskey(NetworkSpeed)) {
								Value = ""^ComponentSettings_C_NetworkSpeeds[NetworkSpeed].X;
							} else {
								Value = ""^ParentApp.ManiaPlanet.NetworkSpeed_CustomDownload;
							}
						} else if (Setting.Id == ComponentSettings_C_SettingId_SystemNetworkSpeedUpload) {
							if (ComponentSettings_C_NetworkSpeeds.existskey(NetworkSpeed)) {
								Value = ""^ComponentSettings_C_NetworkSpeeds[NetworkSpeed].Y;
							} else {
								Value = ""^ParentApp.ManiaPlanet.NetworkSpeed_CustomUpload;
							}
						}
					}
				}
				default: {
					Value = Setting.New.ValueText;
				}
			}
			if (ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_Enabled)) {
				CMGame_TextField::SetValue(This, TextField_Value, Value, False);
				TextField_Value.Visible = True;
				Label_TextFieldDisabled.Visible = False;
			} else {
				Label_TextFieldDisabled.Value = Value;
				Label_TextFieldDisabled.TextColor = <0.5, 0.5, 0.5>;
				Label_TextFieldDisabled.Visible = True;
				TextField_Value.Visible = False;
			}

			declare Integer ComponentSettings_DisplayedSettingId for TextField_Value;
			ComponentSettings_DisplayedSettingId = Setting.Id;
		}
		case ComponentSettings_C_SettingType_Button: {
			declare CMlLabel Label_ButtonValue <=> (Frame_TypeButton.GetFirstChild("ComponentSettings_label-button-value") as CMlLabel);
			Label_ButtonValue.Value = Setting.ButtonText;
			if (ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_Enabled)) {
				Label_ButtonValue.TextColor = <1., 1., 1.>;
			} else {
				Label_ButtonValue.TextColor = <0.5, 0.5, 0.5>;
			}
		}
		case ComponentSettings_C_SettingType_Slider: {
			declare CMlFrame Frame_SliderAlign <=> (Frame_TypeSlider.GetFirstChild("ComponentSettings_frame-slider-align") as CMlFrame);
			declare CMlFrame Slider_Value <=> (Frame_SliderAlign.GetFirstChild("ComponentSettings_slider-value") as CMlFrame);
			declare CMlFrame TextField_SliderValue <=> (Frame_SliderAlign.GetFirstChild("ComponentSettings_textfield-slider-value") as CMlFrame);
			declare CMlLabel Label_SliderValueDisabled <=> (Frame_TypeSlider.GetFirstChild("ComponentSettings_label-slider-value-disabled") as CMlLabel);

			// Do not delay the redraw of the slider after the range update
			// The slider would not display the correct value otherwise
			CMGame_Slider_SetSteps(Slider_Value, Setting.Slider.Steps);
			if (Setting.Slider.RangeInteger == <0, 0>) {
				CMGame_Slider_ResetRangeInteger(Slider_Value);
			} else {
				CMGame_Slider_SetRangeInteger(Slider_Value, Setting.Slider.RangeInteger);
			}
			if (Setting.Slider.RangeReal == <0., 0.>) {
				CMGame_Slider_ResetRangeReal(Slider_Value);
			} else {
				CMGame_Slider_SetRangeReal(Slider_Value, Setting.Slider.RangeReal);
			}
			switch (Setting.Slider.Type) {
				case ComponentSettings_C_SliderType_Color: {
					CMGame_Slider_SetApplyColorOnCursor(Slider_Value, True, False);
					CMGame_Slider_SetBarImageUrl(Slider_Value, "file://Media/Manialinks/Nadeo/Trackmania/Menus/Common/Hue.dds", False);
					CMGame_Slider_SetValueReal(Slider_Value, Setting.New.ValueReal);
				}
				case ComponentSettings_C_SliderType_Integer: {
					CMGame_Slider_SetApplyColorOnCursor(Slider_Value, False, False);
					CMGame_Slider_SetBarImageUrl(Slider_Value, "", False);
					CMGame_Slider_SetValueInteger(Slider_Value, Setting.New.ValueInteger);
				}
				default: { //< ComponentSettings_C_SliderType_Real
					CMGame_Slider_SetApplyColorOnCursor(Slider_Value, False, False);
					CMGame_Slider_SetBarImageUrl(Slider_Value, "", False);
					if (ComponentSettings_C_AnalogSettings.exists(Setting.Id) && Setting.New.ValueControlAnalogReal.existskey(_State.ControlVehicleModel)) {
						CMGame_Slider_SetValueReal(Slider_Value, Setting.New.ValueControlAnalogReal[_State.ControlVehicleModel]);
					} else {
						CMGame_Slider_SetValueReal(Slider_Value, Setting.New.ValueReal);
					}
				}
			}
			if (ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_Enabled)) {
				CMGame_Slider_SetBarColor(Slider_Value, <1., 1., 1.>, False);
				CMGame_Slider_SetCursorColor(Slider_Value, <1., 1., 1.>, False);
				TextField_SliderValue.Visible = Setting.Slider.DisplayTextField;
				if (TextField_SliderValue.Visible) {
					CMGame_TextField::SetValue(This, TextField_SliderValue, ComponentSettings_Private_SliderValueToText(Slider_Value, Setting.Slider.Type), False);
					Frame_SliderAlign.RelativePosition_V3.X = CMGame_TextField::GetSize(TextField_SliderValue).X * 0.5;
				} else {
					Frame_SliderAlign.RelativePosition_V3.X = 0.;
				}
				Label_SliderValueDisabled.Visible = False;
			} else {
				CMGame_Slider_SetBarColor(Slider_Value, <0.5, 0.5, 0.5>, False);
				CMGame_Slider_SetCursorColor(Slider_Value, <0.5, 0.5, 0.5>, False);
				Label_SliderValueDisabled.Visible = Setting.Slider.DisplayTextField;
				if (Label_SliderValueDisabled.Visible) {
					Label_SliderValueDisabled.Value = ComponentSettings_Private_SliderValueToText(Slider_Value, Setting.Slider.Type);
					Label_SliderValueDisabled.TextColor = <0.5, 0.5, 0.5>;
					Frame_SliderAlign.RelativePosition_V3.X = CMGame_TextField::GetSize(TextField_SliderValue).X * 0.5;
				} else {
					Frame_SliderAlign.RelativePosition_V3.X = 0.;
				}
				TextField_SliderValue.Visible = False;
			}
			CMGame_Slider_SetMouseInteractionDisabled(Slider_Value, !ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_Enabled));
			CMGame_Slider_RedrawSlider(Slider_Value);

			declare Integer ComponentSettings_DisplayedSettingId as ComponentSettings_DisplayedSettingId_Slider for Slider_Value;
			declare Integer ComponentSettings_DisplayedSettingId as ComponentSettings_DisplayedSettingId_TextField for TextField_SliderValue;
			declare CMlFrame ComponentSettings_Frame_SettingLine as ComponentSettings_Frame_SettingLine_Slider for Slider_Value;
			declare CMlFrame ComponentSettings_Frame_SettingLine as ComponentSettings_Frame_SettingLine_TextField for TextField_SliderValue;
			declare CMlFrame ComponentSettings_Slider_Value for TextField_SliderValue;
			declare CMlFrame ComponentSettings_TextField_SliderValue for Slider_Value;
			ComponentSettings_DisplayedSettingId_Slider = Setting.Id;
			ComponentSettings_DisplayedSettingId_TextField = Setting.Id;
			ComponentSettings_Frame_SettingLine_Slider = _Frame_SettingLine;
			ComponentSettings_Frame_SettingLine_TextField = _Frame_SettingLine;
			ComponentSettings_Slider_Value = Slider_Value;
			ComponentSettings_TextField_SliderValue = TextField_SliderValue;
		}
		case ComponentSettings_C_SettingType_Checkbox: {
			declare CMlFrame Checkbox_Value <=> (Frame_TypeCheckbox.GetFirstChild("ComponentSettings_checkbox-value") as CMlFrame);

			if (ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_Enabled)) {
				Trackmania_Checkbox::SetIconColor(This, Checkbox_Value, <1., 1., 1.>, False);
				Trackmania_Checkbox::SetIconFocusColor(This, Checkbox_Value, <1., 1., 1.>, False);
				Trackmania_Checkbox::SetTextColor(This, Checkbox_Value, <1., 1., 1.>, False);
			} else {
				Trackmania_Checkbox::SetIconColor(This, Checkbox_Value, <0.5, 0.5, 0.5>, False);
				Trackmania_Checkbox::SetIconFocusColor(This, Checkbox_Value, <0.5, 0.5, 0.5>, False);
				Trackmania_Checkbox::SetTextColor(This, Checkbox_Value, <0.5, 0.5, 0.5>, False);
			}

			if (ComponentSettings_C_AnalogSettings.exists(Setting.Id) && Setting.New.ValueControlAnalogBoolean.existskey(_State.ControlVehicleModel)) {
				Trackmania_Checkbox::Check(This, Checkbox_Value, Setting.New.ValueControlAnalogBoolean[_State.ControlVehicleModel], False);
			} else {
				Trackmania_Checkbox::Check(This, Checkbox_Value, Setting.New.ValueBoolean, False);
			}
			declare Integer ComponentSettings_DisplayedSettingId for Checkbox_Value;
			ComponentSettings_DisplayedSettingId = Setting.Id;

			if (ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_Enabled)) {
				Trackmania_Checkbox::SetOpacityFocus(This, Checkbox_Value, 1., False);
				Trackmania_Checkbox::SetOpacityUnfocus(This, Checkbox_Value, 0.6, False);
			} else if (ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_MissingPermission)) {
				Trackmania_Checkbox::SetOpacityFocus(This, Checkbox_Value, 0.8, False);
				Trackmania_Checkbox::SetOpacityUnfocus(This, Checkbox_Value, 0.6, False);
			} else {
				Trackmania_Checkbox::SetOpacityFocus(This, Checkbox_Value, 0.6, False);
				Trackmania_Checkbox::SetOpacityUnfocus(This, Checkbox_Value, 0.6, False);
			}

			if (Setting.Checkbox.TextRight != "" && Setting.Checkbox.TextLeft != "") {
				Trackmania_Checkbox::SetValue(This, Checkbox_Value, Setting.Checkbox.TextRight, False);
				Trackmania_Checkbox::SetMirrorValue(This, Checkbox_Value, Setting.Checkbox.TextLeft, False);
				Trackmania_Checkbox::SetLabelSize(This, Checkbox_Value, <35., 10.>, False);
				Trackmania_Checkbox::SetIconChecked(This, Checkbox_Value, "file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/icons_128_switch_on.dds", False);
				Trackmania_Checkbox::SetIconUnchecked(This, Checkbox_Value, "file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/icons_128_switch_off.dds", False);
				Trackmania_Checkbox::SetIconSize(This, Checkbox_Value, <10., 10.>, False);
			} else {
				Trackmania_Checkbox::SetValue(This, Checkbox_Value, "", False);
				Trackmania_Checkbox::SetMirrorValue(This, Checkbox_Value, "", False);
				Trackmania_Checkbox::SetLabelSize(This, Checkbox_Value, <0., 0.>, False);
				Trackmania_Checkbox::SetIconChecked(This, Checkbox_Value, "file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/Icones_128_icon_checkbox_square_active_01_oblique.dds", False);
				Trackmania_Checkbox::SetIconUnchecked(This, Checkbox_Value, "file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/Icones_128_icon_checkbox_square_inactive_01_oblique.dds", False);
				Trackmania_Checkbox::SetIconSize(This, Checkbox_Value, <8., 8.>, False);
			}

			Trackmania_Checkbox::ApplyProperties(This, Checkbox_Value);
		}
		case ComponentSettings_C_SettingType_List: {
			ComponentSettings_Private_DisplayList(_State, Frame_TypeList, Setting, False);

			declare Integer ComponentSettings_DisplayedSettingId as PreviousDisplayedSettingId for Frame_TypeList.GetFirstChild("ComponentSettings_button-list-previous");
			declare Integer ComponentSettings_DisplayedSettingId as NextDisplayedSettingId for Frame_TypeList.GetFirstChild("ComponentSettings_button-list-next");
			PreviousDisplayedSettingId = Setting.Id;
			NextDisplayedSettingId = Setting.Id;
		}
		case ComponentSettings_C_SettingType_Binding: {
			ComponentSettings_Private_DisplayBinds(Frame_AlignKeybinds, Setting.New.ValueBinds, Setting.New.ValueButtonIcons);
		}
	}

	// Save the parent setting line key
	Page.GetClassChildren(ComponentSettings_C_Class_FocusSettingLine, _Frame_SettingLine, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare Integer ComponentSettings_MouseScrollFocusSettingKey for Control = ComponentSettings_C_SettingKey_Null;
		ComponentSettings_MouseScrollFocusSettingKey = _SettingKey;
	}
}

// Update the visibility of the dimmer
Void ComponentSettings_Private_UpdateDimmer(ComponentSettings_K_State _State) {
	AnimMgr.Flush(_State.Controls.Quad_Dimmer);
	if (_State.IsWaitingBind) {
		AnimMgr.Add(_State.Controls.Quad_Dimmer, "<a opacity=\"0.7\" hidden=\"0\" />", 200, CAnimManager::EAnimManagerEasing::Linear);
	} else {
		AnimMgr.Add(_State.Controls.Quad_Dimmer, "<a opacity=\"0\" hidden=\"1\" />", 200, CAnimManager::EAnimManagerEasing::Linear);
	}
}

ComponentSettings_K_State ComponentSettings_Private_DisplayDiscardChangesPopUp(ComponentSettings_K_State _State, Boolean _Display, ComponentSettings_K_AfterDiscardPopUp _AfterDiscardPopUp) {
	declare ComponentSettings_K_State State = _State;

	State.DiscardPopUpDisplayed = _Display;
	if (_Display) {
		State.AfterDiscardPopUp = _AfterDiscardPopUp;
	}
	Trackmania_PopUpMultiChoice::Display(This, ComponentSettings_G_State.Controls.PopUp_DiscardChanges, State.DiscardPopUpDisplayed, False);
	Trackmania_PopUpMultiChoice::FocusFirstChoice(This, ComponentSettings_G_State.Controls.PopUp_DiscardChanges, True);
	ComponentSettings_Private_UpdateNavigationLock(State);
	State = ComponentSettings_Private_UpdateControllerInfo(State);

	return State;
}
ComponentSettings_K_State ComponentSettings_Private_DisplayDiscardChangesPopUp(ComponentSettings_K_State _State, Boolean _Display) {
	return ComponentSettings_Private_DisplayDiscardChangesPopUp(_State, _Display, ComponentSettings_K_AfterDiscardPopUp { Action = ComponentSettings_C_ActionAfterDiscardPopUp_Null });
}

ComponentSettings_K_State ComponentSettings_Private_DisplayActivateKeyPopUp(ComponentSettings_K_State _State, Boolean _Display) {
	declare ComponentSettings_K_State State = _State;

	State.ActivateKeyPopUpDisplayed = _Display;
	Trackmania_PopUpMultiChoice::Display(This, State.Controls.PopUp_ActivateKey, State.ActivateKeyPopUpDisplayed, False);
	Trackmania_PopUpMultiChoice::FocusFirstChoice(This, State.Controls.PopUp_ActivateKey, True);
	ComponentSettings_Private_UpdateNavigationLock(State);
	State = ComponentSettings_Private_UpdateControllerInfo(State);

	return State;
}

// Select which category of settings must be displayed in the scroll
ComponentSettings_K_State ComponentSettings_Private_SetDisplayedCategory(
	ComponentSettings_K_State _State,
	Integer _Category,
	Boolean _CheckDirtySettingsBefore,
	Boolean _ResetLastFocusedSettingKey,
	Boolean _ScrollToAndFocusElement
) {
	declare ComponentSettings_K_State State = _State;
	declare Integer CurrentTab = Trackmania_NavigationTabs::GetCurrentTab(State.Controls.NavigationTabs_Categories);

	if (ComponentSettings_C_DiscardSettingsOnTabChange && _CheckDirtySettingsBefore && State.SettingsAreDirty) {
		State = ComponentSettings_Private_DisplayDiscardChangesPopUp(
			State,
			True,
			ComponentSettings_K_AfterDiscardPopUp {
				Action = ComponentSettings_C_ActionAfterDiscardPopUp_GoToCategory,
				DisplayedCategory = _Category
			}
		);
	} else {
		if (State.ScrollSettingIds.existskey(_Category)) {
			// Reset or save focused setting before changing category
			if (_ResetLastFocusedSettingKey) {
				State.LastFocusedSettingKey = [];
			} else {
				State.LastFocusedSettingKey[State.DisplayedCategory] = CMGame_Scroll::GetFocusedElementKey(State.Controls.Scroll_Settings);
			}

			State.DisplayedCategory = _Category;
			declare Integer[] CategorySettingIds = State.ScrollSettingIds[State.DisplayedCategory];
			if (State.DisplayedCategory == ComponentSettings_C_SettingCategory_Controls) {
				State.BindingsKeyShift = State.ScrollSettingIds[ComponentSettings_C_SettingCategory_Controls].count;
				CMGame_Scroll::SetElementsTotal(This, State.Controls.Scroll_Settings, State.BindingsKeyShift + State.Bindings.count);
			} else {
				CMGame_Scroll::SetElementsTotal(This, State.Controls.Scroll_Settings, CategorySettingIds.count);
			}

			// Lock section titles
			CMGame_Scroll::UnlockAllElements(State.Controls.Scroll_Settings);
			declare Integer[] KeysToLock;
			foreach (Key => SettingId in CategorySettingIds) {
				declare ComponentSettings_K_Setting Setting = State.Settings.get(SettingId, ComponentSettings_C_Setting_Null);
				if (
					Setting.Type == ComponentSettings_C_SettingType_Section ||
					!ComponentSettings_Private_SettingHasStatus(State, Setting, [ComponentSettings_C_SettingStatus_Enabled, ComponentSettings_C_SettingStatus_MissingPermission])
				) {
					KeysToLock.add(Key);
				}
			}
			CMGame_Scroll::LockElements(This, State.Controls.Scroll_Settings, KeysToLock);

			// Try to restore previously focused setting in this category
			if (_ScrollToAndFocusElement) {
				if (
					State.LastFocusedSettingKey.existskey(State.DisplayedCategory) &&
					State.LastFocusedSettingKey[State.DisplayedCategory] != ComponentSettings_C_SettingKey_Null
				) {
					CMGame_Scroll::ScrollToElement(This, State.Controls.Scroll_Settings, State.LastFocusedSettingKey[State.DisplayedCategory], True);
				} else {
					for (Key, 0, CategorySettingIds.count - 1) {
						if (!KeysToLock.exists(Key)) {
							CMGame_Scroll::ScrollToElement(This, State.Controls.Scroll_Settings, Key, True);
							break;
						}
					}
				}
			}
		} else {
			State.DisplayedCategory = ComponentSettings_C_SettingCategory_Null;
			CMGame_Scroll::SetElementsTotal(This, State.Controls.Scroll_Settings, 0);
		}

		// Lock and focus another control if the scroll is empty
		declare Integer ElementsTotal = CMGame_Scroll::GetElementsTotal(State.Controls.Scroll_Settings);
		ComponentNavigation_ComponentNavigation::Lock(State.Controls.Scroll_Settings, ElementsTotal <= 0);
		if (ComponentNavigation_ComponentNavigation::IsLocked(State.Controls.Scroll_Settings)) {
			declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main");
			if (FocusedControl == State.Controls.Scroll_Settings) {
				if (State.LastBottomButtonFocused != Null && !ComponentNavigation_ComponentNavigation::IsLocked(State.LastBottomButtonFocused)) {
					State = ComponentSettings_Private_Focus(State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main"), State.LastBottomButtonFocused);
				} else if (!ComponentNavigation_ComponentNavigation::IsLocked(State.Controls.Button_Back)) {
					State = ComponentSettings_Private_Focus(State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main"), State.Controls.Button_Back);
				}
			}
		}
	}

	if (State.DisplayedCategory != CurrentTab) {
		Trackmania_NavigationTabs::UpdateCurrentTab(This, State.Controls.NavigationTabs_Categories, State.DisplayedCategory, False);
	}

	// Text to speech context
	// The previously focused tab ID is used to avoid reading the entire TTS context when a setting is updated
	if (State.PreviouslyFocusedTabId != CurrentTab) {
		State.PreviouslyFocusedTabId = CurrentTab;
		ParentApp.TTS_Context_Change(ComponentSettings_G_TTSContextIdent_Tabs, Trackmania_NavigationTabs::GetCurrentTabLabel(State.Controls.NavigationTabs_Categories));
		ParentApp.TTS_Context_Read(ComponentSettings_C_TTSContextLevel_Page);
	}

	return State;
}
ComponentSettings_K_State ComponentSettings_Private_SetDisplayedCategory(ComponentSettings_K_State _State, Integer _Category, Boolean _CheckDirtySettingsBefore, Boolean _ResetLastFocusedSettingKey) {
	return ComponentSettings_Private_SetDisplayedCategory(_State, _Category, _CheckDirtySettingsBefore, _ResetLastFocusedSettingKey, True);
}
ComponentSettings_K_State ComponentSettings_Private_SetDisplayedCategory(ComponentSettings_K_State _State, Integer _Category, Boolean _CheckDirtySettingsBefore) {
	return ComponentSettings_Private_SetDisplayedCategory(_State, _Category, _CheckDirtySettingsBefore, False);
}
ComponentSettings_K_State ComponentSettings_Private_SetDisplayedCategory(ComponentSettings_K_State _State, Integer _Category) {
	return ComponentSettings_Private_SetDisplayedCategory(_State, _Category, False);
}
ComponentSettings_K_State ComponentSettings_Private_DisplayCategory(ComponentSettings_K_State _State) {
	return ComponentSettings_Private_SetDisplayedCategory(_State, _State.DisplayedCategory);
}

// Update the user info displayed in the player card
Void ComponentSettings_Private_DisplayUserInfo(ComponentSettings_K_State _State, CUser _User) {
	if (_User == Null || _State.IsPlayerCardForcedHide) {
		_State.Controls.Frame_PlayerCard.Visible = False;
	} else {
		if (_User.CountryFlagUrl == "") {
			_State.Controls.Quad_PlayerFlag.ImageUrl = "file://ZoneFlags/Path/World";
		} else {
			_State.Controls.Quad_PlayerFlag.ImageUrl = _User.CountryFlagUrl;
		}
		CMGame_PlayerName::SetUser(This, _State.Controls.PlayerName_Name, _User, True);
		declare Text[] Zones = ComponentSettings_TL::Split("|", _User.ZonePath);
		if (Zones.count > 0) {
			_State.Controls.Label_PlayerZone.Value = ComponentSettings_C_Zone_Translations.get(Zones[Zones.count-1], ComponentSettings_TL::GetTranslatedText(Zones[Zones.count-1]));
			_State.Controls.Label_PlayerZone.Visible = True;
			ComponentSettings_Tools::FitLabelValue(_State.Controls.Label_PlayerZone, 1., 0.5, 0.1);
		} else {
			_State.Controls.Label_PlayerZone.Visible = False;
		}
		_State.Controls.Frame_PlayerCard.Visible = True;
	}
}

// Select the vehicle for which we edit the analog settings
ComponentSettings_K_State ComponentSettings_Private_SetControlVehicleModel(ComponentSettings_K_State _State, Text _ModelName) {
	declare ComponentSettings_K_State State = _State;

	if (State.ControlVehicleModels.exists(_ModelName)) {
		State.ControlVehicleModel = _ModelName;
	}

	return State;
}

Text[] ComponentSettings_Private_SplitBinds(Text _Binds) {
	declare Text[] Binds;
	declare Text[] RawBinds = ComponentSettings_TL::Split(",", _Binds);
	foreach (Bind in RawBinds) {
		declare Text CleanBind = ComponentSettings_TL::Trim(Bind);
		if (CleanBind == "") {
			// The `,` is a valid key bind, but it's also the separator between the binds
			// If we get an empty bind, it means that at the origin if was a bind on `,`
			Binds.add(",");
		} else {
			Binds.add(CleanBind);
		}
	}
	return Binds;
}

// Select the controller for which we edit the bindings
ComponentSettings_K_State ComponentSettings_Private_SetControlControllerId(ComponentSettings_K_State _State, Integer _ControllerId) {
	declare ComponentSettings_K_State State = _State;

	State.Bindings = [];

	// Find controller
	declare CInputPad ActivePad;
	foreach (Pad in Input.Pads) {
		if (Pad.ControllerId == _ControllerId) {
			ActivePad <=> Pad;
			break;
		}
	}

	// Load bindings
	if (ActivePad != Null) {
		State.ControlControllerId = ActivePad.ControllerId;

		ParentApp.ManiaPlanet.InputBindings_UpdateList(CManiaPlanet::EInputsListFilter::All, ActivePad);
		declare Boolean CanGetPadButtonIcon = ComponentSettings_ButtonIcon::CanGetPadButtonIcon(ActivePad);

		foreach (Key => Binding in ParentApp.ManiaPlanet.InputBindings_Bindings) {
			declare Text[] Binds = ComponentSettings_Private_SplitBinds(Binding);
			declare Text[] ButtonIcons;
			if (CanGetPadButtonIcon) {
				declare Text[] RawBinds = ComponentSettings_Private_SplitBinds(ParentApp.ManiaPlanet.InputBindings_BindingsRaw[Key]); //< `InputBindings_Bindings` and `InputBindings_BindingsRaw` are always synchronized by the C++, no risk of out of bound access
				foreach (Bind in RawBinds) {
					ButtonIcons.add(ComponentSettings_ButtonIcon::GetPadButtonIcon(System, ActivePad, Bind));
				}
			}
			State.Bindings.add(ComponentSettings_K_Binding {
				ActionIndex = Key,
				ActionName = ParentApp.ManiaPlanet.InputBindings_ActionNames[Key], //< `InputBindings_Bindings` and `InputBindings_ActionNames` are always synchronized by the C++, no risk of out of bound access
				Binds = Binds,
				ButtonIcons = ButtonIcons
			});
		}
	}

	return State;
}

// Validate trigram
Text ComponentSettings_Private_ValidateTrigram(Text _Trigram) {
	return ComponentSettings_TL::ToUpperCase(ComponentSettings_TL::SubText(ComponentSettings_TL::Trim(_Trigram), 0, 3));
}

// Validate window width
Integer ComponentSettings_Private_ValidateWindowResolutionX(Integer _ResolutionX) {
	return ComponentSettings_ML::Max(256, _ResolutionX);
}

// Validate window height
Integer ComponentSettings_Private_ValidateWindowResolutionY(Integer _ResolutionY) {
	return ComponentSettings_ML::Max(128, _ResolutionY);
}

// Validate automatic resolution min FPS
Integer ComponentSettings_Private_ValidateAutomaticMinFPS(Integer _MinFPS) {
	return ComponentSettings_ML::Max(0, _MinFPS);
}

// Validate FPS limit
Integer ComponentSettings_Private_ValidateLimitFPS(Integer _LimitFPS) {
	return ComponentSettings_ML::Max(0, _LimitFPS);
}

// Validate network speed
Integer ComponentSettings_Private_ValidateNetworkSpeed(Integer _Speed) {
	return ComponentSettings_ML::Max(0, _Speed);
}

// Validated audio volume
Real ComponentSettings_Private_ValidateAudioVolume(Real _Volume) {
	return ComponentSettings_ML::Clamp(_Volume, -40., 0.);
}

// Validate the value the user entered in the text field
Text ComponentSettings_Private_ValidateTextFieldValue(CMlFrame _TextField_Value, Integer _SettingId) {
	declare Text Value = CMGame_TextField::GetValue(_TextField_Value);
	declare Text ValidatedValue = Value;

	switch (_SettingId) {
		case ComponentSettings_C_SettingId_ProfileTrigram: {
			ValidatedValue = ComponentSettings_Private_ValidateTrigram(ValidatedValue);
		}
		case ComponentSettings_C_SettingId_ProfileActivateKey: {
			ValidatedValue = ComponentSettings_TL::ToUpperCase(ValidatedValue);
		}
		case ComponentSettings_C_SettingId_VideoWindowResolutionX: {
			ValidatedValue = ""^ComponentSettings_Private_ValidateWindowResolutionX(ComponentSettings_TL::ToInteger(ValidatedValue));
		}
		case ComponentSettings_C_SettingId_VideoWindowResolutionY: {
			ValidatedValue = ""^ComponentSettings_Private_ValidateWindowResolutionY(ComponentSettings_TL::ToInteger(ValidatedValue));
		}
		case ComponentSettings_C_SettingId_VideoAutomaticMinFPS: {
			ValidatedValue = ""^ComponentSettings_Private_ValidateAutomaticMinFPS(ComponentSettings_TL::ToInteger(ValidatedValue));
		}
		case ComponentSettings_C_SettingId_VideoLimitFPS: {
			ValidatedValue = ""^ComponentSettings_Private_ValidateLimitFPS(ComponentSettings_TL::ToInteger(ValidatedValue));
		}
		case ComponentSettings_C_SettingId_SystemNetworkSpeedDownload: {
			ValidatedValue = ""^ComponentSettings_Private_ValidateNetworkSpeed(ComponentSettings_TL::ToInteger(ValidatedValue));
		}
		case ComponentSettings_C_SettingId_SystemNetworkSpeedUpload: {
			ValidatedValue = ""^ComponentSettings_Private_ValidateNetworkSpeed(ComponentSettings_TL::ToInteger(ValidatedValue));
		}
	}

	return ValidatedValue;
}

// Check if any setting is dirty and update the global flag accordingly
ComponentSettings_K_State ComponentSettings_Private_UpdateSettingsAreDirty(ComponentSettings_K_State _State) {
	declare ComponentSettings_K_State State = _State;

	declare Boolean SettingsWereDirty = State.SettingsAreDirty;
	State.SettingsAreDirty = False;
	State.GameNeedRestart = False;

	foreach (Setting in State.Settings) {
		if (Setting.IsDirty && !Setting.IgnoreDirty) {
			State.SettingsAreDirty = True;
			if (Setting.NeedRestart) {
				State.GameNeedRestart = True;
			}
		}
		// Once we found a dirty setting that need a restart we can stop the loop
		if (State.SettingsAreDirty && State.GameNeedRestart) break;
	}

	// If there are no dirty settings that require a game restart
	// Check if any applied settings are still pending a game restart
	if (!State.GameNeedRestart) {
		State.GameNeedRestart = (
			ParentApp.ManiaPlanet.DisplaySettings != Null && (
				ParentApp.ManiaPlanet.DisplaySettings.Device_NextStart != ParentApp.ManiaPlanet.DisplaySettings.Device_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.Customize_NextStart != ParentApp.ManiaPlanet.DisplaySettings.Customize_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.Preset_NextStart != ParentApp.ManiaPlanet.DisplaySettings.Preset_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.ShaderQuality_NextStart != ParentApp.ManiaPlanet.DisplaySettings.ShaderQuality_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.Shadows_NextStart != ParentApp.ManiaPlanet.DisplaySettings.Shadows_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.TexturesQuality_NextStart != ParentApp.ManiaPlanet.DisplaySettings.TexturesQuality_Current ||
				ParentApp.ManiaPlanet.DisplaySettings.AgpUseFactor_NextStart != ParentApp.ManiaPlanet.DisplaySettings.AgpUseFactor_Current
			)
		);
	}

	if (State.SettingsAreDirty != SettingsWereDirty) {
		AnimMgr.Flush(State.Controls.Quad_PendingChanges);
		if (State.SettingsAreDirty) {
			State.Controls.Quad_PendingChanges.Opacity = 0.;
			State.Controls.Quad_PendingChanges.RelativeScale = 1.5;
			AnimMgr.Add(State.Controls.Quad_PendingChanges, "<a opacity=\"1\" scale=\"1\" hidden=\"0\" />", 200, CAnimManager::EAnimManagerEasing::QuadOut);
		} else {
			AnimMgr.Add(State.Controls.Quad_PendingChanges, "<a opacity=\"0\" scale=\"1\" hidden=\"1\" />", 125, CAnimManager::EAnimManagerEasing::Linear);
		}
	}
	State.Controls.Label_RestartRequired.Visible = State.GameNeedRestart;

	return State;
}

// Update the list of settings to display
ComponentSettings_K_State ComponentSettings_Private_UpdateSettingsList(ComponentSettings_K_State _State) {
	declare ComponentSettings_K_State State = _State;

	State.ScrollSettingIds = [];

	declare Text[Integer] Categories;
	declare Integer[Integer] SettingsNbInSection;
	declare Int2[Integer] CurrentSection;
	foreach (ReadOnlySetting in State.Settings) {
		if (ComponentSettings_Private_GetSettingStatus(State, ReadOnlySetting) == ComponentSettings_C_SettingStatus_Hidden) continue;

		declare ComponentSettings_K_Setting Setting = ReadOnlySetting;

		// Find all categories to display in the `NavigationTabs`
		if (
			!Categories.existskey(Setting.Category) &&
			ComponentSettings_C_SettingCategories.existskey(Setting.Category)
		) {
			Categories[Setting.Category] = ComponentSettings_C_SettingCategories[Setting.Category];
		}

		// Find and categorize available settings
		if (State.ScrollSettingIds.existskey(Setting.Category)) {
			State.ScrollSettingIds[Setting.Category].add(Setting.Id);
		} else {
			State.ScrollSettingIds[Setting.Category] = [Setting.Id];
		}

		// Find the section in which the setting belong
		if (Setting.Type == ComponentSettings_C_SettingType_Section) {
			CurrentSection[Setting.Category] = <Setting.Id, State.ScrollSettingIds[Setting.Category].count - 1>;
			SettingsNbInSection[Setting.Id] = 0;
		}
		declare Int2 SectionIdKey = CurrentSection.get(Setting.Category, <ComponentSettings_C_SettingId_NullId, ComponentSettings_C_SettingKey_Null>);
		Setting.SectionId = SectionIdKey.X;
		Setting.SectionKey = SectionIdKey.Y;
		SettingsNbInSection[SectionIdKey.X] += 1;

		State.Settings[Setting.Id] = Setting;
	}

	// Remove empty sections
	foreach (SectionSettingId => SettingsNb in SettingsNbInSection) {
		if (SettingsNb <= 1 && SectionSettingId != ComponentSettings_C_SettingId_ControlSectionBindings) {
			foreach (CategoryId => SettingIds in State.ScrollSettingIds) {
				State.ScrollSettingIds[CategoryId].remove(SectionSettingId);
			}
		}
	}

	// Disable category if it is empty
	declare Integer[][Integer] TmpScrollSettingIds = State.ScrollSettingIds;
	foreach (CategoryId => SettingIds in TmpScrollSettingIds) {
		if (SettingIds.count <= 0) {
			Categories.removekey(CategoryId);
			State.ScrollSettingIds.removekey(CategoryId);
		}
	}

	// Find a default category
	State.DefaultCategory = ComponentSettings_C_SettingCategory_Null;
	foreach (CategoryId => CategoryTitle in Categories) {
		State.DefaultCategory = CategoryId;
		break;
	}

	// Display all settings categories in the `NavigationTabs`
	Trackmania_NavigationTabs::SetTabs(This, State.Controls.NavigationTabs_Categories, Categories, False);
	Trackmania_NavigationTabs::RedrawNavigationTabs(This, State.Controls.NavigationTabs_Categories, False);

	if (State.DisplayedCategory == ComponentSettings_C_SettingCategory_Null || !Categories.existskey(State.DisplayedCategory)) {
		State = ComponentSettings_Private_SetDisplayedCategory(State, State.DefaultCategory);
	} else {
		State = ComponentSettings_Private_DisplayCategory(State);
	}

	return State;
}

// Show or hide the settings that depends on the video customize setting to be displayed
ComponentSettings_K_State ComponentSettings_Private_SetVisibilityOfSettingsThatHaveDisplaySettingsPreset(ComponentSettings_K_State _State, Boolean _Visible) {
	declare ComponentSettings_K_State State = _State;

	State.ShowSettingsThatHaveDisplaySettingsPreset = _Visible;
	// When disabling the video settings customization, scroll to the bottom of the scroll
	// beforehand to avoid an unpleasant movement in the scroll
	if (!State.ShowSettingsThatHaveDisplaySettingsPreset) {
		CMGame_Scroll::ScrollToFooter(This, State.Controls.Scroll_Settings);
	}
	State = ComponentSettings_Private_UpdateSettingsList(State);

	return State;
}

// Update the values of the settings in the scroll to reflect the values of the selected preset
ComponentSettings_K_State ComponentSettings_Private_UpdateDisplaySettingsPresetInScroll(ComponentSettings_K_State _State, CDisplaySettings::EPreset _Preset) {
	if (!_State.DisplaySettingsPresets.existskey(_Preset)) return _State;

	declare ComponentSettings_K_State State = _State;
	declare ComponentSettings_K_DisplaySettingsPreset DisplaySettingsPreset = State.DisplaySettingsPresets[_Preset];

	if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoShaderQuality)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_VideoShaderQuality];
		if (UpdatedSetting.List.ValuesShaderQuality.exists(DisplaySettingsPreset.ShaderQuality_NextStart)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesShaderQuality.keyof(DisplaySettingsPreset.ShaderQuality_NextStart);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[ComponentSettings_C_SettingId_VideoShaderQuality] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoTexturesQuality)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_VideoTexturesQuality];
		if (UpdatedSetting.List.ValuesInteger.exists(DisplaySettingsPreset.TexturesQuality_NextStart)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesInteger.keyof(DisplaySettingsPreset.TexturesQuality_NextStart);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[ComponentSettings_C_SettingId_VideoTexturesQuality] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoShadows)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_VideoShadows];
		if (UpdatedSetting.List.ValuesShadows.exists(DisplaySettingsPreset.Shadows_NextStart)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesShadows.keyof(DisplaySettingsPreset.Shadows_NextStart);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[ComponentSettings_C_SettingId_VideoShadows] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoVehicleReflect)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_VideoVehicleReflect];
		if (UpdatedSetting.List.ValuesVehicleReflect.exists(DisplaySettingsPreset.VehicleReflect)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesVehicleReflect.keyof(DisplaySettingsPreset.VehicleReflect);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[ComponentSettings_C_SettingId_VideoVehicleReflect] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoWaterReflect)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_VideoWaterReflect];
		if (UpdatedSetting.List.ValuesWaterReflect.exists(DisplaySettingsPreset.WaterReflect)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesWaterReflect.keyof(DisplaySettingsPreset.WaterReflect);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[ComponentSettings_C_SettingId_VideoWaterReflect] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoEverywhereReflect)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_VideoEverywhereReflect];
		UpdatedSetting.New.ValueBoolean = (DisplaySettingsPreset.EverywhereReflect == CDisplaySettings::EEverywhereReflect::Enabled);
		UpdatedSetting.IsDirty = UpdatedSetting.New.ValueBoolean != UpdatedSetting.Old.ValueBoolean;
		State.Settings[ComponentSettings_C_SettingId_VideoEverywhereReflect] = UpdatedSetting;
	}

	if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoBloomHDR)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_VideoBloomHDR];
		if (UpdatedSetting.List.ValuesFxBloomHdr.exists(DisplaySettingsPreset.FxBloomHdr)) {
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesFxBloomHdr.keyof(DisplaySettingsPreset.FxBloomHdr);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[ComponentSettings_C_SettingId_VideoBloomHDR] = UpdatedSetting;
		}
	}

	if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoMotionBlur)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_VideoMotionBlur];
		UpdatedSetting.New.ValueBoolean = (DisplaySettingsPreset.FxMotionBlur == CDisplaySettings::EFxMotionBlur::Enabled);
		UpdatedSetting.IsDirty = UpdatedSetting.New.ValueBoolean != UpdatedSetting.Old.ValueBoolean;
		State.Settings[ComponentSettings_C_SettingId_VideoMotionBlur] = UpdatedSetting;
	}

	if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoSlowMotionBlur)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_VideoSlowMotionBlur];
		UpdatedSetting.New.ValueBoolean = (DisplaySettingsPreset.FxBlur == CDisplaySettings::EFxBlur::Enabled);
		UpdatedSetting.IsDirty = UpdatedSetting.New.ValueBoolean != UpdatedSetting.Old.ValueBoolean;
		State.Settings[ComponentSettings_C_SettingId_VideoSlowMotionBlur] = UpdatedSetting;
	}

	State = ComponentSettings_Private_UpdateSettingsAreDirty(State);

	// Update the display of the settings in the scroll to reflect the new settings values
	declare CMlFrame[Integer] ElementsVisible = CMGame_Scroll::GetElementsVisible(State.Controls.Scroll_Settings);
	foreach (Key => Frame_Element in ElementsVisible) {
		ComponentSettings_Private_DisplaySettingLine(State, Key, Frame_Element);
	}

	return State;
}

// Update the value of a setting in the video settings custom preset
ComponentSettings_K_State ComponentSettings_Private_UpdateDisplaySettingsPresetCustom(ComponentSettings_K_State _State, ComponentSettings_K_Setting _Setting) {
	if (
		!_Setting.HasDisplaySettingsPreset ||
		!_State.DisplaySettingsPresets.existskey(CDisplaySettings::EPreset::None)
	) return _State;

	declare ComponentSettings_K_State State = _State;

	switch (_Setting.Id) {
		case ComponentSettings_C_SettingId_VideoShaderQuality: {
			if (_Setting.List.ValuesShaderQuality.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].ShaderQuality_NextStart = _Setting.List.ValuesShaderQuality[_Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoTexturesQuality: {
			if (_Setting.List.ValuesInteger.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].TexturesQuality_NextStart = _Setting.List.ValuesInteger[_Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoShadows: {
			if (_Setting.List.ValuesShadows.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].Shadows_NextStart = _Setting.List.ValuesShadows[_Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoVehicleReflect: {
			if (_Setting.List.ValuesVehicleReflect.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].VehicleReflect = _Setting.List.ValuesVehicleReflect[_Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoWaterReflect: {
			if (_Setting.List.ValuesWaterReflect.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].WaterReflect = _Setting.List.ValuesWaterReflect[_Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoEverywhereReflect: {
			if (_Setting.New.ValueBoolean) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].EverywhereReflect = CDisplaySettings::EEverywhereReflect::Enabled;
			} else {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].EverywhereReflect = CDisplaySettings::EEverywhereReflect::None;
			}
		}
		case ComponentSettings_C_SettingId_VideoBloomHDR: {
			if (_Setting.List.ValuesFxBloomHdr.existskey(_Setting.New.ValueInteger)) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].FxBloomHdr = _Setting.List.ValuesFxBloomHdr[_Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoMotionBlur: {
			if (_Setting.New.ValueBoolean) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].FxMotionBlur = CDisplaySettings::EFxMotionBlur::Enabled;
			} else {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].FxMotionBlur = CDisplaySettings::EFxMotionBlur::None;
			}
		}
		case ComponentSettings_C_SettingId_VideoSlowMotionBlur: {
			if (_Setting.New.ValueBoolean) {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].FxBlur = CDisplaySettings::EFxBlur::Enabled;
			} else {
				State.DisplaySettingsPresets[CDisplaySettings::EPreset::None].FxBlur = CDisplaySettings::EFxBlur::None;
			}
		}
	}

	return State;
}

// Select the video settings custom preset in the list of available preset
ComponentSettings_K_State ComponentSettings_Private_SelectDisplaySettingsPresetCustom(ComponentSettings_K_State _State) {
	declare ComponentSettings_K_State State = _State;

	if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoPreset)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_VideoPreset];

		// Proceed only if the custom preset is not already selected
		if (
			UpdatedSetting.List.ValuesPreset.existskey(UpdatedSetting.New.ValueInteger) &&
			UpdatedSetting.List.ValuesPreset[UpdatedSetting.New.ValueInteger] != CDisplaySettings::EPreset::None &&
			UpdatedSetting.List.ValuesPreset.exists(CDisplaySettings::EPreset::None)
		) {
			// Select the custom preset
			UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesPreset.keyof(CDisplaySettings::EPreset::None);
			UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			State.Settings[ComponentSettings_C_SettingId_VideoPreset] = UpdatedSetting;

			// Update the display of the preset setting in the scroll
			if (
				State.DisplayedCategory == UpdatedSetting.Category &&
				State.ScrollSettingIds.existskey(State.DisplayedCategory) &&
				State.ScrollSettingIds[State.DisplayedCategory].exists(ComponentSettings_C_SettingId_VideoPreset)
			) {
				declare Integer SettingKey = State.ScrollSettingIds[State.DisplayedCategory].keyof(ComponentSettings_C_SettingId_VideoPreset);
				declare CMlFrame[Integer] ElementsVisible = CMGame_Scroll::GetElementsVisible(State.Controls.Scroll_Settings);
				if (ElementsVisible.existskey(SettingKey)) {
					ComponentSettings_Private_DisplaySettingLine(State, SettingKey, ElementsVisible[SettingKey]);
				}
			}

			// When editing any preset other than the custom preset
			// We must update the value of all settings in the custom preset
			// eg: the user select the "very fast" preset and edit one setting
			// then the edited setting and all the other settings in the preset
			// must be used as the new custom preset
			foreach (Setting in State.Settings) {
				State = ComponentSettings_Private_UpdateDisplaySettingsPresetCustom(State, Setting);
			}
		}
	}

	return State;
}

// Show or hide the settings that need the track editor quick start to be displayed
ComponentSettings_K_State ComponentSettings_Private_SetVisibilityOfSettingsThatNeedTrackEditorQuickStart(ComponentSettings_K_State _State, Boolean _Visible) {
	declare ComponentSettings_K_State State = _State;

	State.TrackEditorQuickStartEnabled = _Visible;
	State = ComponentSettings_Private_DisplayCategory(State);

	return State;
}

// Update the values of the map editor difficulty setting in the scroll to reflect the values of the selected map editor controller
ComponentSettings_K_State ComponentSettings_Private_UpdateDisplaySettingsMapEditorDifficultyInScroll(ComponentSettings_K_State _State, Boolean _IsController) {
	declare ComponentSettings_K_State State = _State;

	if (State.Settings.existskey(ComponentSettings_C_SettingId_SystemTrackEditorQuickStartDifficulty)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_SystemTrackEditorQuickStartDifficulty];
		declare Text[] OldLabels = UpdatedSetting.List.Labels;

		UpdatedSetting.List.Labels = [_("|MapEditorDifficulty|Simple"), _("|MapEditorDifficulty|Advanced")];
		UpdatedSetting.List.MapEditorDifficulty = [CUserV2Profile::EMapEditorDifficulty::Simple, CUserV2Profile::EMapEditorDifficulty::Advanced];
		if (_IsController || ComponentSettings_Platform::IsFromFirstParty(System)) {
			UpdatedSetting.List.Labels.add(_("|MapEditorDifficulty|Expert"));
			UpdatedSetting.List.MapEditorDifficulty.add(CUserV2Profile::EMapEditorDifficulty::Expert);
		}

		if (OldLabels.count != UpdatedSetting.List.Labels.count) {
			if (!UpdatedSetting.List.MapEditorDifficulty.existskey(UpdatedSetting.New.ValueInteger)) {
				UpdatedSetting.New.ValueInteger = UpdatedSetting.List.MapEditorDifficulty.count - 1;
				UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
			}
			State.Settings[ComponentSettings_C_SettingId_SystemTrackEditorQuickStartDifficulty] = UpdatedSetting;
		}
	}

	State = ComponentSettings_Private_UpdateSettingsAreDirty(State);

	// Update the display of the settings in the scroll to reflect the new settings values
	declare CMlFrame[Integer] ElementsVisible = CMGame_Scroll::GetElementsVisible(State.Controls.Scroll_Settings);
	foreach (Key => Frame_Element in ElementsVisible) {
		ComponentSettings_Private_DisplaySettingLine(State, Key, Frame_Element);
	}

	return State;
}

// Update the values of the available map editor devices in the scroll to reflect the value of the selected map type.
ComponentSettings_K_State ComponentSettings_Private_UpdateDisplaySettingsMapEditorUseGamepadControllerInScroll(ComponentSettings_K_State _State, Integer _QuickstartMapType) {
	declare ComponentSettings_K_State State = _State;

	if (State.Settings.existskey(ComponentSettings_C_SettingId_SystemTrackEditorQuickStartUseGamepadController)) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[ComponentSettings_C_SettingId_SystemTrackEditorQuickStartUseGamepadController];
		declare Text[] OldLabels = UpdatedSetting.List.Labels;

		UpdatedSetting.List.Labels = [_("|MapEditorDevice|Mouse and keyboard")];
		UpdatedSetting.List.ValuesBoolean = [False];
		if (_QuickstartMapType == 1) { //< Gamepad editor available for Race maps only for now
			UpdatedSetting.List.Labels.add(_("|MapEditorDevice|Gamepad"));
			UpdatedSetting.List.ValuesBoolean.add(True);
		}

		if (OldLabels.count != UpdatedSetting.List.Labels.count) {
			if (!UpdatedSetting.List.ValuesBoolean.existskey(UpdatedSetting.New.ValueInteger)) {
				UpdatedSetting.New.ValueInteger = UpdatedSetting.List.ValuesBoolean.count - 1;
				UpdatedSetting.IsDirty = UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger;
				if (UpdatedSetting.List.ValuesBoolean.existskey(UpdatedSetting.New.ValueInteger)) {
					State = ComponentSettings_Private_UpdateDisplaySettingsMapEditorDifficultyInScroll(State, UpdatedSetting.List.ValuesBoolean[UpdatedSetting.New.ValueInteger]);
				}
			}
			State.Settings[ComponentSettings_C_SettingId_SystemTrackEditorQuickStartUseGamepadController] = UpdatedSetting;
		}
	}

	State = ComponentSettings_Private_UpdateSettingsAreDirty(State);

	// Update the display of the settings in the scroll to reflect the new settings values
	declare CMlFrame[Integer] ElementsVisible = CMGame_Scroll::GetElementsVisible(State.Controls.Scroll_Settings);
	foreach (Key => Frame_Element in ElementsVisible) {
		ComponentSettings_Private_DisplaySettingLine(State, Key, Frame_Element);
	}

	return State;
}

// Called when a setting value is updated
ComponentSettings_K_State ComponentSettings_Private_NotifySettingUpdate(ComponentSettings_K_State _State, Integer _SettingId) {
	declare ComponentSettings_K_State State = _State;

	switch (_SettingId) {
		case ComponentSettings_C_SettingId_ControlAnalogVehicleSelection: {
			if (State.Settings.existskey(ComponentSettings_C_SettingId_ControlAnalogVehicleSelection)) {
				declare ComponentSettings_K_Setting Setting = State.Settings[ComponentSettings_C_SettingId_ControlAnalogVehicleSelection];
				if (Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
					State = ComponentSettings_Private_SetControlVehicleModel(State, Setting.List.ValuesText[Setting.New.ValueInteger]);
					State = ComponentSettings_Private_DisplayCategory(State);
				}
			}
		}
		case ComponentSettings_C_SettingId_ControlDevice: {
			if (State.Settings.existskey(ComponentSettings_C_SettingId_ControlDevice)) {
				declare ComponentSettings_K_Setting Setting = State.Settings[ComponentSettings_C_SettingId_ControlDevice];
				if (Setting.List.ValuesInteger.existskey(Setting.New.ValueInteger)) {
					State = ComponentSettings_Private_SetControlControllerId(State, Setting.List.ValuesInteger[Setting.New.ValueInteger]);
					State = ComponentSettings_Private_DisplayCategory(State);
				}
			}
		}
		case ComponentSettings_C_SettingId_SystemNetworkSpeed: {
			State = ComponentSettings_Private_DisplayCategory(State);
		}
		case ComponentSettings_C_SettingId_VideoCanSelectPreset: {
			State = ComponentSettings_Private_SetVisibilityOfSettingsThatHaveDisplaySettingsPreset(
				State,
				State.Settings.get(ComponentSettings_C_SettingId_VideoCanSelectPreset, ComponentSettings_C_Setting_Null).New.ValueBoolean
			);
		}
		case ComponentSettings_C_SettingId_VideoPreset: {
			if (State.Settings.existskey(ComponentSettings_C_SettingId_VideoPreset)) {
				declare ComponentSettings_K_Setting Setting = State.Settings[ComponentSettings_C_SettingId_VideoPreset];
				if (Setting.List.ValuesPreset.existskey(Setting.New.ValueInteger)) {
					State = ComponentSettings_Private_UpdateDisplaySettingsPresetInScroll(State, Setting.List.ValuesPreset[Setting.New.ValueInteger]);
				}
			}
		}
		case ComponentSettings_C_SettingId_VideoOutputScale: {
			if (ParentApp.ManiaPlanet.DisplaySettings != Null && State.Settings.existskey(ComponentSettings_C_SettingId_VideoOutputScale)) {
				ParentApp.ManiaPlanet.DisplaySettings.ConsoleOutputScale = State.Settings[ComponentSettings_C_SettingId_VideoOutputScale].New.ValueReal;
				ParentApp.ManiaPlanet.DisplaySettings_Apply();
			}
		}
		case ComponentSettings_C_SettingId_SystemEnableTrackEditorQuickStart: {
			if (State.Settings.existskey(ComponentSettings_C_SettingId_SystemEnableTrackEditorQuickStart)) {
				State = ComponentSettings_Private_SetVisibilityOfSettingsThatNeedTrackEditorQuickStart(
					State,
					State.Settings.get(ComponentSettings_C_SettingId_SystemEnableTrackEditorQuickStart, ComponentSettings_C_Setting_Null).New.ValueBoolean
				);
			}
		}
		case ComponentSettings_C_SettingId_SystemTrackEditorQuickstartMapType: {
			if (State.Settings.existskey(ComponentSettings_C_SettingId_SystemTrackEditorQuickstartMapType)) {
				declare ComponentSettings_K_Setting Setting = State.Settings[ComponentSettings_C_SettingId_SystemTrackEditorQuickstartMapType];
				if (Setting.List.ValuesInteger.exists(Setting.New.ValueInteger)) {
					State = ComponentSettings_Private_UpdateDisplaySettingsMapEditorUseGamepadControllerInScroll(State, Setting.New.ValueInteger);
				}
			}
		}
		case ComponentSettings_C_SettingId_SystemTrackEditorQuickStartUseGamepadController: {
			if (State.Settings.existskey(ComponentSettings_C_SettingId_SystemTrackEditorQuickStartUseGamepadController)) {
				declare ComponentSettings_K_Setting Setting = State.Settings[ComponentSettings_C_SettingId_SystemTrackEditorQuickStartUseGamepadController];
				if (Setting.List.ValuesBoolean.existskey(Setting.New.ValueInteger)) {
					State = ComponentSettings_Private_UpdateDisplaySettingsMapEditorDifficultyInScroll(State, Setting.List.ValuesBoolean[Setting.New.ValueInteger]);
				}
			}
		}
		case ComponentSettings_C_SettingId_SystemNetworkCrossPlay: {
			State.IsCrossPlayActive = State.Settings.get(ComponentSettings_C_SettingId_SystemNetworkCrossPlay, ComponentSettings_C_Setting_Null).New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionMode: {
			if (ParentApp.ManiaPlanet.AudioSettings != Null && State.Settings.existskey(ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionMode)) {
				declare ComponentSettings_K_Setting Setting = State.Settings[ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionMode];
				if (Setting.List.ValuesVoiceDetectionMode.existskey(Setting.New.ValueInteger)) {
					State.VoiceChatVoiceDetectionManualSensitivity = Setting.New.ValueInteger == Setting.List.ValuesVoiceDetectionMode.keyof(NSystemConfig::EVoiceDetectionMode::Manual);
				}
			}
			State = ComponentSettings_Private_DisplayCategory(State);
		}
		default: {
			declare ComponentSettings_K_Setting Setting = State.Settings.get(_SettingId);
			if (
				Setting.HasDisplaySettingsPreset &&
				Setting.Id != ComponentSettings_C_SettingId_VideoPreset &&
				Setting.Id != ComponentSettings_C_SettingId_VideoMotionBlurIntensity
			) {
				State = ComponentSettings_Private_SelectDisplaySettingsPresetCustom(State);
				State = ComponentSettings_Private_UpdateDisplaySettingsPresetCustom(State, Setting);
			}
		}
	}

	return State;
}

// Update a setting value
ComponentSettings_K_State ComponentSettings_Private_UpdateSettingValue(ComponentSettings_K_State _State, Integer _SettingId, ComponentSettings_K_Values _NewValue) {
	declare ComponentSettings_K_State State = _State;

	if (
		_SettingId != ComponentSettings_C_SettingId_NullId &&
		State.Settings.existskey(_SettingId)
	) {
		declare ComponentSettings_K_Setting UpdatedSetting = State.Settings[_SettingId];
		declare Boolean WasDirty = UpdatedSetting.IsDirty;
		if (ComponentSettings_C_AnalogSettings.exists(_SettingId)) {
			foreach (ModelName => ValueReal in _NewValue.ValueControlAnalogReal) {
				UpdatedSetting.New.ValueControlAnalogReal[ModelName] = ValueReal;
				UpdatedSetting.IsDirty = (
					!UpdatedSetting.Old.ValueControlAnalogReal.existskey(ModelName) ||
					UpdatedSetting.Old.ValueControlAnalogReal[ModelName] != ValueReal
				);
			}
			foreach (ModelName => ValueBoolean in _NewValue.ValueControlAnalogBoolean) {
				UpdatedSetting.New.ValueControlAnalogBoolean[ModelName] = ValueBoolean;
				UpdatedSetting.IsDirty = (
					!UpdatedSetting.Old.ValueControlAnalogBoolean.existskey(ModelName) ||
					UpdatedSetting.Old.ValueControlAnalogBoolean[ModelName] != ValueBoolean
				);
			}
			State.Settings[_SettingId] = UpdatedSetting;
		} else {
			UpdatedSetting.New = _NewValue;
			UpdatedSetting.IsDirty = (
				UpdatedSetting.New.ValueText != UpdatedSetting.Old.ValueText ||
				UpdatedSetting.New.ValueReal != UpdatedSetting.Old.ValueReal ||
				UpdatedSetting.New.ValueBoolean != UpdatedSetting.Old.ValueBoolean ||
				UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger
			);
			State.Settings[_SettingId] = UpdatedSetting;
		}

		if (WasDirty != UpdatedSetting.IsDirty) {
			State = ComponentSettings_Private_UpdateSettingsAreDirty(State);
		}

		State = ComponentSettings_Private_NotifySettingUpdate(State, _SettingId);
	}

	return State;
}

// Start a check if the user needs some privileges to change the setting
ComponentSettings_K_State ComponentSettings_Private_CheckSettingPrivileges(
	ComponentSettings_K_State _State,
	ComponentSettings_K_Setting _Setting,
	CMlFrame _Frame_Setting,
	Integer _Direction,
	Boolean _PlaySound
) {
	if (_Setting.Privileges.count <= 0) return _State;

	declare ComponentSettings_K_State State = _State;
	State.PrivilegesCheck.Check = ComponentSettings_Privileges::Check_Destroy(State.PrivilegesCheck.Check);
	declare ComponentSettings_Privileges::K_PrivilegeCheck[] Checks;
	foreach (Privilege in _Setting.Privileges) {
		Checks.add(ComponentSettings_Privileges::Check_Create(
			PrivilegeMgr,
			ComponentSettings_MainUser::GetMainUserId(),
			Privilege
		));
	}
	State.PrivilegesCheck = ComponentSettings_K_PrivilegesCheck {
		Check = ComponentSettings_Privileges::Check_Group(Checks),
		SettingId = _Setting.Id,
		SettingType = _Setting.Type,
		Frame_Setting = _Frame_Setting,
		Direction = _Direction,
		PlaySound = _PlaySound
	};
	return State;
}
ComponentSettings_K_State ComponentSettings_Private_CheckSettingPrivileges(ComponentSettings_K_State _State, ComponentSettings_K_Setting _Setting, CMlFrame _Frame_Setting, Integer _Direction) {
	return ComponentSettings_Private_CheckSettingPrivileges(_State, _Setting, _Frame_Setting, _Direction, False);
}
ComponentSettings_K_State ComponentSettings_Private_CheckSettingPrivileges(ComponentSettings_K_State _State, ComponentSettings_K_Setting _Setting, CMlFrame _Frame_Setting) {
	return ComponentSettings_Private_CheckSettingPrivileges(_State, _Setting, _Frame_Setting, 0);
}
ComponentSettings_K_State ComponentSettings_Private_CheckSettingPrivileges(ComponentSettings_K_State _State, ComponentSettings_K_Setting _Setting) {
	return ComponentSettings_Private_CheckSettingPrivileges(_State, _Setting, Null);
}

// Update a slider setting value
ComponentSettings_K_State ComponentSettings_Private_UpdateSettingSliderValue(
	ComponentSettings_K_State _State,
	ComponentSettings_K_Setting _Setting,
	CMlFrame _Frame_SettingLine,
	Integer _Direction,
	Boolean _CheckPrivileges
) {
	if (
		_Setting.Id == ComponentSettings_C_SettingId_NullId ||
		_Setting.Type != ComponentSettings_C_SettingType_Slider ||
		!ComponentSettings_Private_SettingHasStatus(_State, _Setting, ComponentSettings_C_SettingStatus_Enabled)
	) {
		return _State;
	}

	declare ComponentSettings_K_State State = _State;

	if (_CheckPrivileges) {
		State = ComponentSettings_Private_CheckSettingPrivileges(State, _Setting, _Frame_SettingLine, _Direction);
		if (!ComponentSettings_Privileges::Check_IsComplete(State.PrivilegesCheck.Check)) {
			return State;
		}
	}

	declare CMlFrame Slider_Value <=> (_Frame_SettingLine.GetFirstChild("ComponentSettings_slider-value") as CMlFrame);
	if (_Setting.Slider.Steps > 1) {
		if (_Direction > 0) {
			CMGame_Slider_NextStep(Slider_Value);
		} else if (_Direction < 0) {
			CMGame_Slider_PreviousStep(Slider_Value);
		}
	} else {
		if (_Direction > 0) {
			CMGame_Slider_IncrementRatio(Slider_Value, 0.01);
		} else if (_Direction < 0) {
			CMGame_Slider_DecrementRatio(Slider_Value, 0.01);
		}
	}

	declare ComponentSettings_K_Values Values;
	switch (_Setting.Slider.Type) {
		case ComponentSettings_C_SliderType_Integer: {
			Values.ValueInteger = CMGame_Slider_GetValueInteger(Slider_Value);
		}
		default: { //< ComponentSettings_C_SliderType_Real, ComponentSettings_C_SliderType_Color
			Values.ValueReal = CMGame_Slider_GetValueReal(Slider_Value);
		}
	}
	if (ComponentSettings_C_AnalogSettings.exists(_Setting.Id)) {
		Values.ValueControlAnalogReal[State.ControlVehicleModel] = CMGame_Slider_GetValueReal(Slider_Value);
	}
	State = ComponentSettings_Private_UpdateSettingValue(
		State,
		_Setting.Id,
		Values
	);

	if (_Setting.Slider.DisplayTextField) {
		CMGame_TextField::SetValue(This,
			(_Frame_SettingLine.GetFirstChild("ComponentSettings_textfield-slider-value") as CMlFrame),
			ComponentSettings_Private_SliderValueToText(Slider_Value, _Setting.Slider.Type),
			False
		);
	}

	return State;
}
ComponentSettings_K_State ComponentSettings_Private_UpdateSettingSliderValue(ComponentSettings_K_State _State, ComponentSettings_K_Setting _Setting, CMlFrame _Frame_SettingLine, Integer _Direction) {
	return ComponentSettings_Private_UpdateSettingSliderValue(_State, _Setting, _Frame_SettingLine, _Direction, True);
}
ComponentSettings_K_State ComponentSettings_Private_UpdateSettingSliderValue(ComponentSettings_K_State _State, ComponentSettings_K_PrivilegesCheck _PrivilegesCheck) {
	return ComponentSettings_Private_UpdateSettingSliderValue(
		_State,
		_State.Settings.get(_PrivilegesCheck.SettingId, ComponentSettings_C_Setting_Null),
		_PrivilegesCheck.Frame_Setting,
		_PrivilegesCheck.Direction,
		False
	);
}

// Update a list setting value
ComponentSettings_K_State ComponentSettings_Private_UpdateSettingListValue(
	ComponentSettings_K_State _State,
	CMlFrame _Frame_TypeList,
	Integer _SettingId,
	Integer _Direction,
	Boolean _PlaySound,
	Boolean _CheckPrivileges
) {
	if (!_State.Settings.existskey(_SettingId)) return _State;
	declare ComponentSettings_K_Setting UpdatedSetting = _State.Settings[_SettingId];
	if (
		UpdatedSetting.Type != ComponentSettings_C_SettingType_List ||
		!ComponentSettings_Private_SettingHasStatus(_State, UpdatedSetting, ComponentSettings_C_SettingStatus_Enabled)
	) return _State;

	declare ComponentSettings_K_State State = _State;
	if (_CheckPrivileges) {
		State = ComponentSettings_Private_CheckSettingPrivileges(State, UpdatedSetting, _Frame_TypeList, _Direction, _PlaySound);
		if (!ComponentSettings_Privileges::Check_IsComplete(State.PrivilegesCheck.Check)) {
			return State;
		}
	}

	declare Integer PrevValueInteger = UpdatedSetting.New.ValueInteger;
	if (UpdatedSetting.List.CanLoop) {
		UpdatedSetting.New.ValueInteger += _Direction;

		if (UpdatedSetting.New.ValueInteger > ComponentSettings_ML::Max(0, UpdatedSetting.List.Labels.count - 1)) {
			UpdatedSetting.New.ValueInteger = 0;
		} else if (UpdatedSetting.New.ValueInteger < 0) {
			UpdatedSetting.New.ValueInteger = ComponentSettings_ML::Max(0, UpdatedSetting.List.Labels.count - 1);
		}
	} else {
		UpdatedSetting.New.ValueInteger = ComponentSettings_ML::Clamp(
			UpdatedSetting.New.ValueInteger + _Direction,
			0,
			ComponentSettings_ML::Max(0, UpdatedSetting.List.Labels.count - 1)
		);
	}

	if (_PlaySound && PrevValueInteger != UpdatedSetting.New.ValueInteger) {
		if (_Direction < 0) {
			CMGame_MenuSounds::PlaySelectSound(This, _Frame_TypeList.GetFirstChild("ComponentSettings_button-list-previous"));
		} else if (_Direction > 0) {
			CMGame_MenuSounds::PlaySelectSound(This, _Frame_TypeList.GetFirstChild("ComponentSettings_button-list-next"));
		}
	}

	declare Boolean WasDirty = UpdatedSetting.IsDirty;
	UpdatedSetting.IsDirty = (
		UpdatedSetting.New.ValueInteger != UpdatedSetting.Old.ValueInteger &&
		_SettingId != ComponentSettings_C_SettingId_ControlAnalogVehicleSelection && //< The vehicle selection cannot be dirty
		_SettingId != ComponentSettings_C_SettingId_ControlDevice //< The controller selection cannot be dirty
	);
	State.Settings[_SettingId] = UpdatedSetting;
	if (WasDirty != UpdatedSetting.IsDirty) {
		State = ComponentSettings_Private_UpdateSettingsAreDirty(State);
	}

	ComponentSettings_Private_DisplayList(State, _Frame_TypeList, UpdatedSetting, True);

	State = ComponentSettings_Private_NotifySettingUpdate(State, _SettingId);

	return State;
}
ComponentSettings_K_State ComponentSettings_Private_UpdateSettingListValue(ComponentSettings_K_State _State, CMlFrame _Frame_TypeList, Integer _SettingId, Integer _Direction, Boolean _PlaySound) {
	return ComponentSettings_Private_UpdateSettingListValue(_State, _Frame_TypeList, _SettingId, _Direction, _PlaySound, True);
}
ComponentSettings_K_State ComponentSettings_Private_UpdateSettingListValue(ComponentSettings_K_State _State, ComponentSettings_K_PrivilegesCheck _PrivilegesCheck) {
	return ComponentSettings_Private_UpdateSettingListValue(
		_State,
		_PrivilegesCheck.Frame_Setting,
		_PrivilegesCheck.SettingId,
		_PrivilegesCheck.Direction,
		_PrivilegesCheck.PlaySound,
		False
	);
}

// Get the pad currently selected in the control settings
CInputPad ComponentSettings_Private_GetSelectedPad(ComponentSettings_K_State _State) {
	foreach (Pad in Input.Pads) {
		if (Pad.ControllerId == _State.ControlControllerId) {
			return Pad;
		}
	}
	return Null;
}

ComponentSettings_K_Setting ComponentSettings_Private_ApplySetting(CManiaPlanet _ManiaPlanet, ComponentSettings_K_Setting _Setting) {
	if (!Trackmania_UserStore::HasGamePermissions(PrivilegeMgr, _Setting.Permissions)) {
		return _Setting;
	}

	declare ComponentSettings_K_Setting Setting = _Setting;

	switch (Setting.Id) {
		case ComponentSettings_C_SettingId_ProfileTrigram: {
			_ManiaPlanet.UserMgr.MainUserProfile.User_Trigram = ComponentSettings_Private_ValidateTrigram(Setting.New.ValueText);
		}
		case ComponentSettings_C_SettingId_ProfileTrailsColor: {
			_ManiaPlanet.UserMgr.MainUserProfile.User_LightTrailHue = Setting.New.ValueReal;
		}
		case ComponentSettings_C_SettingId_ProfileDisplaySplashscreen: {
			Trackmania_UserStore::SetUserHasSplashscreensEnabled(Setting.New.ValueBoolean);
			ComponentSettings_SplashscreenStore::SetSplashscreenImagePreloadState(Setting.New.ValueBoolean);
		}
		case ComponentSettings_C_SettingId_ProfileDisplayAds: {
			_ManiaPlanet.UserMgr.MainUserProfile.Adverts_Enabled = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_ProfileEnablePersonalizedAds: {
			_ManiaPlanet.UserMgr.MainUserProfile.Adverts_UsePersonnalData = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_VideoDevice: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.Device_NextStart = Setting.List.ValuesText[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoDisplayMode: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesDisplayMode.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.DisplayMode = Setting.List.ValuesDisplayMode[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoFullscreenResolution: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesInt2.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.FullscreenSize = Setting.List.ValuesInt2[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoWindowResolutionX: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.WindowSize.X = ComponentSettings_Private_ValidateWindowResolutionX(ComponentSettings_TL::ToInteger(Setting.New.ValueText));
			}
		}
		case ComponentSettings_C_SettingId_VideoWindowResolutionY: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.WindowSize.Y = ComponentSettings_Private_ValidateWindowResolutionY(ComponentSettings_TL::ToInteger(Setting.New.ValueText));
			}
		}
		case ComponentSettings_C_SettingId_VideoShowWindowBorder: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.WindowBorderless = !Setting.New.ValueBoolean;
			}
		}
		case ComponentSettings_C_SettingId_VideoAutomaticQuality: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.Automatic_Enabled = Setting.New.ValueBoolean;
			}
		}
		case ComponentSettings_C_SettingId_VideoAutomaticMinFPS: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.Automatic_MinFps = ComponentSettings_Private_ValidateAutomaticMinFPS(ComponentSettings_TL::ToInteger(Setting.New.ValueText));
			}
		}
		case ComponentSettings_C_SettingId_VideoLimitFPS: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.MaxFps = ComponentSettings_Private_ValidateLimitFPS(ComponentSettings_TL::ToInteger(Setting.New.ValueText));
			}
		}
		case ComponentSettings_C_SettingId_VideoDisplaySync: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesDisplaySync.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.DisplaySync = Setting.List.ValuesDisplaySync[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoGPUSync: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesGpuSync.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.GpuSync = Setting.List.ValuesGpuSync[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoForwardAA: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesForwardAA.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.Antialias_Forward = Setting.List.ValuesForwardAA[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoDeferredAA: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesDeferredAA.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.Antialias_Deferred = Setting.List.ValuesDeferredAA[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoCanSelectPreset: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.Customize_NextStart = Setting.New.ValueBoolean;
			}
		}
		case ComponentSettings_C_SettingId_VideoPreset: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesPreset.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.Preset_NextStart = Setting.List.ValuesPreset[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoShaderQuality: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesShaderQuality.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.ShaderQuality_NextStart = Setting.List.ValuesShaderQuality[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoTexturesQuality: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesInteger.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.TexturesQuality_NextStart = Setting.List.ValuesInteger[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoShadows: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesShadows.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.Shadows_NextStart = Setting.List.ValuesShadows[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoTextureFiltering: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesTextureFiltering.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.TextureFiltering = Setting.List.ValuesTextureFiltering[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoVehicleReflect: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesVehicleReflect.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.VehicleReflect = Setting.List.ValuesVehicleReflect[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoWaterReflect: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesWaterReflect.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.WaterReflect = Setting.List.ValuesWaterReflect[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoEverywhereReflect: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				if (Setting.New.ValueBoolean) {
					_ManiaPlanet.DisplaySettings.EverywhereReflect = CDisplaySettings::EEverywhereReflect::Enabled;
				} else {
					_ManiaPlanet.DisplaySettings.EverywhereReflect = CDisplaySettings::EEverywhereReflect::None;
				}
			}
		}
		case ComponentSettings_C_SettingId_VideoBloomHDR: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesFxBloomHdr.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.FxBloomHdr = Setting.List.ValuesFxBloomHdr[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoMotionBlur: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				if (Setting.New.ValueBoolean) {
					_ManiaPlanet.DisplaySettings.FxMotionBlur = CDisplaySettings::EFxMotionBlur::Enabled;
				} else {
					_ManiaPlanet.DisplaySettings.FxMotionBlur = CDisplaySettings::EFxMotionBlur::None;
				}
			}
		}
		case ComponentSettings_C_SettingId_VideoMotionBlurIntensity: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				_ManiaPlanet.DisplaySettings.FxMotionBlurIntens = Setting.New.ValueReal;
			}
		}
		case ComponentSettings_C_SettingId_VideoSlowMotionBlur: {
			if (_ManiaPlanet.DisplaySettings != Null) {
				if (Setting.New.ValueBoolean) {
					_ManiaPlanet.DisplaySettings.FxBlur = CDisplaySettings::EFxBlur::Enabled;
				} else {
					_ManiaPlanet.DisplaySettings.FxBlur = CDisplaySettings::EFxBlur::None;
				}
			}
		}
		case ComponentSettings_C_SettingId_VideoCarCustomizationLevel: {
			if (Setting.List.ValuesCustomPlayerModels.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Custom_PlayerModels = Setting.List.ValuesCustomPlayerModels[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoPerformanceQuality: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesConsoleResolution.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.ConsoleResolution = Setting.List.ValuesConsoleResolution[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_VideoOutputScale: {
			if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
				ParentApp.ManiaPlanet.DisplaySettings.ConsoleOutputScale = Setting.New.ValueReal;
			}
		}
		case ComponentSettings_C_SettingId_SoundEnable: {
			_ManiaPlanet.AudioSettings_EnableAudio = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SoundDevice: {
			if (_ManiaPlanet.AudioSettings != Null && Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.AudioSettings.Device_NextApply = Setting.List.ValuesText[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SoundMusicVolume: {
			_ManiaPlanet.AudioSettings_MasterMusicVolume = ComponentSettings_Private_ValidateAudioVolume(Setting.New.ValueReal);
		}
		case ComponentSettings_C_SettingId_SoundMasterVolume: {
			_ManiaPlanet.AudioSettings_MasterSoundVolume = ComponentSettings_Private_ValidateAudioVolume(Setting.New.ValueReal);
		}
		case ComponentSettings_C_SettingId_SoundEffectVolume: {
			_ManiaPlanet.AudioSettings_SoundVolume_Scene = ComponentSettings_Private_ValidateAudioVolume(Setting.New.ValueReal);
		}
		case ComponentSettings_C_SettingId_SoundUIVolume: {
			_ManiaPlanet.AudioSettings_SoundVolume_Ui = ComponentSettings_Private_ValidateAudioVolume(Setting.New.ValueReal);
		}
		case ComponentSettings_C_SettingId_SoundVoiceChatAndTTSVolume: {
			_ManiaPlanet.AudioSettings.VoiceChat_SpeakerVolume = ComponentSettings_Private_ValidateAudioVolume(Setting.New.ValueReal);
		}
		case ComponentSettings_C_SettingId_SoundMuteUnfocused: {
			_ManiaPlanet.AudioSettings_MuteWhenAppUnfocused = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SoundVoiceChat: {
			_ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_Enabled = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SoundVoiceChatDeviceIn: {
			if (_ManiaPlanet.AudioSettings != Null && Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.AudioSettings.VoiceChat_Device_In_NextApply = Setting.List.ValuesText[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SoundVoiceChatDeviceOut: {
			if (_ManiaPlanet.AudioSettings != Null && Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.AudioSettings.VoiceChat_Device_Out_NextApply = Setting.List.ValuesText[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionMode: {
			if (_ManiaPlanet.AudioSettings != Null && Setting.List.ValuesVoiceDetectionMode.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.AudioSettings.VoiceChat_VoiceDetection_Mode = Setting.List.ValuesVoiceDetectionMode[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionSensitivity: { // Slider can not be set to <1., 0.> so we use the inverse of the value
			_ManiaPlanet.AudioSettings.VoiceChat_VoiceDetection_Sensitivity = ComponentSettings_ML::Clamp(1. - Setting.New.ValueReal, 0., 1.);
		}
		case ComponentSettings_C_SettingId_SoundVoiceChatLoopback: {
			_ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_Loopback = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SoundSpeechToText: {
			_ManiaPlanet.UserMgr.MainUserProfile.STT_Enabled = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SoundTextToSpeech: {
			_ManiaPlanet.UserMgr.MainUserProfile.TTS_Enabled = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SendTextAsVoice: {
			_ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_SendTextAsVoice = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_ControlAnalogSensitivity: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogReal.existskey(Vehicle.ModelName)) {
					Vehicle.AnalogSensitivity = Setting.New.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
		}
		case ComponentSettings_C_SettingId_ControlAnalogDeadZone: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogReal.existskey(Vehicle.ModelName)) {
					Vehicle.AnalogDeadZone = Setting.New.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
		}
		case ComponentSettings_C_SettingId_ControlAnalogRumbleIntensity: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogReal.existskey(Vehicle.ModelName)) {
					Vehicle.RumbleIntensity = Setting.New.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
		}
		case ComponentSettings_C_SettingId_ControlTriggerHapticFeedbackEnabled: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogBoolean.existskey(Vehicle.ModelName)) {
					Vehicle.HapticFeedbackEnabled = Setting.New.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
		}
		case ComponentSettings_C_SettingId_ControlInvertSteer: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogBoolean.existskey(Vehicle.ModelName)) {
					Vehicle.InvertSteer = Setting.New.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
		}
		case ComponentSettings_C_SettingId_ControlAccelIsToggleMode: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogBoolean.existskey(Vehicle.ModelName)) {
					Vehicle.AccelIsToggleMode = Setting.New.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
		}
		case ComponentSettings_C_SettingId_ControlBrakeIsToggleMode: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogBoolean.existskey(Vehicle.ModelName)) {
					Vehicle.BrakeIsToggleMode = Setting.New.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
		}
		case ComponentSettings_C_SettingId_ControlAnalogCenterSpringIntensity: {
			foreach (Vehicle in _ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
				if (Setting.New.ValueControlAnalogReal.existskey(Vehicle.ModelName)) {
					Vehicle.CenterSpringIntensity = Setting.New.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
		}
		case ComponentSettings_C_SettingId_HUDMarkersType: {
			if (Setting.List.ValuesPlayerInfoDisplayType.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.Interface_PlayerInfoDisplayType = Setting.List.ValuesPlayerInfoDisplayType[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_HUDMarkersSize: {
			_ManiaPlanet.Interface_PlayerInfoDisplaySize = Setting.New.ValueInteger;
		}
		case ComponentSettings_C_SettingId_HUDPrioritizeAlternateCam1: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_UseAlternateCam1 = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_HUDPrioritizeAlternateCam2: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_UseAlternateCam2 = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_HUDPrioritizeAlternateCam3: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_UseOldInternalCam = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_HUDInternalCamCarVisibility: {
			if (Setting.List.ValuesPlayerVisibility.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Interface_InternalCamLocalPlayerVisibility = Setting.List.ValuesPlayerVisibility[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_HUDDefaultOpponentVisibility: {
			if (Setting.List.ValuesPlayerVisibility.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Online_DefaultOpponentVisibility = Setting.List.ValuesPlayerVisibility[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_HUDRoadsideSpectatorVisibility: {
			if (Setting.List.ValuesRoadsideSpectatorVisibility.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Online_RoadsideSpectatorVisibility = Setting.List.ValuesRoadsideSpectatorVisibility[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_HUDTrackRecordsVisibility: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_DisplayRecords = Setting.List.ValuesDisplayRecords.get(Setting.New.ValueInteger, CUserV2Profile::EDisplayRecords::Progressive);
		}
		case ComponentSettings_C_SettingId_HUDEnableSpecialBlockMessage: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_ShowSpecialsFeedback = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_HUDDisplayCheckpointCounter: {
			Trackmania_UserStore::SetUserDisplayCheckpointCounter(Setting.New.ValueBoolean);
		}
		case ComponentSettings_C_SettingId_HUDChatAllowHide: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_AllowChatHiding = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_HUDChatBackground: {
			if (Setting.List.ValuesChatBackground.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Interface_IngameChatBackground = Setting.List.ValuesChatBackground[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_HUDChatTextSize: {
			if (Setting.List.ValuesChatTextSize.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Interface_IngameChatTextSize = Setting.List.ValuesChatTextSize[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_HUDShowPerformance: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesShowPerformance.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.ShowPerformance = Setting.List.ValuesShowPerformance[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SystemLanguage: {
			if (Setting.List.ValuesText.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.Language_NextStart = Setting.List.ValuesText[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SystemColorblindMode: {
			_ManiaPlanet.UserMgr.MainUserProfile.Interface_ColorblindMode = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SystemAutoSkipStartScreens: {
			_ManiaPlanet.SystemSettings_SkipIntro = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SystemScreenshotExtension: {
			if (_ManiaPlanet.DisplaySettings != Null && Setting.List.ValuesScreenshotExt.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.DisplaySettings.ScreenshotExt = Setting.List.ValuesScreenshotExt[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SystemNetworkSpeed: {
			if (Setting.List.ValuesNetworkSpeed.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.NetworkSpeed = Setting.List.ValuesNetworkSpeed[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SystemNetworkSpeedDownload: {
			_ManiaPlanet.NetworkSpeed_CustomDownload = ComponentSettings_Private_ValidateNetworkSpeed(ComponentSettings_TL::ToInteger(Setting.New.ValueText));
		}
		case ComponentSettings_C_SettingId_SystemNetworkCrossPlay: {
			_ManiaPlanet.UserMgr.CrossPlay_V2_SetEnabled(ComponentSettings_MainUser::GetMainUserId(), Setting.New.ValueBoolean);
			if (Setting.New.ValueBoolean != Setting.Old.ValueBoolean) Trackmania_UserStore::SetUserHasSeenCrossPlayWarning(False);
		}
		case ComponentSettings_C_SettingId_SystemNetworkSpeedUpload: {
			_ManiaPlanet.NetworkSpeed_CustomUpload = ComponentSettings_Private_ValidateNetworkSpeed(ComponentSettings_TL::ToInteger(Setting.New.ValueText));
		}
		case ComponentSettings_C_SettingId_SystemDownloadSkin: {
			_ManiaPlanet.Network_EnableVehicleSkinLocators = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SystemDownloadMapMod: {
			_ManiaPlanet.Network_EnableMapModLocators = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SystemDownloadSign: {
			_ManiaPlanet.Network_EnableMapSkinLocators = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SystemEnableTrackEditorQuickStart: {
			_ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorUseQuickstart = Setting.New.ValueBoolean;
		}
		case ComponentSettings_C_SettingId_SystemTrackEditorQuickstartMapType: {
			if (Setting.List.ValuesInteger.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartMapType = Setting.List.ValuesInteger[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SystemTrackEditorQuickStartUseGamepadController: {
			if (Setting.List.ValuesBoolean.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartUseGamepad = Setting.List.ValuesBoolean[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SystemTrackEditorQuickStartDifficulty: {
			if (Setting.List.MapEditorDifficulty.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartDifficulty = Setting.List.MapEditorDifficulty[Setting.New.ValueInteger];
			}
		}
		case ComponentSettings_C_SettingId_SystemTrackEditorQuickStartMood: {
			if (Setting.List.ValuesMapEditorMood.existskey(Setting.New.ValueInteger)) {
				_ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartMood = Setting.List.ValuesMapEditorMood[Setting.New.ValueInteger];
			}
		}
	}

	Setting.Old = Setting.New;
	Setting.IsDirty = False;

	return Setting;
}

// Apply the new settings values
ComponentSettings_K_State ComponentSettings_Private_ApplySettings(ComponentSettings_K_State _State, Integer _SettingCategory) {
	declare ComponentSettings_K_State State = _State;
	declare Boolean IsSystemLanguageUpdated = State.Settings.get(ComponentSettings_C_SettingId_SystemLanguage, ComponentSettings_C_Setting_Null).IsDirty;

	declare Boolean SettingsApplied = False;
	if (ComponentSettings_C_DiscardSettingsOnTabChange) {
		declare Integer[] SettingIds = State.ScrollSettingIds.get(_SettingCategory, []);
		if (SettingIds.count > 0) {
			foreach (SettingId in SettingIds) {
				if (State.Settings.existskey(SettingId)) {
					State.Settings[SettingId] = ComponentSettings_Private_ApplySetting(ParentApp.ManiaPlanet, State.Settings[SettingId]);
				}
			}
			SettingsApplied = True;
		}
	} else {
		foreach (Setting in State.Settings) {
			State.Settings[Setting.Id] = ComponentSettings_Private_ApplySetting(ParentApp.ManiaPlanet, State.Settings[Setting.Id]);
		}
		SettingsApplied = True;
	}
	if (SettingsApplied) {
		if (State.SettingsAreDirty) {
			State = ComponentSettings_Private_DisplayAlertMessage(State, "Your changes have been applied");
		}
		State = ComponentSettings_Private_UpdateSettingsAreDirty(State);

		if (!ComponentSettings_C_DiscardSettingsOnTabChange || _SettingCategory == ComponentSettings_C_SettingCategory_Video || _SettingCategory == ComponentSettings_C_SettingCategory_System) {
			// `DisplaySettings` must be loaded before applying (`DisplaySettings != Null`)
			// Otherwise `DisplaySettings_Apply()` will trigger a runtime error "No settings to apply"
			if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
				ParentApp.ManiaPlanet.DisplaySettings_Apply();
				State.WindowSize = ParentApp.ManiaPlanet.DisplaySettings.WindowSize;
			}
		}
		if (!ComponentSettings_C_DiscardSettingsOnTabChange || _SettingCategory == ComponentSettings_C_SettingCategory_Sound) {
			// `AudioSettings` must be loaded before applying (`AudioSettings != Null`)
			// Otherwise `AudioSettings_Apply()` will trigger a runtime error "No settings to apply"
			if (ParentApp.ManiaPlanet.AudioSettings != Null) {
				ParentApp.ManiaPlanet.AudioSettings_Apply();
				State.MasterVolume = ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume;
				State.EffectVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene;
				State.UIVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui;
				State.MusicVolume = ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume;
			}
		}
		if (!ComponentSettings_C_DiscardSettingsOnTabChange || _SettingCategory == State.Settings.get(ComponentSettings_C_SettingId_SystemLanguage, ComponentSettings_C_Setting_Null).Category) {
			ParentApp.ManiaPlanet.Language_Apply();
		}

		if (IsSystemLanguageUpdated) { //< Redraw menu components only if system language has changed
			ComponentSettings_RequestRedraw::RequestComponentsRedraw();
			ParentApp.ManiaPlanet.Language_Apply();
		}

		if (State.DisplayedCategory == _SettingCategory) {
			State = ComponentSettings_Private_SetDisplayedCategory(State, State.DisplayedCategory, False, False, False);
		}
	}

	return State;
}

// Select a setting button
ComponentSettings_K_State ComponentSettings_Private_SelectSettingButton(ComponentSettings_K_State _State, Integer _SettingId, Boolean _CheckPrivileges) {
	declare ComponentSettings_K_State State = _State;
	declare Boolean PlaySound = True;

	if (_CheckPrivileges) {
		State = ComponentSettings_Private_CheckSettingPrivileges(State, State.Settings.get(_SettingId, ComponentSettings_C_Setting_Null));
		if (!ComponentSettings_Privileges::Check_IsComplete(State.PrivilegesCheck.Check)) {
			return State;
		}
	}

	switch (_SettingId) {
		case ComponentSettings_C_SettingId_ProfileCopyAccountId: {
			if (!ComponentSettings_Platform::IsSony(System)) {
				if (LocalUser != Null) {
					ParentApp.ManiaPlanet.ClipboardSet(LocalUser.WebServicesUserId);
				} else {
					ParentApp.ManiaPlanet.ClipboardSet(
						ComponentSettings_TL::GetTranslatedText(
							ComponentSettings_TL::Compose(
								//L16N [Settings] Display the user account ID. %1 will be replaced by the account ID. eg: "Account ID: 1234-ABCD-5678"
								_("Account ID: %1"),
								//L16N [Settings] Displayed when we cannot get the user account ID
								_("|AccountId|Unknown")
							)
						)
					);
				}
				State = ComponentSettings_Private_DisplayAlertMessage(State, "Your account ID has been copied to the clipboard");
			}
		}
		case ComponentSettings_C_SettingId_ProfileOpenPlayerPage: {
			ParentApp.ManiaPlanet.OpenLink(ComponentSettings_Config::Get().WebsitePlayersPageUrl, CManiaPlanet::ELinkType::ExternalBrowser);
		}
		case ComponentSettings_C_SettingId_ProfileOpenProfilePage: {
			if (State.SettingsAreDirty) {
				State = ComponentSettings_Private_DisplayDiscardChangesPopUp(
					State,
					True,
					ComponentSettings_K_AfterDiscardPopUp {
						Action = ComponentSettings_C_ActionAfterDiscardPopUp_OpenProfile
					}
				);
			} else {
				ComponentSettings_PendingEvents.add(ComponentSettings_K_Event {
					Type = ComponentSettings_C_EventType_OpenProfile
				});
			}
		}
		case ComponentSettings_C_SettingId_ControlLatencyTest: {
			declare CMlFrame Frame_SettingLine <=> CMGame_Scroll::GetFocusedElement(State.Controls.Scroll_Settings);
			declare CMlFrame Frame_LatencyTest <=> (Frame_SettingLine.GetFirstChild("menu-libs-latency-test_frame-latency-test") as CMlFrame);
			declare CMlFrame Asset_BgRight <=> (Frame_SettingLine.GetFirstChild("ComponentSettings_asset-bg-right") as CMlFrame);
			declare CMlLabel Label_ButtonValue <=> (Frame_SettingLine.GetFirstChild("ComponentSettings_label-button-value") as CMlLabel);

			if (CMGame_LatencyTest::IsRunning(Frame_LatencyTest)) {
				CMGame_LatencyTest::OnInput(This, Frame_LatencyTest);
				PlaySound = False;
			} else if (Label_ButtonValue.Visible) {
				CMGame_LatencyTest::Start(This, Frame_LatencyTest, Asset_BgRight);
				Label_ButtonValue.Hide();
			}
		}
		case ComponentSettings_C_SettingId_ControlUnbindAll: {
			if (ParentApp.ManiaPlanet.Dialog_IsFinished) {
				declare CInputPad SelectedPad = ComponentSettings_Private_GetSelectedPad(State);
				if (SelectedPad != Null) {
					ParentApp.ManiaPlanet.Dialog_UnbindInputDevice(SelectedPad);
					State.IsWaitingBind = True;
					State.IsWaitingBind_PlaySound = False;
					PlaySound = False;
					State = ComponentSettings_Private_UpdateControllerInfo(State);
					ComponentSettings_Private_UpdateDimmer(State);
				}
			}
		}
		case ComponentSettings_C_SettingId_ControlUnbindOne: {
			if (ParentApp.ManiaPlanet.Dialog_IsFinished) {
				declare CInputPad SelectedPad = ComponentSettings_Private_GetSelectedPad(State);
				if (SelectedPad != Null) {
					ParentApp.ManiaPlanet.Dialog_BindInput(-1, SelectedPad);
					State.IsWaitingBind = True;
					// `Dialog_BindInput()` do not trigger any sound from the C++
					// So we must not cancel the sound from the script with `PlaySound = False;`
					// like for `Dialog_UnbindInputDevice()` and `Dialog_DefaultInputBindings()`.
					State.IsWaitingBind_PlaySound = True;
					State = ComponentSettings_Private_UpdateControllerInfo(State);
					ComponentSettings_Private_UpdateDimmer(State);
				}
			}
		}
		case ComponentSettings_C_SettingId_ControlBindDefault: {
			if (ParentApp.ManiaPlanet.Dialog_IsFinished) {
				declare CInputPad SelectedPad = ComponentSettings_Private_GetSelectedPad(State);
				if (SelectedPad != Null) {
					ParentApp.ManiaPlanet.Dialog_DefaultInputBindings(SelectedPad);
					State.IsWaitingBind = True;
					State.IsWaitingBind_PlaySound = False;
					PlaySound = False;
					State = ComponentSettings_Private_UpdateControllerInfo(State);
					ComponentSettings_Private_UpdateDimmer(State);
				}
			}
		}
		case ComponentSettings_C_SettingId_SystemOnlineServicesStatus: {
			ParentApp.ManiaPlanet.OpenLink(ComponentSettings_Config::Get().WebsiteOnlineServicesStatusPage^"/status.html", CManiaPlanet::ELinkType::ExternalBrowser);
		}
		case ComponentSettings_C_SettingId_SystemCleanCache: {
			if (ParentApp.ManiaPlanet.Dialog_IsFinished) {
				ParentApp.ManiaPlanet.Dialog_CleanCache();
			}
		}
		case ComponentSettings_C_SettingId_SystemCredits: {
			if (State.SettingsAreDirty) {
				State = ComponentSettings_Private_DisplayDiscardChangesPopUp(
					State,
					True,
					ComponentSettings_K_AfterDiscardPopUp {
						Action = ComponentSettings_C_ActionAfterDiscardPopUp_OpenCredits
					}
				);
			} else {
				ComponentSettings_PendingEvents.add(ComponentSettings_K_Event {
					Type = ComponentSettings_C_EventType_OpenCredits
				});
			}
		}
		default: {
			PlaySound = False;
		}
	}

	if (PlaySound) {
		CMGame_MenuSounds::PlaySound(This, CMGame_MenuSounds::C_Sound_Select);
	}

	return State;
}
ComponentSettings_K_State ComponentSettings_Private_SelectSettingButton(ComponentSettings_K_State _State, Integer _SettingId) {
	return ComponentSettings_Private_SelectSettingButton(_State, _SettingId, True);
}
ComponentSettings_K_State ComponentSettings_Private_SelectSettingButton(ComponentSettings_K_State _State, ComponentSettings_K_PrivilegesCheck _PrivilegesCheck) {
	return ComponentSettings_Private_SelectSettingButton(_State, _PrivilegesCheck.SettingId, False);
}

// Select a setting checkbox
ComponentSettings_K_State ComponentSettings_Private_SelectSettingCheckbox(ComponentSettings_K_State _State, CMlFrame _Checkbox_Value, Integer _SettingId, Boolean _CheckPrivileges) {
	declare ComponentSettings_K_Setting Setting = _State.Settings.get(_SettingId, ComponentSettings_C_Setting_Null);
	if (!ComponentSettings_Private_SettingHasStatus(_State, Setting, ComponentSettings_C_SettingStatus_Enabled)) return _State;

	declare ComponentSettings_K_State State = _State;

	if (_CheckPrivileges) {
		State = ComponentSettings_Private_CheckSettingPrivileges(State, Setting, _Checkbox_Value);
		if (!ComponentSettings_Privileges::Check_IsComplete(State.PrivilegesCheck.Check)) {
			return State;
		}
	}

	declare Boolean IsChecked = Trackmania_Checkbox::Toggle(This, _Checkbox_Value);
	CMGame_MenuSounds::PlaySound(This, CMGame_MenuSounds::C_Sound_Select);
	declare ComponentSettings_K_Values Values = ComponentSettings_K_Values { ValueBoolean = IsChecked };
	if (ComponentSettings_C_AnalogSettings.exists(_SettingId)) {
		Values.ValueControlAnalogBoolean[_State.ControlVehicleModel] = IsChecked;
	}
	State = ComponentSettings_Private_UpdateSettingValue(State, _SettingId, Values);
	return State;
}
ComponentSettings_K_State ComponentSettings_Private_SelectSettingCheckbox(ComponentSettings_K_State _State, CMlFrame _Checkbox_Value, Integer _SettingId) {
	return ComponentSettings_Private_SelectSettingCheckbox(_State, _Checkbox_Value, _SettingId, True);
}
ComponentSettings_K_State ComponentSettings_Private_SelectSettingCheckbox(ComponentSettings_K_State _State, ComponentSettings_K_PrivilegesCheck _PrivilegesCheck) {
	return ComponentSettings_Private_SelectSettingCheckbox(_State, _PrivilegesCheck.Frame_Setting, _PrivilegesCheck.SettingId, False);
}

// Select a setting binding
ComponentSettings_K_State ComponentSettings_Private_SelectSettingBinding(ComponentSettings_K_State _State, Integer _ActionIndex) {
	declare ComponentSettings_K_State State = _State;
	if (ParentApp.ManiaPlanet.Dialog_IsFinished) {
		declare CInputPad SelectedPad = ComponentSettings_Private_GetSelectedPad(State);
		if (SelectedPad != Null) {
			ParentApp.ManiaPlanet.Dialog_BindInput(_ActionIndex, SelectedPad);
			State.IsWaitingBind = True;
			State.IsWaitingBind_PlaySound = True;
			CMGame_MenuSounds::PlaySound(This, CMGame_MenuSounds::C_Sound_Select);
			State = ComponentSettings_Private_UpdateControllerInfo(State);
			ComponentSettings_Private_UpdateDimmer(State);
		}
	}
	return State;
}

// Select a setting line in the scroll
ComponentSettings_K_State ComponentSettings_Private_SelectSettingLine(ComponentSettings_K_State _State, Integer _SettingKey, CMlFrame _Frame_SettingLine, Boolean _IsFromMouse) {
	declare ComponentSettings_K_State State = _State;
	declare ComponentSettings_K_Setting Setting = ComponentSettings_Private_GetSettingFromScroll(State, _SettingKey);

	if (Setting.Id != ComponentSettings_C_SettingId_NullId && ComponentSettings_Private_SettingHasStatus(State, Setting, ComponentSettings_C_SettingStatus_Enabled)) {
		switch (Setting.Type) {
			case ComponentSettings_C_SettingType_TextField: {
				// Prevent the user from reselecting the TextField when they click on the setting line while editing the TextField
				if (!_IsFromMouse || State.IsEditingTextField != Setting.Id) {
					State.IsEditingTextField = Setting.Id;
					State.CanResetIsEditingTextField = 0;
					CMGame_TextField::Select(This, (_Frame_SettingLine.GetFirstChild("ComponentSettings_textfield-value") as CMlFrame));
					CMGame_MenuSounds::PlaySound(This, CMGame_MenuSounds::C_Sound_Select);
				}
			}
			case ComponentSettings_C_SettingType_Button: {
				State = ComponentSettings_Private_SelectSettingButton(State, Setting.Id);
			}
			case ComponentSettings_C_SettingType_Checkbox: {
				State = ComponentSettings_Private_SelectSettingCheckbox(State, _Frame_SettingLine.GetFirstChild("ComponentSettings_checkbox-value") as CMlFrame, Setting.Id);
			}
			case ComponentSettings_C_SettingType_Binding: {
				State = ComponentSettings_Private_SelectSettingBinding(State, Setting.ActionIndex);
			}
			case ComponentSettings_C_SettingType_Slider: {
				if (Setting.Slider.DisplayTextField) {
					// Prevent the user from reselecting the TextField when they click on the setting line while editing the TextField
					if (!_IsFromMouse || State.IsEditingTextField != Setting.Id) {
						State.IsEditingTextField = Setting.Id;
						State.CanResetIsEditingTextField = 0;
						CMGame_TextField::Select(This, (_Frame_SettingLine.GetFirstChild("ComponentSettings_textfield-slider-value") as CMlFrame));
						CMGame_MenuSounds::PlaySound(This, CMGame_MenuSounds::C_Sound_Select);
					}
				}
			}
		}
	}

	return State;
}

// Select an element of navigation
ComponentSettings_K_State ComponentSettings_Private_Select(ComponentSettings_K_State _State, CMlControl _Control) {
	if (_Control == Null) return _State;

	declare ComponentSettings_K_State State = _State;

	switch (_Control.ControlId) {
		case "ComponentSettings_checkbox-value": {
			declare Integer ComponentSettings_DisplayedSettingId for _Control;
			State = ComponentSettings_Private_SelectSettingCheckbox(State, _Control as CMlFrame, ComponentSettings_DisplayedSettingId);
		}
		case "ComponentSettings_button-list-previous": {
			declare Integer ComponentSettings_DisplayedSettingId for _Control;
			assert(_Control.Parent.ControlId == "ComponentSettings_frame-type-list", "This is not pointing to the right control anymore");
			State = ComponentSettings_Private_UpdateSettingListValue(State, _Control.Parent, ComponentSettings_DisplayedSettingId, -1, False);
		}
		case "ComponentSettings_button-list-next": {
			declare Integer ComponentSettings_DisplayedSettingId for _Control;
			assert(_Control.Parent.ControlId == "ComponentSettings_frame-type-list", "This is not pointing to the right control anymore");
			State = ComponentSettings_Private_UpdateSettingListValue(State, _Control.Parent, ComponentSettings_DisplayedSettingId, 1, False);
		}
		case "ComponentSettings_button-apply": {
			State = ComponentSettings_Private_ApplySettings(State, State.DisplayedCategory);
			if (ComponentSettings_G_State.IsOnboardingModeEnabled) {
				ComponentSettings_PendingEvents.add(ComponentSettings_K_Event {
					Type = ComponentSettings_C_EventType_Continue
				});
			}
		}
		case "ComponentSettings_button-back": {
			if (State.SettingsAreDirty) {
				State = ComponentSettings_Private_DisplayDiscardChangesPopUp(
					State,
					True,
					ComponentSettings_K_AfterDiscardPopUp {
						Action = ComponentSettings_C_ActionAfterDiscardPopUp_CloseSettings
					}
				);
			} else {
				ComponentSettings_PendingEvents.add(ComponentSettings_K_Event {
					Type = ComponentSettings_C_EventType_Back
				});
			}
		}
	}

	return State;
}

// Load settings values
ComponentSettings_K_State ComponentSettings_Private_LoadSettings(ComponentSettings_K_State _State) {
	declare ComponentSettings_K_State State = _State;

	foreach (Setting in State.Settings) {
		declare ComponentSettings_K_Setting UpdatedSetting = Setting;

		switch (UpdatedSetting.Id) {
			case ComponentSettings_C_SettingId_ProfileTrigram: {
				UpdatedSetting.Old.ValueText = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.User_Trigram;
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case ComponentSettings_C_SettingId_ProfileTrailsColor: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.User_LightTrailHue;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case ComponentSettings_C_SettingId_ProfileDisplaySplashscreen: {
				if (Trackmania_UserStore::HasGamePermissions(PrivilegeMgr, UpdatedSetting.Permissions)) {
					UpdatedSetting.Old.ValueBoolean = Trackmania_UserStore::GetUserHasSplashscreensEnabled();
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_ProfileDisplayAds: {
				if (Trackmania_UserStore::HasGamePermissions(PrivilegeMgr, UpdatedSetting.Permissions)) {
					UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Adverts_Enabled;
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_ProfileEnablePersonalizedAds: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Adverts_UsePersonnalData;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_VideoDevice: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					foreach (Key => Device in ParentApp.ManiaPlanet.DisplaySettings.Devices) {
						UpdatedSetting.List.ValuesText.add(Device);
						if (ParentApp.ManiaPlanet.DisplaySettings.DevicesNames.existskey(Key)) {
							UpdatedSetting.List.Labels.add(ParentApp.ManiaPlanet.DisplaySettings.DevicesNames[Key]);
						} else {
							//L16N [Settings] Video device (graphics card) without a name
							UpdatedSetting.List.Labels.add(_("|VideoDevice|Unknown"));
						}
						if (ParentApp.ManiaPlanet.DisplaySettings.Device_NextStart == Device) {
							UpdatedSetting.Old.ValueInteger = Key;
						}
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add("");
					//L16N [Settings] The game did not find any connected video device (graphics card)
					UpdatedSetting.List.Labels.add(_("|VideoDevice|No devices"));
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoDisplayMode: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesDisplayMode.keyof(ParentApp.ManiaPlanet.DisplaySettings.DisplayMode);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoFullscreenResolution: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesInt2 = [];
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					foreach (Key => FullscreenSize in ParentApp.ManiaPlanet.DisplaySettings.FullscreenSizes) {
						UpdatedSetting.List.Labels.add(FullscreenSize.X^" x "^FullscreenSize.Y);
						UpdatedSetting.List.ValuesInt2.add(FullscreenSize);
						if (ParentApp.ManiaPlanet.DisplaySettings.FullscreenSize == FullscreenSize) {
							UpdatedSetting.Old.ValueInteger = Key;
						}
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoWindowResolutionX: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.WindowSize.X;
				} else {
					UpdatedSetting.Old.ValueText = ""^ComponentSettings_Private_ValidateWindowResolutionX(0);
				}
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case ComponentSettings_C_SettingId_VideoWindowResolutionY: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.WindowSize.Y;
				} else {
					UpdatedSetting.Old.ValueText = ""^ComponentSettings_Private_ValidateWindowResolutionY(0);
				}
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case ComponentSettings_C_SettingId_VideoShowWindowBorder: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = !ParentApp.ManiaPlanet.DisplaySettings.WindowBorderless;
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_VideoAutomaticQuality: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.DisplaySettings.Automatic_Enabled;
				} else {
					UpdatedSetting.Old.ValueBoolean = False;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_VideoAutomaticMinFPS: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.Automatic_MinFps;
				} else {
					UpdatedSetting.Old.ValueText = ""^ComponentSettings_Private_ValidateAutomaticMinFPS(60);
				}
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case ComponentSettings_C_SettingId_VideoLimitFPS: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.MaxFps;
				} else {
					UpdatedSetting.Old.ValueText = ""^ComponentSettings_Private_ValidateLimitFPS(120);
				}
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case ComponentSettings_C_SettingId_VideoDisplaySync: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesDisplaySync.keyof(ParentApp.ManiaPlanet.DisplaySettings.DisplaySync);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoGPUSync: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesGpuSync.keyof(ParentApp.ManiaPlanet.DisplaySettings.GpuSync);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoForwardAA: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesForwardAA.keyof(ParentApp.ManiaPlanet.DisplaySettings.Antialias_Forward);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoDeferredAA: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesDeferredAA.keyof(ParentApp.ManiaPlanet.DisplaySettings.Antialias_Deferred);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoCanSelectPreset: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.DisplaySettings.Customize_NextStart;
				} else {
					UpdatedSetting.Old.ValueBoolean = False;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
				State.ShowSettingsThatHaveDisplaySettingsPreset = UpdatedSetting.New.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_VideoPreset: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesPreset.keyof(ParentApp.ManiaPlanet.DisplaySettings.Preset_NextStart);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoShaderQuality: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesShaderQuality.keyof(ParentApp.ManiaPlanet.DisplaySettings.ShaderQuality_NextStart);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoTexturesQuality: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesInteger.keyof(ParentApp.ManiaPlanet.DisplaySettings.TexturesQuality_NextStart);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoShadows: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesShadows.keyof(ParentApp.ManiaPlanet.DisplaySettings.Shadows_NextStart);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoTextureFiltering: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesTextureFiltering.keyof(ParentApp.ManiaPlanet.DisplaySettings.TextureFiltering);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoVehicleReflect: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesVehicleReflect.keyof(ParentApp.ManiaPlanet.DisplaySettings.VehicleReflect);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoWaterReflect: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesWaterReflect.keyof(ParentApp.ManiaPlanet.DisplaySettings.WaterReflect);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoEverywhereReflect: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = (ParentApp.ManiaPlanet.DisplaySettings.EverywhereReflect == CDisplaySettings::EEverywhereReflect::Enabled);
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_VideoBloomHDR: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesFxBloomHdr.keyof(ParentApp.ManiaPlanet.DisplaySettings.FxBloomHdr);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoMotionBlur: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = (ParentApp.ManiaPlanet.DisplaySettings.FxMotionBlur == CDisplaySettings::EFxMotionBlur::Enabled);
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_VideoMotionBlurIntensity: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.DisplaySettings.FxMotionBlurIntens;
				} else {
					UpdatedSetting.Old.ValueReal = 0.;
				}
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case ComponentSettings_C_SettingId_VideoSlowMotionBlur: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueBoolean = (ParentApp.ManiaPlanet.DisplaySettings.FxBlur == CDisplaySettings::EFxBlur::Enabled);
				} else {
					UpdatedSetting.Old.ValueBoolean = True;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_VideoCarCustomizationLevel: {
				declare Integer Key = UpdatedSetting.List.ValuesCustomPlayerModels.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Custom_PlayerModels);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				} else {
					UpdatedSetting.Old.ValueInteger = 0;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoPerformanceQuality: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesConsoleResolution.keyof(ParentApp.ManiaPlanet.DisplaySettings.ConsoleResolution);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_VideoOutputScale: {
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.DisplaySettings.ConsoleOutputScale;
					UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
				}
			}
			case ComponentSettings_C_SettingId_SoundEnable: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.AudioSettings_EnableAudio;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SoundDevice: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.AudioSettings != Null) {
					foreach (Key => Device in ParentApp.ManiaPlanet.AudioSettings.Devices) {
						UpdatedSetting.List.ValuesText.add(Device);
						UpdatedSetting.List.Labels.add(Device);
						if (ParentApp.ManiaPlanet.AudioSettings.Device_NextApply == Device) {
							UpdatedSetting.Old.ValueInteger = Key;
						}
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add("");
					//L16N [Settings] The game did not find any connected audio device
					UpdatedSetting.List.Labels.add(_("|AudioDevice|No devices"));
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_SoundMusicVolume: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case ComponentSettings_C_SettingId_SoundMasterVolume: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case ComponentSettings_C_SettingId_SoundEffectVolume: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case ComponentSettings_C_SettingId_SoundUIVolume: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case ComponentSettings_C_SettingId_SoundVoiceChatAndTTSVolume: {
				UpdatedSetting.Old.ValueReal = ParentApp.ManiaPlanet.AudioSettings.VoiceChat_SpeakerVolume;
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case ComponentSettings_C_SettingId_SoundMuteUnfocused: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.AudioSettings_MuteWhenAppUnfocused;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SoundVoiceChat: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_Enabled;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SoundVoiceChatDeviceIn: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.AudioSettings != Null) {
					foreach (Key => Device in ParentApp.ManiaPlanet.AudioSettings.VoiceChat_Devices_In) {
						UpdatedSetting.List.ValuesText.add(Device);
						UpdatedSetting.List.Labels.add(Device);
						if (ParentApp.ManiaPlanet.AudioSettings.VoiceChat_Device_In_NextApply == Device) {
							UpdatedSetting.Old.ValueInteger = Key;
						}
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add("");
					//L16N [Settings] The game did not find any connected audio device
					UpdatedSetting.List.Labels.add(_("|AudioDevice|No devices"));
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_SoundVoiceChatDeviceOut: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.AudioSettings != Null) {
					foreach (Key => Device in ParentApp.ManiaPlanet.AudioSettings.VoiceChat_Devices_Out) {
						UpdatedSetting.List.ValuesText.add(Device);
						UpdatedSetting.List.Labels.add(Device);
						if (ParentApp.ManiaPlanet.AudioSettings.VoiceChat_Device_Out_NextApply == Device) {
							UpdatedSetting.Old.ValueInteger = Key;
						}
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add("");
					//L16N [Settings] The game did not find any connected audio device
					UpdatedSetting.List.Labels.add(_("|AudioDevice|No devices"));
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionMode: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.AudioSettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesVoiceDetectionMode.keyof(ParentApp.ManiaPlanet.AudioSettings.VoiceChat_VoiceDetection_Mode);
					if (Key >= 0 && UpdatedSetting.List.ValuesVoiceDetectionMode.existskey(Key)) { // @TODO (to remove later) In case player select PPT on PC and is now on console, reset to automatic voice detection (see trackmania-next/tmnext/-/issues/4757)
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;

				State.VoiceChatVoiceDetectionManualSensitivity = (UpdatedSetting.New.ValueInteger == UpdatedSetting.List.ValuesVoiceDetectionMode.keyof(NSystemConfig::EVoiceDetectionMode::Manual));
			}
			case ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionSensitivity: { // Slider can not be set to <1., 0.> so we use the inverse of the value
				UpdatedSetting.Old.ValueReal = ComponentSettings_ML::Clamp(1. - ParentApp.ManiaPlanet.AudioSettings.VoiceChat_VoiceDetection_Sensitivity, 0., 1.);
				UpdatedSetting.New.ValueReal = UpdatedSetting.Old.ValueReal;
			}
			case ComponentSettings_C_SettingId_SoundVoiceChatLoopback: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_Loopback;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SoundSpeechToText: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.STT_Enabled;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SoundTextToSpeech: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.TTS_Enabled;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SendTextAsVoice: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.VoiceChat_SendTextAsVoice;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_ControlAnalogVehicleSelection: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				State.ControlVehicleModels = [];
				State.ControlVehicleModel = "";
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					if (Vehicle.ModelName != "Unassigned") {
						UpdatedSetting.List.ValuesText.add(Vehicle.ModelName);
						UpdatedSetting.List.Labels.add(ComponentSettings_C_Inputs_Vehicles_Translations.get(Vehicle.ModelDisplayName, Vehicle.ModelDisplayName));
						State.ControlVehicleModels.add(Vehicle.ModelName);
						if (State.ControlVehicleModel == "") {
							State.ControlVehicleModel = Vehicle.ModelName;
						}
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add(State.ControlVehicleModel);
					UpdatedSetting.List.Labels.add("-");
					State.ControlVehicleModels.add(State.ControlVehicleModel);
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_ControlAnalogSensitivity: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName] = Vehicle.AnalogSensitivity;
					UpdatedSetting.New.ValueControlAnalogReal[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
			case ComponentSettings_C_SettingId_ControlAnalogDeadZone: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName] = Vehicle.AnalogDeadZone;
					UpdatedSetting.New.ValueControlAnalogReal[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
			case ComponentSettings_C_SettingId_ControlAnalogRumbleIntensity: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName] = Vehicle.RumbleIntensity;
					UpdatedSetting.New.ValueControlAnalogReal[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
			case ComponentSettings_C_SettingId_ControlTriggerHapticFeedbackEnabled: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName] = Vehicle.HapticFeedbackEnabled;
					UpdatedSetting.New.ValueControlAnalogBoolean[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
			case ComponentSettings_C_SettingId_ControlInvertSteer: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName] = Vehicle.InvertSteer;
					UpdatedSetting.New.ValueControlAnalogBoolean[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
			case ComponentSettings_C_SettingId_ControlAccelIsToggleMode: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName] = Vehicle.AccelIsToggleMode;
					UpdatedSetting.New.ValueControlAnalogBoolean[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
			case ComponentSettings_C_SettingId_ControlBrakeIsToggleMode: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName] = Vehicle.BrakeIsToggleMode;
					UpdatedSetting.New.ValueControlAnalogBoolean[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogBoolean[Vehicle.ModelName];
				}
			}
			case ComponentSettings_C_SettingId_ControlAnalogCenterSpringIntensity: {
				foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
					UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName] = Vehicle.CenterSpringIntensity;
					UpdatedSetting.New.ValueControlAnalogReal[Vehicle.ModelName] = UpdatedSetting.Old.ValueControlAnalogReal[Vehicle.ModelName];
				}
			}
			case ComponentSettings_C_SettingId_ControlDevice: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesInteger = [];
				UpdatedSetting.Old.ValueInteger = 0;
				State.ControlControllerId = -1;
				State.InputPadsCount = Input.Pads.count;
				declare Integer LowerIdleDuration = -1;
				foreach (Key => Pad in Input.Pads) {
					UpdatedSetting.List.ValuesInteger.add(Pad.ControllerId);
					UpdatedSetting.List.Labels.add(ComponentSettings_TL::GetTranslatedText(Pad.ModelName));
					// Select the last used controller
					if (LowerIdleDuration == -1 || Pad.IdleDuration < LowerIdleDuration) {
						LowerIdleDuration = Pad.IdleDuration;
						State.ControlControllerId = Pad.ControllerId;
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesInteger.add(State.ControlControllerId);
					//L16N [Settings] The game did not find any connected audio device
					UpdatedSetting.List.Labels.add(_("|InputDevice|No devices"));
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_HUDMarkersType: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesPlayerInfoDisplayType.keyof(ParentApp.ManiaPlanet.Interface_PlayerInfoDisplayType);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_HUDMarkersSize: {
				UpdatedSetting.Old.ValueInteger = ParentApp.ManiaPlanet.Interface_PlayerInfoDisplaySize;
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_HUDPrioritizeAlternateCam1: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_UseAlternateCam1;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_HUDPrioritizeAlternateCam2: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_UseAlternateCam2;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_HUDPrioritizeAlternateCam3: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_UseOldInternalCam;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_HUDInternalCamCarVisibility: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesPlayerVisibility.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_InternalCamLocalPlayerVisibility);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_HUDDefaultOpponentVisibility: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesPlayerVisibility.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Online_DefaultOpponentVisibility);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_HUDRoadsideSpectatorVisibility: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesRoadsideSpectatorVisibility.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Online_RoadsideSpectatorVisibility);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_HUDTrackRecordsVisibility: {
				UpdatedSetting.Old.ValueInteger = UpdatedSetting.List.ValuesDisplayRecords.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_DisplayRecords);
				if (!UpdatedSetting.List.ValuesDisplayRecords.existskey(UpdatedSetting.Old.ValueInteger)) {
					UpdatedSetting.Old.ValueInteger = UpdatedSetting.List.ValuesDisplayRecords.keyof(CUserV2Profile::EDisplayRecords::Progressive);
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_HUDEnableSpecialBlockMessage: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_ShowSpecialsFeedback;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_HUDDisplayCheckpointCounter: {
				UpdatedSetting.Old.ValueBoolean = Trackmania_UserStore::GetUserDisplayCheckpointCounter();
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_HUDChatAllowHide: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_AllowChatHiding;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_HUDChatBackground: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesChatBackground.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_IngameChatBackground);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_HUDChatTextSize: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesChatTextSize.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_IngameChatTextSize);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_HUDShowPerformance: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesShowPerformance.keyof(ParentApp.ManiaPlanet.DisplaySettings.ShowPerformance);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_SystemLanguage: {
				UpdatedSetting.List.Labels = [];
				UpdatedSetting.List.ValuesText = [];
				UpdatedSetting.Old.ValueInteger = 0;
				foreach (Key => Language in ParentApp.ManiaPlanet.Language_AvailableChoices) {
					UpdatedSetting.List.ValuesText.add(Language);
					if (ParentApp.ManiaPlanet.Language_AvailableChoices_Names.existskey(Key)) {
						UpdatedSetting.List.Labels.add(ParentApp.ManiaPlanet.Language_AvailableChoices_Names[Key]);
					} else {
						UpdatedSetting.List.Labels.add(Language);
					}
					if (Language == ParentApp.ManiaPlanet.Language_NextStart) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				if (UpdatedSetting.List.Labels.count <= 0) {
					UpdatedSetting.List.ValuesText.add("");
					UpdatedSetting.List.Labels.add("-");
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_SystemOnlineServicesStatus: {
				UpdatedSetting.ButtonText = Trackmania_OnlineServicesStatusStore::GetCurrentStatusNameAndIcon();
			}
			case ComponentSettings_C_SettingId_SystemNetworkSpeed: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesNetworkSpeed.keyof(ParentApp.ManiaPlanet.NetworkSpeed);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_SystemNetworkSpeedDownload: {
				UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.NetworkSpeed_CustomDownload;
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case ComponentSettings_C_SettingId_SystemNetworkSpeedUpload: {
				UpdatedSetting.Old.ValueText = ""^ParentApp.ManiaPlanet.NetworkSpeed_CustomUpload;
				UpdatedSetting.New.ValueText = UpdatedSetting.Old.ValueText;
			}
			case ComponentSettings_C_SettingId_SystemNetworkCrossPlay: {
				UpdatedSetting.Old.ValueBoolean = Trackmania_UserStore::IsCrossPlayActive();
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SystemDownloadSkin: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.Network_EnableVehicleSkinLocators;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SystemDownloadMapMod: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.Network_EnableMapModLocators;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SystemDownloadSign: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.Network_EnableMapSkinLocators;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SystemEnableTrackEditorQuickStart: {
				if (Trackmania_UserStore::HasGamePermissions(PrivilegeMgr, UpdatedSetting.Permissions)) {
					UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorUseQuickstart;
				} else {
					UpdatedSetting.Old.ValueBoolean = False;
				}
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
				State.TrackEditorQuickStartEnabled = UpdatedSetting.New.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SystemTrackEditorQuickstartMapType: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (UpdatedSetting.List.ValuesInteger.exists(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartMapType)) {
					UpdatedSetting.Old.ValueInteger = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartMapType;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_SystemTrackEditorQuickStartUseGamepadController: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesBoolean.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartUseGamepad);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_SystemTrackEditorQuickStartDifficulty: {
				UpdatedSetting.Old.ValueInteger = 1; //< Advanced difficulty by default
				UpdatedSetting.List.Labels = [_("|MapEditorDifficulty|Simple"), _("|MapEditorDifficulty|Advanced")];
				UpdatedSetting.List.MapEditorDifficulty = [CUserV2Profile::EMapEditorDifficulty::Simple, CUserV2Profile::EMapEditorDifficulty::Advanced];
				if (ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartUseGamepad || ComponentSettings_Platform::IsFromFirstParty(System)) {
					UpdatedSetting.List.Labels.add(_("|MapEditorDifficulty|Expert"));
					UpdatedSetting.List.MapEditorDifficulty.add(CUserV2Profile::EMapEditorDifficulty::Expert);
				}

				declare Integer Key = UpdatedSetting.List.MapEditorDifficulty.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartDifficulty);
				if (Key >= 0 && Key < UpdatedSetting.List.MapEditorDifficulty.count) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_SystemTrackEditorQuickStartMood: {
				UpdatedSetting.Old.ValueInteger = 0;
				declare Integer Key = UpdatedSetting.List.ValuesMapEditorMood.keyof(ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Editors_MapEditorQuickstartMood);
				if (Key >= 0) {
					UpdatedSetting.Old.ValueInteger = Key;
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
			case ComponentSettings_C_SettingId_SystemColorblindMode: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Interface_ColorblindMode;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SystemAutoSkipStartScreens: {
				UpdatedSetting.Old.ValueBoolean = ParentApp.ManiaPlanet.SystemSettings_SkipIntro;
				UpdatedSetting.New.ValueBoolean = UpdatedSetting.Old.ValueBoolean;
			}
			case ComponentSettings_C_SettingId_SystemScreenshotExtension: {
				UpdatedSetting.Old.ValueInteger = 0;
				if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
					declare Integer Key = UpdatedSetting.List.ValuesScreenshotExt.keyof(ParentApp.ManiaPlanet.DisplaySettings.ScreenshotExt);
					if (Key >= 0) {
						UpdatedSetting.Old.ValueInteger = Key;
					}
				}
				UpdatedSetting.New.ValueInteger = UpdatedSetting.Old.ValueInteger;
			}
		}

		State.Settings[Setting.Id] = UpdatedSetting;
	}

	State = ComponentSettings_Private_SetControlVehicleModel(State, State.ControlVehicleModel);
	State = ComponentSettings_Private_SetControlControllerId(State, State.ControlControllerId);

	if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
		State.WindowSize = ParentApp.ManiaPlanet.DisplaySettings.WindowSize;
	}
	State.MasterVolume = ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume;
	State.EffectVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene;
	State.UIVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui;
	State.MusicVolume = ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume;

	return State;
}

// Update the status of the settings
ComponentSettings_K_State ComponentSettings_Private_SetSettingsStatus(ComponentSettings_K_State _State, Integer[] _SettingIds, Integer _Status) {
	declare ComponentSettings_K_State State = _State;

	foreach (SettingId in _SettingIds) {
		if (State.Settings.existskey(SettingId)) {
			State.Settings[SettingId].Status = _Status;
		}
	}

	State = ComponentSettings_Private_UpdateSettingsList(State);

	return State;
}

// Enable or disable the component.
ComponentSettings_K_State ComponentSettings_Private_Enable(
	ComponentSettings_K_State _State,
	Boolean _Enabled,
	Boolean _ForceUpdate,
	Boolean _ResetCategory
) {
	if (!_ForceUpdate && _State.ComponentEnabled == _Enabled) return _State;

	declare ComponentSettings_K_State State = _State;

	State.ComponentEnabled = _Enabled;
	State.IsEditingTextField = ComponentSettings_C_SettingId_NullId;
	State.CanResetIsEditingTextField = 0;
	ComponentSettings_Private_UpdateNavigationLock(State);

	if (State.ComponentEnabled) {
		// Load settings value
		ParentApp.ManiaPlanet.DisplaySettings_LoadCurrent();
		ParentApp.ManiaPlanet.AudioSettings_LoadCurrent();
		State.CanTryToReloadDisplaySettings = (ParentApp.ManiaPlanet.DisplaySettings != Null);
		State.CanTryToReloadAudioSettings = (ParentApp.ManiaPlanet.AudioSettings != Null);
		Trackmania_OnlineServicesStatusStore::Action_GetStatus(This);
		State = ComponentSettings_Private_LoadSettings(State);
		State = ComponentSettings_Private_UpdateSettingsList(State);
		if (State.LatencyTestEnabled) {
			CMGame_LatencyTest::RetrieveLatencyResults(This);
		}

		// Speech to text (only available for US players)
		// This verification must be made when opening the component because the variable is not yet initialized in MainStart
		if (ParentApp.ManiaPlanet.UserMgr.MainUserProfile.STT_Available) {
			State = ComponentSettings_Private_SetSettingsStatus(State, [ComponentSettings_C_SettingId_SoundSpeechToText], ComponentSettings_C_SettingStatus_Enabled);
		} else {
			State = ComponentSettings_Private_SetSettingsStatus(State, [ComponentSettings_C_SettingId_SoundSpeechToText], ComponentSettings_C_SettingStatus_Hidden);
		}

		// Text to speech context
		ComponentSettings_G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Enter(ComponentSettings_C_TTSContextLevel_Page);
		State.PreviouslyFocusedTabId = -1;
		State.PreviouslyFocusedSectionId = -1;
		State.PreviouslyFocusedSettingId = -1;

		// Update display
		if (_ResetCategory || !State.ScrollSettingIds.existskey(State.DisplayedCategory)) {
			State = ComponentSettings_Private_SetDisplayedCategory(State, State.DefaultCategory, False, True);
		} else {
			State = ComponentSettings_Private_DisplayCategory(State);
		}
		ComponentSettings_Private_DisplayUserInfo(State, LocalUser);

		// Focus the settings scroll by default
		if (!ComponentNavigation_ComponentNavigation::IsLocked(State.Controls.Scroll_Settings)) {
			State = ComponentSettings_Private_Focus(State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main"), State.Controls.Scroll_Settings);
		} else if (!ComponentNavigation_ComponentNavigation::IsLocked(State.Controls.Button_Back)) {
			State = ComponentSettings_Private_Focus(State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main"), State.Controls.Button_Back);
		}
	} else {
		if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
			ParentApp.ManiaPlanet.DisplaySettings_Unload();
		}
		if (ParentApp.ManiaPlanet.AudioSettings != Null) {
			ParentApp.ManiaPlanet.AudioSettings_Unload();
		}
		State.CanTryToReloadDisplaySettings = False;
		State.CanTryToReloadAudioSettings = False;

		// Close the discard changes pop-up if it was open
		if (State.DiscardPopUpDisplayed) {
			State = ComponentSettings_Private_DisplayDiscardChangesPopUp(State, False);
		}

		// Close the activate key pop-up if it was open
		if (State.ActivateKeyPopUpDisplayed) {
			State = ComponentSettings_Private_DisplayActivateKeyPopUp(State, False);
		}

		// Hide calibration arrows is they were visible
		if (State.IsAreaCalibrationDisplayed) {
			State = ComponentSettings_Private_DisplayCalibrationArrows(State, False, False);
		}

		// Reset the activate key setting
		State = ComponentSettings_Private_UpdateSettingValue(State, ComponentSettings_C_SettingId_ProfileActivateKey, ComponentSettings_K_Values { ValueText = "" });
		ComponentSettings_G_Request_PostActivateKey = ComponentSettings_Http::Destroy(ComponentSettings_G_Request_PostActivateKey);
		ComponentSettings_G_Request_PostCheckKey = ComponentSettings_Http::Destroy(ComponentSettings_G_Request_PostCheckKey);

		State.PrivilegesCheck.Check = ComponentSettings_Privileges::Check_Destroy(State.PrivilegesCheck.Check);

		State = ComponentSettings_Private_HideAlertMessage(State);
		State.DraggedSlider.IsDragged = False;

		ComponentSettings_G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Leave(ComponentSettings_G_TTSContextIdent_Tabs);
		ComponentSettings_G_TTSContextIdent_Section = ParentApp.TTS_Context_Leave(ComponentSettings_G_TTSContextIdent_Section);
		ComponentSettings_G_TTSContextIdent_Setting = ParentApp.TTS_Context_Leave(ComponentSettings_G_TTSContextIdent_Setting);
	}

	return State;
}

// Convert a `CDisplaySettings` object to a `K_DisplaySettingsPreset` structure
ComponentSettings_K_DisplaySettingsPreset ComponentSettings_Private_ConvertDisplaySettings(CDisplaySettings _DisplaySettings) {
	return ComponentSettings_K_DisplaySettingsPreset {
		ShaderQuality_NextStart = _DisplaySettings.ShaderQuality_NextStart,
		Shadows_NextStart = _DisplaySettings.Shadows_NextStart,
		TexturesQuality_NextStart = _DisplaySettings.TexturesQuality_NextStart,
		EverywhereReflect = _DisplaySettings.EverywhereReflect,
		WaterReflect = _DisplaySettings.WaterReflect,
		VehicleReflect = _DisplaySettings.VehicleReflect,
		FxBloomHdr = _DisplaySettings.FxBloomHdr,
		FxMotionBlur = _DisplaySettings.FxMotionBlur,
		FxBlur = _DisplaySettings.FxBlur
	};
}

// Assign the values of a `K_DisplaySettingsPreset` to a `CDisplaySettings` object
Void ComponentSettings_Private_ApplyDisplaySettings(CDisplaySettings _DisplaySettingsToUpdate, ComponentSettings_K_DisplaySettingsPreset _DisplaySettingToApply) {
	_DisplaySettingsToUpdate.ShaderQuality_NextStart = _DisplaySettingToApply.ShaderQuality_NextStart;
	_DisplaySettingsToUpdate.Shadows_NextStart = _DisplaySettingToApply.Shadows_NextStart;
	_DisplaySettingsToUpdate.TexturesQuality_NextStart = _DisplaySettingToApply.TexturesQuality_NextStart;
	_DisplaySettingsToUpdate.EverywhereReflect = _DisplaySettingToApply.EverywhereReflect;
	_DisplaySettingsToUpdate.WaterReflect = _DisplaySettingToApply.WaterReflect;
	_DisplaySettingsToUpdate.VehicleReflect = _DisplaySettingToApply.VehicleReflect;
	_DisplaySettingsToUpdate.FxBloomHdr = _DisplaySettingToApply.FxBloomHdr;
	_DisplaySettingsToUpdate.FxMotionBlur = _DisplaySettingToApply.FxMotionBlur;
	_DisplaySettingsToUpdate.FxBlur = _DisplaySettingToApply.FxBlur;
}

// Gather the different display settings presets
ComponentSettings_K_State ComponentSettings_Private_RetrieveDisplaySettingsPresets(ComponentSettings_K_State _State) {
	declare ComponentSettings_K_State State = _State;

	// Retrieving the presets can be costly
	// To avoid doing that each time a settings component is instantiated
	// we cache the presets in a variable shared everywhere (menu and game mode)
	// If the presets are already in the cache we return them
	// Otherwise we retrieve them and save them in the cache
	declare ComponentSettings_K_DisplaySettingsPreset[CDisplaySettings::EPreset] ComponentSettings_DisplaySettingsPresetsCache for System;
	if (ComponentSettings_DisplaySettingsPresetsCache.count > 0) {
		State.DisplaySettingsPresets = ComponentSettings_DisplaySettingsPresetsCache;
	} else {
		declare Boolean NeedToUnloadDisplaySettings = False;
		if (ParentApp.ManiaPlanet.DisplaySettings == Null) {
			ParentApp.ManiaPlanet.DisplaySettings_LoadCurrent();
			NeedToUnloadDisplaySettings = True;
		}

		if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
			// Save the original display settings
			declare CDisplaySettings::EPreset OriginalPreset = ParentApp.ManiaPlanet.DisplaySettings.Preset_NextStart;
			declare ComponentSettings_K_DisplaySettingsPreset OriginalDisplaySettings = ComponentSettings_Private_ConvertDisplaySettings(ParentApp.ManiaPlanet.DisplaySettings);

			// Loop through the presets to gather the display settings values for each one
			State.DisplaySettingsPresets = [];
			declare CDisplaySettings::EPreset[] Presets = [
				CDisplaySettings::EPreset::None,
				CDisplaySettings::EPreset::VeryFast,
				CDisplaySettings::EPreset::Fast,
				CDisplaySettings::EPreset::Nice,
				CDisplaySettings::EPreset::VeryNice
			];
			foreach (Preset in Presets) {
				ParentApp.ManiaPlanet.DisplaySettings.Preset_NextStart = Preset;
				ParentApp.ManiaPlanet.DisplaySettings_Apply();
				State.DisplaySettingsPresets[Preset] = ComponentSettings_Private_ConvertDisplaySettings(ParentApp.ManiaPlanet.DisplaySettings);
			}
			ComponentSettings_DisplaySettingsPresetsCache = State.DisplaySettingsPresets;

			// Restore the original display settings
			ParentApp.ManiaPlanet.DisplaySettings.Preset_NextStart = OriginalPreset;
			ComponentSettings_Private_ApplyDisplaySettings(ParentApp.ManiaPlanet.DisplaySettings, OriginalDisplaySettings);
			ParentApp.ManiaPlanet.DisplaySettings_Apply();
			if (NeedToUnloadDisplaySettings) {
				ParentApp.ManiaPlanet.DisplaySettings_Unload();
			}
		}
	}

	return State;
}

// Initializes which modes are available on the current plaform
ComponentSettings_K_State ComponentSettings_Private_InitializePerformanceQualityModes(ComponentSettings_K_State _State) {
	if (!_State.Settings.existskey(ComponentSettings_C_SettingId_VideoPerformanceQuality)) return _State;

	declare ComponentSettings_K_State State = _State;

	declare Boolean NeedToUnloadDisplaySettings = False;
	if (ParentApp.ManiaPlanet.DisplaySettings == Null) {
		ParentApp.ManiaPlanet.DisplaySettings_LoadCurrent();
		NeedToUnloadDisplaySettings = True;
	}

	if (ParentApp.ManiaPlanet.DisplaySettings != Null) {
		// Find how many modes are available
		declare ComponentSettings_K_Setting Setting = State.Settings[ComponentSettings_C_SettingId_VideoPerformanceQuality];
		declare CDisplaySettings::EConsoleResolution[] ConsoleResolutionValues;
		declare Text[] ConsoleResolutionLabels;
		foreach (Key => ConsoleResolution in Setting.List.ValuesConsoleResolution) {
			if (ParentApp.ManiaPlanet.DisplaySettings.ConsoleResolution_IsAvailable(ConsoleResolution)) {
				ConsoleResolutionValues.add(ConsoleResolution);
				ConsoleResolutionLabels.add(Setting.List.Labels[Key]);
			}
		}

		// If only one mode is available disable the setting
		if (ConsoleResolutionValues.count <= 1) {
			State.Settings.removekey(ComponentSettings_C_SettingId_VideoPerformanceQuality);
		}
		// If some modes are not available remove them
		else if (ConsoleResolutionValues.count < Setting.List.ValuesConsoleResolution.count) {
			Setting.List.ValuesConsoleResolution = ConsoleResolutionValues;
			Setting.List.Labels = ConsoleResolutionLabels;
			Setting.New.ValueInteger = ComponentSettings_ML::Clamp(Setting.New.ValueInteger, 0, Setting.List.ValuesConsoleResolution.count - 1);
			Setting.Old.ValueInteger = ComponentSettings_ML::Clamp(Setting.Old.ValueInteger, 0, Setting.List.ValuesConsoleResolution.count - 1);
			State.Settings[ComponentSettings_C_SettingId_VideoPerformanceQuality] = Setting;
		}

		if (NeedToUnloadDisplaySettings) {
			ParentApp.ManiaPlanet.DisplaySettings_Unload();
		}
	}

	return State;
}

// Initialize the component with a list of settings to display
ComponentSettings_K_State ComponentSettings_Private_Initialize(ComponentSettings_K_State _State, ComponentSettings_K_Setting[] _Settings) {
	declare ComponentSettings_K_State State = _State;

	assert(ParentApp != Null && ParentApp.ManiaPlanet != Null, "The 'Settings' component can only be used in contexts that have access to `ParentApp.Maniaplanet`");

	State.ScrollSettingIds = [];
	State.Settings = [];
	State.Bindings = [];
	State.BindingsKeyShift = 0;
	State.IsEditingTextField = ComponentSettings_C_SettingId_NullId;
	State.CanResetIsEditingTextField = 0;
	State.IsWaitingBind = False;
	State.IsWaitingBind_PlaySound = False;
	State.LastFocusedSettingKey = [];
	State.DisplayedCategory = ComponentSettings_C_SettingCategory_Null;
	State.DefaultCategory = ComponentSettings_C_SettingCategory_Null;
	State.FocusedSectionId = ComponentSettings_C_SettingId_NullId;
	State.CanTryToReloadDisplaySettings = False;
	State.CanTryToReloadAudioSettings = False;
	State.CreditsEnabled = False;
	State.ProfileEnabled = False;
	State.LatencyTestEnabled = False;
	State.FocusedSettingType = ComponentSettings_C_SettingType_Null;
	State.ScrollIsFocused = False;
	State.ControllerInfoEnabled = False;
	State.CanEditSlider = False;
	State.SettingIsLocked = False;
	State.AlertMessageEndTime = -1;
	State.DraggedSlider.IsDragged = False;
	State.ShowSettingsThatHaveDisplaySettingsPreset = False;
	State.TrackEditorQuickStartEnabled = False;
	State.VoiceChatVoiceDetectionManualSensitivity = False;

	// Check how many vehicles are available
	declare Integer VehiclesNb = 0;
	foreach (Vehicle in ParentApp.ManiaPlanet.UserMgr.MainUserProfile.Inputs_Vehicles) {
		if (Vehicle.ModelName != "Unassigned") {
			VehiclesNb += 1;
		}
	}
	State.VehicleSelectionEnabled = VehiclesNb > 1;

	State = ComponentSettings_Private_RetrieveDisplaySettingsPresets(State);

	foreach (Setting in _Settings) {
		assert(
			!State.Settings.existskey(Setting.Id),
			"Setting '"^Setting.Name^"' use the same id that another setting"
		);
		assert(
			Setting.Privileges.count <= 0 || (
				Setting.Type == ComponentSettings_C_SettingType_Checkbox ||
				Setting.Type == ComponentSettings_C_SettingType_List ||
				Setting.Type == ComponentSettings_C_SettingType_Slider ||
				Setting.Type == ComponentSettings_C_SettingType_Button
			),
			"Privileges check not implemented for this type of setting. Name: '"^Setting.Name^"', Type : "^Setting.Type^"."
		);
		State.Settings[Setting.Id] = Setting;
	}

	State = ComponentSettings_Private_InitializePerformanceQualityModes(State);
	State = ComponentSettings_Private_UpdateSettingsList(State);
	ComponentSettings_Private_UpdateDimmer(State);

	return State;
}

// Update the list of the settings
ComponentSettings_K_State ComponentSettings_Private_SetSettingsList(ComponentSettings_K_State _State, Integer[] _SettingIds, ComponentSettings_K_List _List) {
	declare ComponentSettings_K_State State = _State;

	foreach (SettingId in _SettingIds) {
		if (State.Settings.existskey(SettingId)) {
			State.Settings[SettingId].List = _List;
		}
	}

	State = ComponentSettings_Private_UpdateSettingsList(State);

	return State;
}

// Update the availability of the credits
ComponentSettings_K_State ComponentSettings_Private_EnableCredits(ComponentSettings_K_State _State, Boolean _Enabled) {
	if (_State.CreditsEnabled == _Enabled) return _State;

	declare ComponentSettings_K_State State = _State;
	State.CreditsEnabled = _Enabled;
	State = ComponentSettings_Private_UpdateSettingsList(State);
	return State;
}

// Update the availability of the profile page
ComponentSettings_K_State ComponentSettings_Private_EnableProfile(ComponentSettings_K_State _State, Boolean _Enabled) {
	if (_State.ProfileEnabled == _Enabled) return _State;

	declare ComponentSettings_K_State State = _State;
	State.ProfileEnabled = _Enabled;
	State = ComponentSettings_Private_UpdateSettingsList(State);
	return State;
}

// Update the availability of the latency test
ComponentSettings_K_State ComponentSettings_Private_EnableLatencyTest(ComponentSettings_K_State _State, Boolean _Enabled) {
	if (_State.LatencyTestEnabled == _Enabled) return _State;

	declare ComponentSettings_K_State State = _State;
	State.LatencyTestEnabled = _Enabled;
	State = ComponentSettings_Private_UpdateSettingsList(State);
	return State;
}

// Public API

// Enable or disable the component
Void ComponentSettings_Enable(Boolean _Enabled, Boolean _ResetCategory) {
	ComponentSettings_G_State = ComponentSettings_Private_Enable(ComponentSettings_G_State, _Enabled, False, _ResetCategory);
}
Void ComponentSettings_Enable(Boolean _Enabled) {
	ComponentSettings_Enable(_Enabled, True);
}

// Initialize the component with a list of settings to display
Void ComponentSettings_Initialize(ComponentSettings_K_Setting[] _Settings) {
	ComponentSettings_G_State = ComponentSettings_Private_Initialize(ComponentSettings_G_State, _Settings);
}

// Use navigation events from the manialink
Void ComponentSettings_UseLocalEvents(Boolean _UseLocalEvents) {
	CMGame_Scroll::UseLocalEvents(This, _UseLocalEvents);
	ComponentNavigation_ComponentNavigation::UseLocalEvents(This, _UseLocalEvents);
}

// Update the status of the settings
Void ComponentSettings_SetSettingsStatus(Integer[] _SettingIds, Integer _Status) {
	ComponentSettings_G_State = ComponentSettings_Private_SetSettingsStatus(ComponentSettings_G_State, _SettingIds, _Status);
}
Void ComponentSettings_SetSettingStatus(Integer _SettingId, Integer _Status) {
	ComponentSettings_SetSettingsStatus([_SettingId], _Status);
}

// Update the list of the settings
Void ComponentSettings_SetSettingsList(Integer[] _SettingIds, ComponentSettings_K_List _List) {
	ComponentSettings_G_State = ComponentSettings_Private_SetSettingsList(ComponentSettings_G_State, _SettingIds, _List);
}
Void ComponentSettings_SetSettingList(Integer _SettingId, ComponentSettings_K_List _List) {
	ComponentSettings_SetSettingsList([_SettingId], _List);
}

// Update the availability of the credits
Void ComponentSettings_EnableCredits(Boolean _Enabled) {
	ComponentSettings_G_State = ComponentSettings_Private_EnableCredits(ComponentSettings_G_State, _Enabled);
}

// Update the availability of the profile page
Void ComponentSettings_EnableProfile(Boolean _Enabled) {
	ComponentSettings_G_State = ComponentSettings_Private_EnableProfile(ComponentSettings_G_State, _Enabled);
}

// Update the availability of the latency test
Void ComponentSettings_EnableLatencyTest(Boolean _Enabled) {
	ComponentSettings_G_State = ComponentSettings_Private_EnableLatencyTest(ComponentSettings_G_State, _Enabled);
}

// Display the main menu `ControllerInfo` or the internal `MenuButtonsList`
Void ComponentSettings_EnableControllerInfo(Boolean _Enabled) {
	ComponentSettings_G_State = ComponentSettings_Private_UpdateControllerInfo(ComponentSettings_G_State, ComponentSettings_G_State.FocusedSettingType, ComponentSettings_G_State.ScrollIsFocused, _Enabled, ComponentSettings_G_State.CanEditSlider, ComponentSettings_G_State.SettingIsLocked);
}

// Enable the onboarding mode of settings
Void ComponentSettings_EnableOnboardingMode(Boolean _Enabled) {
	ComponentSettings_G_State.IsOnboardingModeEnabled = _Enabled;
	ComponentSettings_G_State.Controls.ButtonIcon_Back.Visible = !_Enabled;
	CMGame_ExpendableButton::SetVisibilityAndNavigation(ComponentSettings_G_State.Controls.Button_Back, !_Enabled);
	if (_Enabled) {
		CMGame_ExpendableButton::SetText(This, ComponentSettings_G_State.Controls.Button_Apply, "|Settings|Continue");
	} else {
		CMGame_ExpendableButton::SetText(This, ComponentSettings_G_State.Controls.Button_Apply, "|Settings|Apply");
	}
}

// Control the visibility of the background
Void ComponentSettings_SetBackgroundVisibility(Boolean _Visible) {
	ComponentSettings_G_State.Controls.Quad_Background.Visible = _Visible;
}

// Control the visibility of the player card
Void ComponentSettings_SetPlayerCardVisibility(Boolean _Visible) {
	ComponentSettings_G_State.IsPlayerCardForcedHide = !_Visible;
	ComponentSettings_Private_DisplayUserInfo(ComponentSettings_G_State, LocalUser);
}

// Control the visibility of the navigation tabs
Void ComponentSettings_SetNavigationTabsVisibility(Boolean _Visible) {
	ComponentSettings_G_State.Controls.NavigationTabs_Categories.Visible = _Visible;
}

***MainInit***
***
declare CMlFrame ComponentSettings_Frame_Global;
***

***MainStart***
***
ComponentSettings_Frame_Global <=> (Page.GetFirstChild("ComponentSettings_frame-global") as CMlFrame);
ComponentSettings_G_State.Controls.NavigationTabs_Categories <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_navigationtabs-categories") as CMlFrame);
ComponentSettings_G_State.Controls.Scroll_Settings <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_scroll-settings") as CMlFrame);
ComponentSettings_G_State.Controls.Label_InfoTitle <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_label-info-title") as CMlLabel);
ComponentSettings_G_State.Controls.Label_InfoDescription <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_label-info-description") as CMlLabel);
ComponentSettings_G_State.Controls.Label_InfoAlert <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_label-info-alert") as CMlLabel);
ComponentSettings_G_State.Controls.ButtonIcon_Back <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_button-icon-back") as CMlFrame);
ComponentSettings_G_State.Controls.Button_Back <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_button-back") as CMlFrame);
ComponentSettings_G_State.Controls.Button_Apply <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_button-apply") as CMlFrame);
ComponentSettings_G_State.Controls.Frame_PlayerCard <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_frame-player-card") as CMlFrame);
ComponentSettings_G_State.Controls.Quad_PlayerFlag <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_quad-player-card-flag") as CMlQuad);
ComponentSettings_G_State.Controls.PlayerName_Name <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_playername-player-card-name") as CMlFrame);
ComponentSettings_G_State.Controls.Label_PlayerZone <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_label-player-card-zone") as CMlLabel);
ComponentSettings_G_State.Controls.Frame_OnlineServicesStatusCard <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_online-services-status-card") as CMlFrame);
ComponentSettings_G_State.Controls.PopUp_DiscardChanges <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_pop-up-discard-changes") as CMlFrame);
ComponentSettings_G_State.Controls.ButtonList_Settings <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_button-list-settings") as CMlFrame);
ComponentSettings_G_State.Controls.Quad_Dimmer <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_quad-dimmer") as CMlQuad);
ComponentSettings_G_State.Controls.Label_RestartRequired <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_label-restart-required") as CMlLabel);
ComponentSettings_G_State.Controls.Quad_PendingChanges <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_quad-pending-changes") as CMlQuad);
ComponentSettings_G_State.Controls.Quad_Background <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_quad-background") as CMlQuad);
ComponentSettings_G_State.Controls.PopUp_ActivateKey <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_popupmultichoice-activate-key") as CMlFrame);
ComponentSettings_G_State.Controls.Frame_AreaCalibration <=> (ComponentSettings_Frame_Global.GetFirstChild("ComponentSettings_frame-area-calibration") as CMlFrame);

ComponentSettings_PendingEvents = [];

ComponentSettings_G_State = ComponentSettings_Private_Initialize(ComponentSettings_G_State, ComponentSettings_C_Settings);
ComponentSettings_G_State = ComponentSettings_Private_Enable(ComponentSettings_G_State, False, True, True);

ComponentNavigation_ComponentNavigation::Focus(This, ComponentSettings_Frame_Global); //< Focus `C_NavGroup_Global`
ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main"), ComponentSettings_G_State.Controls.Button_Back);

if (ComponentSettings_Platform::IsMicrosoft(System)) { // Crossplay setting read only on Xbox (can be set in the console parameters)
	ComponentSettings_SetSettingStatus(ComponentSettings_C_SettingId_SystemNetworkCrossPlay, ComponentSettings_C_SettingStatus_MissingPermission);
}

if (ParentApp.ManiaPlanet.SystemSettings_SkipIntro_ReadOnly) { // AutoSkipStartScreens not available on PS5
	ComponentSettings_SetSettingStatus(ComponentSettings_C_SettingId_SystemAutoSkipStartScreens, ComponentSettings_C_SettingStatus_Hidden);
}

if (ComponentSettings_Platform::IsPC(System)) { // PTT available on PC only for now
	ComponentSettings_SetSettingList(ComponentSettings_C_SettingId_SoundVoiceChatVoiceDetectionMode, ComponentSettings_C_List_VoiceChat_VoiceDetectionMode_PC);
}
***

***MainLoop***
***
ComponentSettings_PendingEvents = [];

if (ComponentSettings_G_State.ComponentEnabled) {
	// External code (eg: the old settings page)
	// can unload the `DisplaySettings` or `AudioSettings` objects
	// while this page still need them. If this is the case, we try to reload them.
	if (ParentApp.ManiaPlanet.DisplaySettings == Null && ComponentSettings_G_State.CanTryToReloadDisplaySettings) {
		ParentApp.ManiaPlanet.DisplaySettings_LoadCurrent();
	}
	if (ParentApp.ManiaPlanet.AudioSettings == Null && ComponentSettings_G_State.CanTryToReloadAudioSettings) {
		ParentApp.ManiaPlanet.AudioSettings_LoadCurrent();
	}

	// Delay the textfield edition reset by two frames
	// to prevent the user from editing the setting
	// again if they click on the line while already
	// editing the setting
	if (ComponentSettings_G_State.CanResetIsEditingTextField > 0) {
		ComponentSettings_G_State.CanResetIsEditingTextField -= 1;
		if (ComponentSettings_G_State.CanResetIsEditingTextField <= 0) {
			ComponentSettings_G_State.IsEditingTextField = ComponentSettings_C_SettingId_NullId;
		}
	}

	// The user finished editing bindings
	if (ComponentSettings_G_State.IsWaitingBind && ParentApp.ManiaPlanet.Dialog_IsFinished) {
		ComponentSettings_G_State.IsWaitingBind = False;
		// Reload bindings and refresh display
		ComponentSettings_G_State = ComponentSettings_Private_SetControlControllerId(ComponentSettings_G_State, ComponentSettings_G_State.ControlControllerId);
		ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
		ComponentSettings_G_State = ComponentSettings_Private_UpdateControllerInfo(ComponentSettings_G_State);
		ComponentSettings_Private_UpdateDimmer(ComponentSettings_G_State);

		if (ComponentSettings_G_State.IsWaitingBind_PlaySound) {
			ComponentSettings_G_State.IsWaitingBind_PlaySound = False;
			if (ParentApp.ManiaPlanet.Dialog_Success) {
				CMGame_MenuSounds::PlaySound(This, CMGame_MenuSounds::C_Sound_Select);
			} else {
				CMGame_MenuSounds::PlaySound(This, CMGame_MenuSounds::C_Sound_Cancel);
			}
		}
	}

	// Window size updated
	if (
		ParentApp.ManiaPlanet.DisplaySettings != Null &&
		ComponentSettings_G_State.DisplayedCategory == ComponentSettings_C_SettingCategory_Video &&
		ComponentSettings_G_State.WindowSize != ParentApp.ManiaPlanet.DisplaySettings.WindowSize
	) {
		// Update the window size in the text fields if the user did not modify them already
		if (
			ComponentSettings_G_State.Settings.existskey(ComponentSettings_C_SettingId_VideoWindowResolutionX) &&
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_VideoWindowResolutionX].New.ValueText == ""^ComponentSettings_G_State.WindowSize.X
		) {
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_VideoWindowResolutionX].New.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.WindowSize.X;
		}
		if (
			ComponentSettings_G_State.Settings.existskey(ComponentSettings_C_SettingId_VideoWindowResolutionY) &&
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_VideoWindowResolutionY].New.ValueText == ""^ComponentSettings_G_State.WindowSize.Y
		) {
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_VideoWindowResolutionY].New.ValueText = ""^ParentApp.ManiaPlanet.DisplaySettings.WindowSize.Y;
		}

		ComponentSettings_G_State.WindowSize = ParentApp.ManiaPlanet.DisplaySettings.WindowSize;
		ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
	}

	// Sound or music volume updated
	if (ComponentSettings_G_State.DisplayedCategory == ComponentSettings_C_SettingCategory_Sound) {
		// Update the volumes in the sliders if the user did not modify them already
		if (
			ComponentSettings_G_State.MusicVolume != ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume &&
			ComponentSettings_G_State.Settings.existskey(ComponentSettings_C_SettingId_SoundMusicVolume) &&
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SoundMusicVolume].New.ValueReal == ComponentSettings_G_State.MusicVolume
		) {
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SoundMusicVolume].New.ValueReal = ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume;
			ComponentSettings_G_State.MusicVolume = ParentApp.ManiaPlanet.AudioSettings_MasterMusicVolume;
			ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
		}
		if (
			ComponentSettings_G_State.MasterVolume != ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume &&
			ComponentSettings_G_State.Settings.existskey(ComponentSettings_C_SettingId_SoundMasterVolume) &&
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SoundMasterVolume].New.ValueReal == ComponentSettings_G_State.MasterVolume
		) {
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SoundMasterVolume].New.ValueReal = ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume;
			ComponentSettings_G_State.MasterVolume = ParentApp.ManiaPlanet.AudioSettings_MasterSoundVolume;
			ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
		}
		if (
			ComponentSettings_G_State.EffectVolume != ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene &&
			ComponentSettings_G_State.Settings.existskey(ComponentSettings_C_SettingId_SoundEffectVolume) &&
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SoundEffectVolume].New.ValueReal == ComponentSettings_G_State.EffectVolume
		) {
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SoundEffectVolume].New.ValueReal = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene;
			ComponentSettings_G_State.EffectVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Scene;
			ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
		}
		if (
			ComponentSettings_G_State.UIVolume != ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui &&
			ComponentSettings_G_State.Settings.existskey(ComponentSettings_C_SettingId_SoundUIVolume) &&
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SoundUIVolume].New.ValueReal == ComponentSettings_G_State.UIVolume
		) {
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SoundUIVolume].New.ValueReal = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui;
			ComponentSettings_G_State.UIVolume = ParentApp.ManiaPlanet.AudioSettings_SoundVolume_Ui;
			ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
		}
	}

	// A controller device has been plugged/unplugged
	// The probability for the same number of devices to be plugged and unplugged at the same time is so low
	// that we don't need to check the content of the array
	if (ComponentSettings_G_State.InputPadsCount != Input.Pads.count) {
		ComponentSettings_G_State.InputPadsCount = Input.Pads.count;

		if (ComponentSettings_G_State.Settings.existskey(ComponentSettings_C_SettingId_ControlDevice)) {
			declare ComponentSettings_K_Setting UpdatedSetting = ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_ControlDevice];
			UpdatedSetting.List.Labels = [];
			UpdatedSetting.List.ValuesInteger = [];
			declare Boolean OldControlControllerIdExists = False;
			declare Integer NewControlControllerId = -1;
			declare Integer NewControlControllerKey = 0;
			declare Integer LowerIdleDuration = -1;
			foreach (Key => Pad in Input.Pads) {
				UpdatedSetting.List.ValuesInteger.add(Pad.ControllerId);
				UpdatedSetting.List.Labels.add(ComponentSettings_TL::GetTranslatedText(Pad.ModelName));
				// Find the last used controller
				if (LowerIdleDuration == -1 || Pad.IdleDuration < LowerIdleDuration) {
					LowerIdleDuration = Pad.IdleDuration;
					NewControlControllerId = Pad.ControllerId;
					NewControlControllerKey = Key;
				}
				if (Pad.ControllerId == ComponentSettings_G_State.ControlControllerId) {
					OldControlControllerIdExists = True;
					UpdatedSetting.New.ValueInteger = Key;
				}
			}
			if (!OldControlControllerIdExists) {
				ComponentSettings_G_State.ControlControllerId = NewControlControllerId;
				UpdatedSetting.New.ValueInteger = NewControlControllerKey;
			}
			if (UpdatedSetting.List.Labels.count <= 0) {
				UpdatedSetting.List.ValuesInteger.add(ComponentSettings_G_State.ControlControllerId);
				//L16N [Settings] The game did not find any connected controller devices
				UpdatedSetting.List.Labels.add(_("|InputDevice|No devices"));
			}
			ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_ControlDevice] = UpdatedSetting;

			ComponentSettings_G_State = ComponentSettings_Private_SetControlControllerId(ComponentSettings_G_State, ComponentSettings_G_State.ControlControllerId);
			if (ComponentSettings_G_State.DisplayedCategory == ComponentSettings_C_SettingCategory_Controls) {
				ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
			}
		}
	}

	// Alert message finished
	if (ComponentSettings_G_State.AlertMessageEndTime >= 0 && ComponentSettings_G_State.AlertMessageEndTime <= Now) {
		ComponentSettings_G_State = ComponentSettings_Private_HideAlertMessage(ComponentSettings_G_State);
	}

	// Update TextField associated to the slider
	if (ComponentSettings_G_State.DraggedSlider.IsDragged) {
		CMGame_TextField::SetValue(This,
			ComponentSettings_G_State.DraggedSlider.TextField,
			ComponentSettings_Private_SliderValueToText(ComponentSettings_G_State.DraggedSlider.Slider, ComponentSettings_G_State.DraggedSlider.SliderType),
			False
		);
	}

	// Privileges check
	if (!ComponentSettings_Privileges::Check_IsComplete(ComponentSettings_G_State.PrivilegesCheck.Check)) {
		ComponentSettings_G_State.PrivilegesCheck.Check = ComponentSettings_Privileges::Check_Update(ComponentSettings_G_State.PrivilegesCheck.Check);
		if (ComponentSettings_Privileges::Check_IsComplete(ComponentSettings_G_State.PrivilegesCheck.Check)) {
			ComponentSettings_G_State.PrivilegesCheck.Check = ComponentSettings_Privileges::Check_Destroy(ComponentSettings_G_State.PrivilegesCheck.Check);
			if (ComponentSettings_Privileges::Check_HasPrivilege(ComponentSettings_G_State.PrivilegesCheck.Check)) {
				switch (ComponentSettings_G_State.PrivilegesCheck.SettingType) {
					case ComponentSettings_C_SettingType_Checkbox: {
						ComponentSettings_G_State = ComponentSettings_Private_SelectSettingCheckbox(ComponentSettings_G_State, ComponentSettings_G_State.PrivilegesCheck);
					}
					case ComponentSettings_C_SettingType_List: {
						ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingListValue(ComponentSettings_G_State, ComponentSettings_G_State.PrivilegesCheck);
					}
					case ComponentSettings_C_SettingType_Slider: {
						ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingSliderValue(ComponentSettings_G_State, ComponentSettings_G_State.PrivilegesCheck);
					}
					case ComponentSettings_C_SettingType_Button: {
						ComponentSettings_G_State = ComponentSettings_Private_SelectSettingButton(ComponentSettings_G_State, ComponentSettings_G_State.PrivilegesCheck);
					}
				}
			}
		}
	}

	foreach (Event in ComponentNavigation_ComponentNavigation::GetPendingEvents(This)) {
		switch (Event.Type) {
			case ComponentNavigation_ComponentNavigation::C_EventType_NavigateInput: {
				if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-settings-global")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::AppMenu) {
						ComponentSettings_G_State = ComponentSettings_Private_Select(ComponentSettings_G_State, ComponentSettings_G_State.Controls.Button_Apply);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						ComponentSettings_G_State = ComponentSettings_Private_Select(ComponentSettings_G_State, ComponentSettings_G_State.Controls.Button_Back);
					}
				} else if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-settings-main")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						ComponentSettings_G_State = ComponentSettings_Private_Select(ComponentSettings_G_State, Event.To);
					} else {
						ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, Event.From, Event.To);
					}
				}
			}
			case ComponentNavigation_ComponentNavigation::C_EventType_NavigateMouse: {
				if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-settings-main")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						ComponentSettings_G_State = ComponentSettings_Private_Select(ComponentSettings_G_State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, Event.From, Event.To);
					}
				} else if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-settings-mouseonly")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						ComponentSettings_G_State = ComponentSettings_Private_Select(ComponentSettings_G_State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, Event.From, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, Event.From, Event.To);
					}
				}
			}
		}
	}

	foreach (Event in CMGame_LatencyTest::GetPendingEvents(This)) {
		switch (Event.Type) {
			case CMGame_LatencyTest::C_EventType_TryAgain: {
				if (Event.LatencyTest.ControlId == "menu-libs-latency-test_frame-latency-test") {
					//L16N [Settings] Error message displayed when the player has failed the latency test
					ComponentSettings_G_State = ComponentSettings_Private_DisplayErrorMessage(ComponentSettings_G_State, _("Your inputs were inconsistent, so we were unable to accurately calculate the latency of your device. Please check your monitor or TV latency settings and try to be as regular as possible with your inputs!"));
					ComponentSettings_G_State.AlertMessageEndTime = Now + 3*ComponentSettings_C_AlertMessageDuration;
				}
			}
		}
	}

	foreach (Event in Trackmania_NavigationTabs::GetPendingEvents(This)) {
		switch (Event.Type) {
			case Trackmania_NavigationTabs::C_EventType_Select: {
				if (Event.Frame_NavigationTabs == ComponentSettings_G_State.Controls.NavigationTabs_Categories) {
					ComponentSettings_G_State = ComponentSettings_Private_SetDisplayedCategory(ComponentSettings_G_State, Event.CurrentTab, True);
				}
			}
		}
	}

	foreach (Event in CMGame_TextField::GetPendingEvents(This)) {
		switch (Event.Type) {
			case CMGame_TextField::C_EventType_Update: {
				if (Event.TextField != Null) {
					switch (Event.TextField.ControlId) {
						case "ComponentSettings_textfield-value": {
							ComponentSettings_G_State.CanResetIsEditingTextField = ComponentSettings_C_ResetTextFieldEditionDelay;
							declare Integer ComponentSettings_DisplayedSettingId for Event.TextField;
							declare Text ValidatedValue = ComponentSettings_Private_ValidateTextFieldValue(Event.TextField, ComponentSettings_DisplayedSettingId);
							ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingValue(ComponentSettings_G_State, ComponentSettings_DisplayedSettingId, ComponentSettings_K_Values { ValueText = ValidatedValue });

							// If the user entered a custom value for the network speed
							// Switch to the custom option in the network speed list
							switch (ComponentSettings_DisplayedSettingId) {
								case ComponentSettings_C_SettingId_SystemNetworkSpeedUpload: {
									if (
										ComponentSettings_G_State.Settings.existskey(ComponentSettings_C_SettingId_SystemNetworkSpeed) &&
										ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SystemNetworkSpeed].List.ValuesNetworkSpeed.exists(CManiaPlanet::ENetworkSpeed::Custom)
									) {
										ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SystemNetworkSpeed].New.ValueInteger = ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SystemNetworkSpeed].List.ValuesNetworkSpeed.keyof(CManiaPlanet::ENetworkSpeed::Custom);
										ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
									}
								}
								case ComponentSettings_C_SettingId_SystemNetworkSpeedDownload: {
									if (
										ComponentSettings_G_State.Settings.existskey(ComponentSettings_C_SettingId_SystemNetworkSpeed) &&
										ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SystemNetworkSpeed].List.ValuesNetworkSpeed.exists(CManiaPlanet::ENetworkSpeed::Custom)
									) {
										ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SystemNetworkSpeed].New.ValueInteger = ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SystemNetworkSpeed].List.ValuesNetworkSpeed.keyof(CManiaPlanet::ENetworkSpeed::Custom);
										ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
									}
								}
							}

							if (Event.Value != ValidatedValue) {
								CMGame_TextField::SetValue(This, Event.TextField, ValidatedValue, False);
							}

							CMGame_MenuSounds::PlaySound(This, CMGame_MenuSounds::C_Sound_Select);

							// Open joinlink
							if (ComponentSettings_DisplayedSettingId == ComponentSettings_C_SettingId_SystemJoinLink && ValidatedValue != "") {
								// Reset voice chat channel if needed
								if (ParentApp.VoiceChat.Manual_Channel != "") {
									ParentApp.VoiceChat.Manual_Channel = "";
									ParentApp.VoiceChat.Manual_ClearUsers();
									ParentApp.VoiceChat.NewRemoteUser_DefaultMuteSetting = CGameUserVoiceChat::EMuteSetting::NotMuted;
								}
								declare Text JoinLink = ComponentSettings_TL::Replace(ValidatedValue, "#join", "#qjoin");
								JoinLink = ComponentSettings_TL::Replace(JoinLink, "#spectate", "#qspectate");
								ParentApp.ManiaPlanet.OpenLink(JoinLink, CManiaPlanet::ELinkType::ManialinkBrowser);
							}

							// Create a request to check the given key or activation code
							if (ComponentSettings_DisplayedSettingId == ComponentSettings_C_SettingId_ProfileActivateKey && ValidatedValue != "" && !ComponentSettings_G_State.ActivateKeyPopUpDisplayed) {
								declare Text[] Match = ComponentSettings_TL::RegexMatch("....-....-....-....-....", ValidatedValue, "");
								if (Match.count > 0 && ComponentSettings_TL::Length(Match[0]) == ComponentSettings_TL::Length(ValidatedValue)) {
									ComponentSettings_G_Request_PostCheckKey = ComponentSettings_Http::DestroyAndCreate(ComponentSettings_G_Request_PostCheckKey, ComponentSettings_ActivateKeyAPI::PostCheck(ValidatedValue));
								} else {
									//L16N [Settings] Error message displayed when the player entered a key with the wrong format
									ComponentSettings_G_State = ComponentSettings_Private_DisplayErrorMessage(ComponentSettings_G_State, _("This Key or Activation Code has the wrong format.\nExpected format: XXXX-XXXX-XXXX-XXXX-XXXX"));
								}
							}
						}
						case "ComponentSettings_textfield-slider-value": {
							ComponentSettings_G_State.CanResetIsEditingTextField = ComponentSettings_C_ResetTextFieldEditionDelay;
							CMGame_MenuSounds::PlaySound(This, CMGame_MenuSounds::C_Sound_Select);

							declare Integer ComponentSettings_DisplayedSettingId for Event.TextField;
							declare ComponentSettings_K_Setting Setting = ComponentSettings_G_State.Settings.get(ComponentSettings_DisplayedSettingId, ComponentSettings_C_Setting_Null);
							if (Setting.Id == ComponentSettings_DisplayedSettingId && Setting.Type == ComponentSettings_C_SettingType_Slider) {
								declare CMlFrame ComponentSettings_Slider_Value for Event.TextField;
								switch (Setting.Slider.Type) {
									case ComponentSettings_C_SliderType_Color: {
										CMGame_Slider_SetValueColor(ComponentSettings_Slider_Value, ComponentSettings_CL::HexToRgb(Event.Value));
									}
									case ComponentSettings_C_SliderType_Integer: {
										CMGame_Slider_SetValueInteger(ComponentSettings_Slider_Value, ComponentSettings_TL::ToInteger(Event.Value));
									}
									default: { //< ComponentSettings_C_SliderType_Real
										CMGame_Slider_SetValueReal(ComponentSettings_Slider_Value, ComponentSettings_TL::ToReal(Event.Value));
									}
								}

								declare CMlFrame ComponentSettings_Frame_SettingLine for Event.TextField;
								ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingSliderValue(
									ComponentSettings_G_State,
									Setting,
									ComponentSettings_Frame_SettingLine,
									0
								);
							}
						}
					}
				}
			}
		}
	}

	foreach (Event in CMGame_Slider_PendingEvents) {
		switch (Event.Type) {
			case CMGame_Slider_C_EventType_CursorDragStart: {
				if (
					Event.Slider != Null &&
					Event.Slider.ControlId == "ComponentSettings_slider-value"
				) {
					declare CMlFrame ComponentSettings_TextField_SliderValue for Event.Slider;
					declare Integer ComponentSettings_DisplayedSettingId for Event.Slider;
					declare ComponentSettings_K_Setting Setting = ComponentSettings_G_State.Settings.get(ComponentSettings_DisplayedSettingId, ComponentSettings_C_Setting_Null);
					if (Setting.Slider.DisplayTextField) {
						ComponentSettings_G_State.DraggedSlider.Slider = Event.Slider;
						ComponentSettings_G_State.DraggedSlider.TextField = ComponentSettings_TextField_SliderValue;
						ComponentSettings_G_State.DraggedSlider.SliderType = Setting.Slider.Type;
						ComponentSettings_G_State.DraggedSlider.IsDragged = True;
					}
				}
			}
			case CMGame_Slider_C_EventType_CursorDragStop: {
				if (
					Event.Slider != Null &&
					Event.Slider.ControlId == "ComponentSettings_slider-value"
				) {
					declare CMlFrame ComponentSettings_Frame_SettingLine for Event.Slider;
					declare Integer ComponentSettings_DisplayedSettingId for Event.Slider;
					ComponentSettings_G_State.DraggedSlider.IsDragged = False;
					ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingSliderValue(
						ComponentSettings_G_State,
						ComponentSettings_G_State.Settings.get(ComponentSettings_DisplayedSettingId, ComponentSettings_C_Setting_Null),
						ComponentSettings_Frame_SettingLine,
						0
					);
				}
			}
		}
	}

	foreach (Event in CMGame_Scroll::GetPendingEvents(This)) {
		if (Event.Scroll == ComponentSettings_G_State.Controls.Scroll_Settings) {
			switch (Event.Type) {
				case CMGame_Scroll::C_EventType_Update: {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						ComponentSettings_Private_DisplaySettingLine(ComponentSettings_G_State, Key, Frame_Element);
						Frame_Element.Visible = True;
					}
					foreach (Frame_Element in Event.ElementsHidden) {
						Frame_Element.Visible = False;
					}
				}
				case CMGame_Scroll::C_EventType_Focus: {
					ComponentSettings_G_State = ComponentSettings_Private_FocusSettingsLine(ComponentSettings_G_State, Event.From, Event.FromKey, False, Event.PlayFocusAnimation);
					if (Event.To != Null && Event.IsMouse) {
						declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main");
						if (FocusedControl != ComponentSettings_G_State.Controls.Scroll_Settings && !ComponentNavigation_ComponentNavigation::IsLocked(ComponentSettings_G_State.Controls.Scroll_Settings)) {
							ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, FocusedControl, ComponentSettings_G_State.Controls.Scroll_Settings);
						}
					}
					if (CMGame_Scroll::IsFocused(ComponentSettings_G_State.Controls.Scroll_Settings)) {
						ComponentSettings_G_State = ComponentSettings_Private_FocusSettingsLine(ComponentSettings_G_State, Event.To, Event.ToKey, True, Event.PlayFocusAnimation);
						ComponentSettings_Private_DisplaySettingInfo(ComponentSettings_G_State, Event.ToKey);
					} else {
						ComponentSettings_Private_DisplaySettingInfo(ComponentSettings_G_State, -1);
						ComponentSettings_G_TTSContextIdent_Section = ParentApp.TTS_Context_Leave(ComponentSettings_G_TTSContextIdent_Section);
						ComponentSettings_G_TTSContextIdent_Setting = ParentApp.TTS_Context_Leave(ComponentSettings_G_TTSContextIdent_Setting);
						ComponentSettings_G_State.PreviouslyFocusedSectionId = -1;
						ComponentSettings_G_State.PreviouslyFocusedSettingId = -1;
					}
				}
				case CMGame_Scroll::C_EventType_ReachLimit: {
					if (CMGame_Scroll::IsFocused(ComponentSettings_G_State.Controls.Scroll_Settings)) {
						if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Right) {
							declare ComponentSettings_K_Setting Setting = ComponentSettings_Private_GetSettingFromScroll(ComponentSettings_G_State, Event.FromKey);
							if (Setting.Type == ComponentSettings_C_SettingType_Slider) {
								ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingSliderValue(ComponentSettings_G_State, Setting, Event.From, 1);
							} else if (Setting.Type == ComponentSettings_C_SettingType_List) {
								if (Event.From != Null) {
									ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingListValue(ComponentSettings_G_State, Event.From.GetFirstChild("ComponentSettings_frame-type-list") as CMlFrame, Setting.Id, 1, True);
								}
							} else if (!ComponentNavigation_ComponentNavigation::IsLocked(ComponentSettings_G_State.Controls.Button_Apply)) {
								ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main"), ComponentSettings_G_State.Controls.Button_Apply);
							}
						} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Left) {
							declare ComponentSettings_K_Setting Setting = ComponentSettings_Private_GetSettingFromScroll(ComponentSettings_G_State, Event.FromKey);
							if (Setting.Type == ComponentSettings_C_SettingType_Slider) {
								ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingSliderValue(ComponentSettings_G_State, Setting, Event.From, -1);
							} else if (Setting.Type == ComponentSettings_C_SettingType_List) {
								if (Event.From != Null) {
									ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingListValue(ComponentSettings_G_State, Event.From.GetFirstChild("ComponentSettings_frame-type-list") as CMlFrame, Setting.Id, -1, True);
								}
							} else if (!ComponentNavigation_ComponentNavigation::IsLocked(ComponentSettings_G_State.Controls.Button_Back)) {
								ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main"), ComponentSettings_G_State.Controls.Button_Back);
							}
						} else if (Event.NavAction == CMlScriptEvent::EMenuNavAction::Down) {
							if (ComponentSettings_G_State.LastBottomButtonFocused != Null && !ComponentNavigation_ComponentNavigation::IsLocked(ComponentSettings_G_State.LastBottomButtonFocused)) {
								ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main"), ComponentSettings_G_State.LastBottomButtonFocused);
							} else if (!ComponentNavigation_ComponentNavigation::IsLocked(ComponentSettings_G_State.Controls.Button_Back)) {
								ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main"), ComponentSettings_G_State.Controls.Button_Back);
							} else if (!ComponentNavigation_ComponentNavigation::IsLocked(ComponentSettings_G_State.Controls.Button_Apply)) {
								ComponentSettings_G_State = ComponentSettings_Private_Focus(ComponentSettings_G_State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-settings-main"), ComponentSettings_G_State.Controls.Button_Apply);
							}
						}
					}
				}
				case CMGame_Scroll::C_EventType_Select: {
					ComponentSettings_G_State = ComponentSettings_Private_SelectSettingLine(ComponentSettings_G_State, Event.ToKey, Event.To, Event.IsMouse);
				}
			}
		}
	}

	foreach (Event in Trackmania_PopUpMultiChoice::GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice.Id == ComponentSettings_G_State.Controls.PopUp_DiscardChanges.Id) {
			switch (Event.Type) {
				case Trackmania_PopUpMultiChoice::C_EventType_Select: {
					if (Event.SelectedIndex == ComponentSettings_C_PopUpDiscardChangesChoices_Yes) {
						// Restore old settings value
						if (ComponentSettings_C_DiscardSettingsOnTabChange) {
							if (ComponentSettings_G_State.ScrollSettingIds.existskey(ComponentSettings_G_State.DisplayedCategory)) {
								declare Integer[] CategorySettingIds = ComponentSettings_G_State.ScrollSettingIds[ComponentSettings_G_State.DisplayedCategory];
								foreach (SettingId in CategorySettingIds) {
									declare ComponentSettings_K_Setting UpdatedSetting = ComponentSettings_G_State.Settings.get(SettingId, ComponentSettings_C_Setting_Null);
									ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingValue(ComponentSettings_G_State, UpdatedSetting.Id, UpdatedSetting.Old);
								}
							}
						} else {
							declare ComponentSettings_K_Setting[Integer] TmpSettings = ComponentSettings_G_State.Settings;
							foreach (Setting in TmpSettings) {
								ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingValue(ComponentSettings_G_State, Setting.Id, Setting.Old);
							}
						}

						switch (ComponentSettings_G_State.AfterDiscardPopUp.Action) {
							case ComponentSettings_C_ActionAfterDiscardPopUp_GoToCategory: {
								ComponentSettings_G_State = ComponentSettings_Private_SetDisplayedCategory(ComponentSettings_G_State, ComponentSettings_G_State.AfterDiscardPopUp.DisplayedCategory, False);
							}
							case ComponentSettings_C_ActionAfterDiscardPopUp_CloseSettings: {
								ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
								ComponentSettings_PendingEvents.add(ComponentSettings_K_Event {
									Type = ComponentSettings_C_EventType_Back
								});
							}
							case ComponentSettings_C_ActionAfterDiscardPopUp_OpenCredits: {
								ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
								ComponentSettings_PendingEvents.add(ComponentSettings_K_Event {
									Type = ComponentSettings_C_EventType_OpenCredits
								});
							}
							case ComponentSettings_C_ActionAfterDiscardPopUp_OpenProfile: {
								ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
								ComponentSettings_PendingEvents.add(ComponentSettings_K_Event {
									Type = ComponentSettings_C_EventType_OpenProfile
								});
							}
							default: {
								ComponentSettings_G_State = ComponentSettings_Private_DisplayCategory(ComponentSettings_G_State);
							}
						}
					}
					ComponentSettings_G_State = ComponentSettings_Private_DisplayDiscardChangesPopUp(ComponentSettings_G_State, False);
				}
				case Trackmania_PopUpMultiChoice::C_EventType_Display: {
					if (!Event.PopUpMultiChoice.Visible) {
						ComponentSettings_G_State = ComponentSettings_Private_DisplayDiscardChangesPopUp(ComponentSettings_G_State, False);
					}
				}
			}
		} else if (Event.PopUpMultiChoice == ComponentSettings_G_State.Controls.PopUp_ActivateKey) {
			switch (Event.Type) {
				case Trackmania_PopUpMultiChoice::C_EventType_Display: {
					if (!Event.PopUpMultiChoice.Visible) {
						ComponentSettings_G_State = ComponentSettings_Private_DisplayActivateKeyPopUp(ComponentSettings_G_State, False);
					}
				}
				case Trackmania_PopUpMultiChoice::C_EventType_Select: {
					switch (Event.SelectedIndex) {
						case 1: {
							ComponentSettings_G_Request_PostActivateKey = ComponentSettings_Http::DestroyAndCreate(
								ComponentSettings_G_Request_PostActivateKey,
								ComponentSettings_ActivateKeyAPI::PostActivate(ComponentSettings_G_State.Settings.get(ComponentSettings_C_SettingId_ProfileActivateKey, ComponentSettings_C_Setting_Null).New.ValueText)
							);
						}
					}
				}
			}
		}
	}

	// The crossplay setting can be changed in the console parameters on Xbox platforms
	if (ComponentSettings_Platform::IsMicrosoft(System) && ComponentSettings_G_State.IsCrossPlayActive != Trackmania_UserStore::IsCrossPlayActive()) {
		ComponentSettings_G_State = ComponentSettings_Private_UpdateSettingValue(
			ComponentSettings_G_State,
			ComponentSettings_C_SettingId_SystemNetworkCrossPlay,
			ComponentSettings_K_Values {
				ValueBoolean = Trackmania_UserStore::IsCrossPlayActive()
			}
		);
		if (ComponentSettings_G_State.DisplayedCategory == ComponentSettings_C_SettingCategory_System) {
			ComponentSettings_G_State = ComponentSettings_Private_SetDisplayedCategory(ComponentSettings_G_State, ComponentSettings_G_State.DisplayedCategory, False, False, False);
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				switch (Event.CustomEventType) {
					case Trackmania_OnlineServicesStatusStore::C_Event_OnlineServicesStatusUpdated: {
						if (ComponentSettings_G_State.Settings.existskey(ComponentSettings_C_SettingId_SystemOnlineServicesStatus)) {
							ComponentSettings_G_State.Settings[ComponentSettings_C_SettingId_SystemOnlineServicesStatus].ButtonText = Trackmania_OnlineServicesStatusStore::GetCurrentStatusNameAndIcon();
							ComponentOnlineServicesStatusCard_DisplayOnlineServicesStatus(Trackmania_OnlineServicesStatusStore::GetCurrentStatus(), ComponentSettings_G_State.Controls.Frame_OnlineServicesStatusCard);
							if (ComponentSettings_G_State.DisplayedCategory == ComponentSettings_C_SettingCategory_System) {
								ComponentSettings_G_State = ComponentSettings_Private_SetDisplayedCategory(ComponentSettings_G_State, ComponentSettings_G_State.DisplayedCategory, False, False, False);
							}
						}
					}
				}
			}
		}
	}

	/* Check key request */
	if (ComponentSettings_Http::IsInitialized(ComponentSettings_G_Request_PostCheckKey)) {
		ComponentSettings_G_Request_PostCheckKey = ComponentSettings_Http::Update(ComponentSettings_G_Request_PostCheckKey);
		if (!ComponentSettings_Http::IsRunning(ComponentSettings_G_Request_PostCheckKey)) {
			if (ComponentSettings_Http::IsSuccess(ComponentSettings_G_Request_PostCheckKey)) {
				declare Response = ComponentSettings_ActivateKeyAPI::GetResponseFromPostCheck(ComponentSettings_G_Request_PostCheckKey);
				if (Response.Status == ComponentSettings_ActivateKeyAPI::C_Status_AlreadyActivated) {
					//L16N [Settings] Error message displayed when the player entered a key that has already been used.
					ComponentSettings_G_State = ComponentSettings_Private_DisplayErrorMessage(ComponentSettings_G_State, _("This Key or Activation Code has already been activated."));
				} else {
					Trackmania_PopUpMultiChoice::SetDescription(This, ComponentSettings_G_State.Controls.PopUp_ActivateKey, [
						//L16N [Settings] Ask the player if they really want to activate the key. %1 will be replaced by the type of key or activation code. e.g. "Do you really want to register this 'Club time limited' key for the current account?"
						Trackmania_PopUpMultiChoice::CreateDescriptionPart(ComponentSettings_TL::Compose(_("Do you really want to register this '%1' key for the current account?"), Response.Message), <130., 20.>, 3., "GameFontSemiBold", "$t$i", <1., 1., 1.>, False),
						//L16N [Settings] Warn the player that a key activation cannot be undone.
						Trackmania_PopUpMultiChoice::CreateDescriptionPart(_("This cannot be changed once the activation is complete"), <130., 15.>, 2., "GameFontSemiBold", "$t$i", <0.431373, 0.980392, 0.627451>, False)
					]);
					ComponentSettings_G_State = ComponentSettings_Private_DisplayActivateKeyPopUp(ComponentSettings_G_State, True);
				}
			} else if (ComponentSettings_G_Request_PostCheckKey.StatusCode == ComponentSettings_ActivateKeyAPI::C_StatusCode_InvalidKey) {
				//L16N [Settings] Error message displayed when the player entered an unvalid key.
				ComponentSettings_G_State = ComponentSettings_Private_DisplayErrorMessage(ComponentSettings_G_State, _("This Key or Activation Code is not valid."));
			} else {
				//L16N [Settings] Error message displayed when the validity check of the key has failed.
				ComponentSettings_G_State = ComponentSettings_Private_DisplayErrorMessage(ComponentSettings_G_State, _("The validity check of this Key or Activation Code has failed, please try again."));
			}
			ComponentSettings_G_Request_PostCheckKey = ComponentSettings_Http::Destroy(ComponentSettings_G_Request_PostCheckKey);
		}
	}

	/* Activate key request */
	if (ComponentSettings_Http::IsInitialized(ComponentSettings_G_Request_PostActivateKey)) {
		ComponentSettings_G_Request_PostActivateKey = ComponentSettings_Http::Update(ComponentSettings_G_Request_PostActivateKey);
		if (!ComponentSettings_Http::IsRunning(ComponentSettings_G_Request_PostActivateKey)) {
			if (ComponentSettings_Http::IsSuccess(ComponentSettings_G_Request_PostActivateKey)) {
				//L16N [Settings] Message displayed when the key has successfully been activated.
				ComponentSettings_G_State = ComponentSettings_Private_DisplayAlertMessage(ComponentSettings_G_State, _("The Key or Activation Code has been successfully activated.\nHave fun!"));
			} else {
				//L16N [Settings] Error message displayed when the key cannot be activated.
				ComponentSettings_G_State = ComponentSettings_Private_DisplayErrorMessage(ComponentSettings_G_State, _("Failed to activate your key."));
			}
			ComponentSettings_G_Request_PostActivateKey = ComponentSettings_Http::Destroy(ComponentSettings_G_Request_PostActivateKey);
		}
	}
}
***
		
// */
// @Component end component-settings

Void LockButton(CMlFrame _Frame, Boolean _Lock) {
	ComponentNavigation_ComponentNavigation::Lock(_Frame, _Lock);
	if (_Lock) Trackmania_Button::SetTextColor(This, _Frame, <0., 0.196078, 0.156863>);
	else Trackmania_Button::SetTextColor(This, _Frame, <0.431373, 0.980392, 0.627451>);
}

Boolean LockScoresTableButton(CMlFrame _Button_ScoresTable, Boolean _Lock) {
	LockButton(_Button_ScoresTable, _Lock);
	if (_Lock) Component_UIModule_Race_ScoresTable_Visibility_SetEnabledFromMenu(False);
	return _Lock;
}

/// Update controller info
Void UpdateMenuButtonList(K_State _State) {
	ComponentMenuButtonList_SetButtons(_State.Controls.MenuButtonList_PauseMenuCampaign, ["A" => _("Select"), "PageUp" => TrackVote::C_Text_DislikeTrack, "PageDown" => TrackVote::C_Text_LikeTrack, "B" => _("Back")]);
}

Void Focus(K_State _State, CMlControl _From, CMlControl _To) {
	if (CMGame_Transition::IsInTransition(This)) return;

	if (_From != Null) {
		ComponentNavigation_ComponentNavigation::Unfocus(This, _From);
		if (Trackmania_Button::IsButton(_From)) {
			Trackmania_Button::Unfocus(This, (_From as CMlFrame));
		} else if (CMGame_ExpendableButton::IsButton(_From)) {
			CMGame_ExpendableButton::Unfocus(This, (_From as CMlFrame));
		} else if (ComponentManiapubs_IsManiapubs(_From)) {
			ComponentManiapubs_Unfocus((_From as CMlFrame));
		}
	}

	if (_To != Null) {
		ComponentNavigation_ComponentNavigation::Focus(This, _To);
		if (Trackmania_Button::IsButton(_To)) {
			Trackmania_Button::Focus(This, (_To as CMlFrame));
		} else if (CMGame_ExpendableButton::IsButton(_To)) {
			CMGame_ExpendableButton::Focus(This, (_To as CMlFrame));
			if (_To.Parent != Null && _To.Parent.DataAttributeExists("grid-row") && _To.Parent.DataAttributeGet("grid-row") == "9") {
				ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, _State.Controls.Button_UbiConnect, "down", _To.ControlId);
				ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, _State.Controls.Button_Resume, "up", _To.ControlId);
			}
		} else if (ComponentManiapubs_IsManiapubs(_To)) {
			ComponentManiapubs_Focus((_To as CMlFrame));
		}
	}
}

Boolean GroupShouldBeEnabled(K_State _State) {
	return !_State.SettingsAreDisplayed && !_State.CreditsAreDisplayed && !_State.ProfileIsDisplayed && !_State.ReportIsDisplayed;
}

K_State Private_DisplaySettings(K_State _State, Boolean _Display, Boolean _ResetSettingsCategory) {
	declare K_State State = _State;
	State.SettingsAreDisplayed = _Display;
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-campaign-pausemenu-default", GroupShouldBeEnabled(State));
	ComponentSettings_Enable(State.SettingsAreDisplayed, _ResetSettingsCategory);
	State.Controls.Frame_Settings.Visible = State.SettingsAreDisplayed;
	return State;
}

K_State Private_DisplayCredits(K_State _State, Boolean _Display) {
	declare K_State State = _State;
	State.CreditsAreDisplayed = _Display;
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-campaign-pausemenu-default", GroupShouldBeEnabled(State));
	ComponentCredits_Enable(State.CreditsAreDisplayed);
	State.Controls.Frame_Credits.Visible = State.CreditsAreDisplayed;
	return State;
}

K_State Private_DisplayProfile(K_State _State, Boolean _Display) {
	declare K_State State = _State;
	State.ProfileIsDisplayed = _Display;
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-campaign-pausemenu-default", GroupShouldBeEnabled(State));
	ComponentProfilePlayerInfo_Enable(State.ProfileIsDisplayed);
	if (State.ProfileIsDisplayed) {
		ComponentProfilePlayerInfo_SetUser(LocalUser);
	}
	State.Controls.Frame_Profile.Visible = State.ProfileIsDisplayed;
	return State;
}

K_State Private_DisplayReportSystem(K_State _State, Boolean _Display) {
	declare K_State State = _State;

	State.ReportIsDisplayed = _Display && Map != Null && Map.MapInfo != Null;
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-campaign-pausemenu-default", GroupShouldBeEnabled(State));

	if (State.ReportIsDisplayed) {
		// Report current map
		declare ReportStruct::LibStructuresReport_K_ReportData[Integer] Data =
		[
			ReportStruct::C_ReportTarget_Track => ReportStruct::LibStructuresReport_K_ReportData {
				Details = [Map.MapInfo.Name],
				Ids = [Map.MapInfo.MapUid],
				Contexts = [["From" => "InGame Solo Campaign"]]
			}
		];

		// Report current club if possible (for stadium screens and decals)
		if (DecoImage::GetClubId() != LibStructuresClub_C_ClubNullId) {
			Data[ReportStruct::C_ReportTarget_Club] =
			ReportStruct::LibStructuresReport_K_ReportData {
				Details = [DecoImage::GetClubName()],
				Ids = [TL::ToText(DecoImage::GetClubId())],
				Contexts = [["From" => "InGame Solo Campaign"]]
			};
		}

		ComponentPopUpReportSystem::SetReportTargetsData(This, State.Controls.Frame_ReportPopUp, Data);
		ComponentPopUpReportSystem::Display(This, State.Controls.Frame_ReportPopUp, True);
	}

	State.Controls.Frame_Report.Visible = State.ReportIsDisplayed;

	return State;
}

K_State DisplayComponent(K_State _State, Text _ComponentName, Boolean _Display, Boolean _ResetSettingsCategory) {
	declare K_State State = _State;

	switch (_ComponentName) {
		case C_Component_Settings: {
			if (_Display) {
				State = Private_DisplayCredits(State, False);
				State = Private_DisplayProfile(State, False);
			}
			State = Private_DisplaySettings(State, _Display, _ResetSettingsCategory);
		}
		case C_Component_Credits: {
			if (_Display) {
				State = Private_DisplaySettings(State, False, True);
				State = Private_DisplayProfile(State, False);
			}
			State = Private_DisplayCredits(State, _Display);
		}
		case C_Component_Profile: {
			if (_Display) {
				State = Private_DisplaySettings(State, False, True);
				State = Private_DisplayCredits(State, False);
			}
			State = Private_DisplayProfile(State, _Display);
		}
		case C_Component_Report: {
			State = Private_DisplayReportSystem(State, _Display);
		}
	}

	if (!_Display) {
		UpdateMenuButtonList(State);
	}

	return State;
}
K_State DisplayComponent(K_State _State, Text _ComponentName, Boolean _Display) {
	return DisplayComponent(_State, _ComponentName, _Display, True);
}

K_State Select(K_State _State, CMlControl _Control) {
	if (_Control == Null) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-resume": CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		case "button-favorite-map": Trackmania_FavoriteMapsTools_SelectFavoriteButton(Map);
		case "button-scorestable": State.ScoresTableDisplayed = Component_UIModule_Race_ScoresTable_Visibility_DisplayScoresTableFromMenu(True, Component_UIModule_Race_ScoresTable_Visibility_C_ScoresTable_PauseMenu_Solo, State.Controls.Frame_Global);
		case "button-records": {
			TMGame_Record_EnableControllerNavigation();
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		}
		case "button-restart": {
			SendCustomEvent("RaceMenuEvent_ChangeOpponents", []);
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		}
		case "button-settings": {
			State = DisplayComponent(State, C_Component_Settings, True);
		}
		case "button-report": {
			State = DisplayComponent(State, C_Component_Report, True);
		}
		case "button-ubi-connect": State.Task_ShowUbisoftConnect = Task::DestroyAndCreate(State.Task_ShowUbisoftConnect, UserMgr, UserMgr.UbisoftConnect_Show(MainUser::GetMainUserId()));
		case "button-next-map": {
			if (Map != Null && TitleControl::IsStuntMapType(Map.MapType) && PlayerData::GetPlayerTotalScore(InputPlayer) > 0) {
				Trackmania_PopUpMultiChoice::Open(This, _State.Controls.PopUpMultiChoice_LeaveStuntSession);
				State.IsNextMapRequested = True;
			} else {
				SendCustomEvent("RaceMenuEvent_NextMap", []);
				CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
			}
		}
		case "button-exit": {
			if (Map != Null && TitleControl::IsStuntMapType(Map.MapType) && PlayerData::GetPlayerTotalScore(InputPlayer) > 0) {
				Trackmania_PopUpMultiChoice::Open(This, _State.Controls.PopUpMultiChoice_LeaveStuntSession);
				State.IsNextMapRequested = False;
			} else {
				CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
			}
		}
		case "button-vote-like": TrackVote::LikeTrack(This, Map, State.Controls.Button_VoteLike, State.Controls.Button_VoteDislike);
		case "button-vote-dislike": TrackVote::DislikeTrack(This, Map, State.Controls.Button_VoteLike, State.Controls.Button_VoteDislike);
	}
	return State;
}

Void RefocusFocusedButton() {
	declare FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-campaign-pausemenu-default");
	if ((FocusedControl is CMlFrame) && Trackmania_Button::IsButton(FocusedControl as CMlFrame)) {
		Trackmania_Button::Focus(This, FocusedControl as CMlFrame);
	}
}

// Center the menu in the screen
Void UpdateMenuPosition(K_State _State, CMlFrame _Frame_ButtonsContainer) {
	declare Real Trackmania_RaceMapInfos_SizeY for UI;
	declare Real SizeY_ButtonsContainer;

	foreach (Control in _Frame_ButtonsContainer.Controls) {
		if (Control.DataAttributeExists("grid-row") && Control.Visible) {
			if (Control.DataAttributeGet("grid-row") == "9") {
				SizeY_ButtonsContainer += 15.5;
			} else {
				SizeY_ButtonsContainer += 10.0267;
			}
		}
	}

	_State.Controls.Frame_RaceMapInfos.RelativePosition_V3 = MLHelpers::SkewX(<0., 0.5 * SizeY_ButtonsContainer>, 10.);
	_Frame_ButtonsContainer.RelativePosition_V3 = MLHelpers::SkewX(<0.3, -0.5*Trackmania_RaceMapInfos_SizeY + 0.5*SizeY_ButtonsContainer>, 10.);
}

Void UpdateNextMapButton(K_State _State) {
	_State.Controls.Button_NextMap.Visible = NetShare::GetHasNextMap(Teams[0]);
	ComponentNavigation_ComponentNavigation::Lock(_State.Controls.Button_NextMap, !_State.Controls.Button_NextMap.Visible);
	if (_State.Controls.Button_NextMap.Visible) {
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, _State.Controls.Button_Resume, "up", _State.Controls.Button_NextMap.ControlId);
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, _State.Controls.Button_UbiConnect, "down", _State.Controls.Button_NextMap.ControlId);
		Trackmania_Button::SetImage(This, _State.Controls.Button_UbiConnect, "file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner.dds");
		Trackmania_Button::SetImageFocus(This, _State.Controls.Button_UbiConnect, "file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_ObtuseCorner_Focused.dds");
		CMGame_ExpendableButton::SetWidth(This, _State.Controls.Button_Exit, 48.9795, False);
		CMGame_ExpendableButton::SetTextSize(This, _State.Controls.Button_Exit, <34.2856, 10.15>);
		CMGame_ExpendableButton::SetStyles(This, _State.Controls.Button_VoteLike, ["component-trackmania-expendable-button-style-stack", "component-trackmania-expendable-button-style-in-game-menu-footer-button"]);
		_State.Controls.Button_VoteDislike.RelativePosition_V3 = <-15.4716, 0.>;
		_State.Controls.Button_VoteLike.RelativePosition_V3 = <-0.778369, 0.>;
		_State.Controls.Button_NextMap.RelativePosition_V3 = <13.9149, 0.>;
	} else {
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, _State.Controls.Button_Resume, "up", _State.Controls.Button_Exit.ControlId);
		ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, _State.Controls.Button_UbiConnect, "down", _State.Controls.Button_Exit.ControlId);
		Trackmania_Button::SetImage(This, _State.Controls.Button_UbiConnect, "file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_RoundCorner.dds");
		Trackmania_Button::SetImageFocus(This, _State.Controls.Button_UbiConnect, "file://Media/Manialinks/Nadeo/TMGame/Menus/HUD_Campaign_Button_RoundCorner_Focused.dds");
		CMGame_ExpendableButton::SetWidth(This, _State.Controls.Button_Exit, 63.6728, False);
		CMGame_ExpendableButton::SetTextSize(This, _State.Controls.Button_Exit, <44.5709, 10.15>);
		CMGame_ExpendableButton::SetStyles(This, _State.Controls.Button_VoteLike, ["component-trackmania-expendable-button-style-stack", "component-trackmania-expendable-button-style-stack-bottom", "component-trackmania-expendable-button-style-in-game-menu-footer-button"]);
		_State.Controls.Button_VoteDislike.RelativePosition_V3.X = -0.778368;
		_State.Controls.Button_VoteLike.RelativePosition_V3.X = _State.Controls.Button_VoteDislike.RelativePosition_V3.X + 14.6933;
	}
	CMGame_ExpendableButton::Unfocus(This, _State.Controls.Button_VoteLike);
	Trackmania_Button::Unfocus(This, _State.Controls.Button_UbiConnect);
	RefocusFocusedButton();
}

Void SetErrorMessage(CMlLabel _Label, CMlFrame _Frame_BgError, Text _Message) {
	_Label.Value = _Message;
	AnimMgr.Flush(_Label);
	AnimMgr.Add(_Label, "<a opacity=\"1.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.Add(_Label, "<a opacity=\"0.\" />", Now + 4000, 500, CAnimManager::EAnimManagerEasing::QuadOut);
	CMGame_ExpendableAsset::FlushAnimations(This, _Frame_BgError);
	CMGame_ExpendableAsset::AddOpacityAnimation(This, _Frame_BgError, 1., 250, CAnimManager::EAnimManagerEasing::QuadOut);
	CMGame_ExpendableAsset::AddOpacityAnimation(This, _Frame_BgError, 0., Now + 4000, 500, CAnimManager::EAnimManagerEasing::QuadOut);
}

***MainInit***
***
declare netwrite Integer Net_Campaign_PauseMenu_ZIndex for Teams[0] = 3;

declare CMlFrame Frame_Global;
declare CMlFrame Frame_ButtonsContainer;
declare CMlFrame Frame_Menu;
declare CMlFrame Frame_Maniapubs;
declare CMlFrame Button_Records;
declare CMlFrame Button_Restart;
declare CMlFrame Button_ScoresTable;

declare K_State State;
declare Grid::K_GridConfig GridConfig;

declare Boolean DisplayModule;
declare Boolean Hide321GoIsDefault;
declare Integer ForceUpdate;
declare Boolean PageWasHidden;
declare Boolean GoBackToSettings;
declare Boolean ScoresTableButtonIsLocked;
***

***MainStart***
***
Frame_Global = (Page.GetFirstChild("frame-global") as CMlFrame);
Frame_Menu <=> (Frame_Global.GetFirstChild("frame-menu") as CMlFrame);
Frame_Maniapubs <=> (Frame_Global.GetFirstChild("frame-maniapubs") as CMlFrame);
Frame_ButtonsContainer <=> (Frame_Global.GetFirstChild("frame-buttons-container") as CMlFrame);
Button_Records <=> (Frame_Global.GetFirstChild("button-records") as CMlFrame);
Button_Restart <=> (Frame_Global.GetFirstChild("button-restart") as CMlFrame);
Button_ScoresTable <=> (Frame_Global.GetFirstChild("button-scorestable") as CMlFrame);

State = K_State {
	RecordModuleAvailable = TMGame_Record_IsRecordsModuleAvailable(),
	ScoresTableDisplayed = Component_UIModule_Race_ScoresTable_Visibility_DisplayScoresTableFromMenu(False, Component_UIModule_Race_ScoresTable_Visibility_C_ScoresTable_PauseMenu_None, Null),
	Task_ShowUbisoftConnect = Task::GetEmptyTask(),
	Controls = K_Controls {
		Frame_Global = Frame_Global,
		Button_Exit = (Frame_Global.GetFirstChild("button-exit") as CMlFrame),
		Button_FavoriteMap = (Frame_Global.GetFirstChild("button-favorite-map") as CMlFrame),
		Button_NextMap = (Frame_Global.GetFirstChild("button-next-map") as CMlFrame),
		Button_Resume = (Frame_Global.GetFirstChild("button-resume") as CMlFrame),
		Button_ScoresTable = (Frame_Global.GetFirstChild("button-scorestable") as CMlFrame),
		Button_UbiConnect = (Frame_Global.GetFirstChild("button-ubi-connect") as CMlFrame),
		Button_VoteDislike = (Frame_Global.GetFirstChild("button-vote-dislike") as CMlFrame),
		Button_VoteLike = (Frame_Global.GetFirstChild("button-vote-like") as CMlFrame),
		Frame_BgError = (Frame_Global.GetFirstChild("frame-bg-error") as CMlFrame),
		Frame_Credits = (Frame_Global.GetFirstChild("frame-credits") as CMlFrame),
		Frame_LoadingSpinner = (Frame_Global.GetFirstChild("frame-loading-spinner") as CMlFrame),
		Frame_Profile = (Frame_Global.GetFirstChild("frame-profile") as CMlFrame),
		Frame_RaceMapInfos = (Frame_Global.GetFirstChild("frame-race-map-infos") as CMlFrame),
		Frame_Report = (Frame_Global.GetFirstChild("frame-report-system") as CMlFrame),
		Frame_ReportPopUp = (Frame_Global.GetFirstChild("frame-report-system-pause-menu-campaign") as CMlFrame),
		Frame_Settings = (Frame_Global.GetFirstChild("frame-settings") as CMlFrame),
		Label_Error = (Frame_Global.GetFirstChild("label-error") as CMlLabel),
		MenuButtonList_PauseMenuCampaign = (Frame_Global.GetFirstChild("menubuttonlist-pause-menu-campaign") as CMlFrame),
		PopUpMultiChoice_LeaveStuntSession = (Frame_Global.GetFirstChild("popupmultichoice-leave-stunt-session") as CMlFrame)
	}
};

DisplayModule = State.Controls.Frame_Global.Visible;
Hide321GoIsDefault = True;
ForceUpdate = -123;
PageWasHidden = !PageIsVisible;
GoBackToSettings = False;
GridConfig.fromjson("""{"Size":95.7139,"Padding":0,"Gutter":0,"Direction":3,"Columns":{"0":{"Size":10.0267,"Align":1},"1":{"Size":10.0267,"Align":1},"2":{"Size":10.0267,"Align":1},"3":{"Size":10.0267,"Align":1},"4":{"Size":10.0267,"Align":1},"5":{"Size":10.0267,"Align":1},"6":{"Size":10.0267,"Align":1},"7":{"Size":10.0267,"Align":1},"8":{"Size":1,"Align":1},"9":{"Size":14.5,"Align":1}}}""");

ScoresTableButtonIsLocked = LockScoresTableButton(
	State.Controls.Button_ScoresTable,
	PauseMenuOnline_IsScoresTableButtonLocked()
);

Frame_Global.ZIndex = 1.*Net_Campaign_PauseMenu_ZIndex;
ComponentNavigation_ComponentNavigation::UseLocalEvents(This, True);
ComponentSettings_UseLocalEvents(True);
ComponentSettings_EnableCredits(True);
ComponentSettings_EnableProfile(True);
ComponentCredits_UseLocalEvents(True);
ComponentProfilePlayerInfo_UseLocalEvents(True);
TMGame_Record_DisableControllerNavigation();
ComponentRaceMapInfos_SetDisplayed(State.Controls.Frame_Global.Visible);
Trackmania_Button::SetVisibilityAndNavigation(Button_Records, State.RecordModuleAvailable);
Grid::Update(GridConfig, AnimMgr, Frame_ButtonsContainer, 10., False, False);
UpdateNextMapButton(State);
UpdateMenuButtonList(State);
UpdateMenuPosition(State, Frame_ButtonsContainer);
***

***MainLoop***
***
if (IsInGameMenuDisplayed && !EnableMenuNavigationInputs) {
	EnableMenuNavigation(True, False, False, Null, 2);
	Focus(State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-campaign-pausemenu-default"), State.Controls.Button_Resume);
	CMGame_MenuSounds::SetSoundBalanceState(This, CMGame_MenuSounds::C_PauseMenu_State, 150);
} else if (!IsInGameMenuDisplayed && EnableMenuNavigationInputs) {
	EnableMenuNavigation(False, False, False, Null, 2);
	Focus(State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-campaign-pausemenu-default"), State.Controls.Button_Resume);
	CMGame_MenuSounds::SetSoundBalanceState(This, CMGame_MenuSounds::C_Playing_State, 150);
}

if (PageIsVisible) {
	if (!ClientUI.OverlayHide321Go) {
		ClientUI.OverlayHide321Go = True;
		Hide321GoIsDefault = False;
	}

	if (PageWasHidden) {
		PageWasHidden = False;

		// Update like and dislike buttons from API
		TrackVote::UpdateLikeAndDislikeButtonsWithLastestVote(This, Map, State.Controls.Button_VoteLike, State.Controls.Button_VoteDislike);

		// Display carousel if maniapubs are available
		if (
			UserMgr != Null && UserMgr.MainUserProfile != Null && UserMgr.MainUserProfile.Adverts_Enabled &&
			ComponentManiapubs_IsManiapubsAvailable()
		) {
			ComponentManiapubs_Update(Frame_Maniapubs);
			Frame_Menu.RelativePosition_V3.X = -75.;
			Frame_Maniapubs.Show();
		} else {
			Frame_Menu.RelativePosition_V3.X = 0.;
			Frame_Maniapubs.Hide();
		}

		// Check if the favorite attribute of current map updated while the menu was hidden
		Trackmania_FavoriteMapsTools_UdpateFavoriteButton(
			State.Controls.Button_FavoriteMap,
			State.Controls.Frame_LoadingSpinner,
			State.Controls.Frame_BgError,
			State.Controls.Label_Error,
			NetShare::GetMap(Teams[0]).Uid
		);
	}

	declare Owner <=> MV_Utils::GetOwner(This);
	if (Owner != Null) {
		declare netread Boolean Net_Campaign_PauseMenu_IsVisible for Owner;
		if (DisplayModule != Net_Campaign_PauseMenu_IsVisible) {
			DisplayModule = Net_Campaign_PauseMenu_IsVisible;
			State.Controls.Frame_Global.Visible = Net_Campaign_PauseMenu_IsVisible;
			ComponentRaceMapInfos_SetDisplayed(State.Controls.Frame_Global.Visible);
		}
		if (State.Controls.Button_NextMap.Visible != NetShare::GetHasNextMap(Teams[0])) {
			UpdateNextMapButton(State);
			Grid::Update(GridConfig, AnimMgr, Frame_ButtonsContainer, 10., False, False);
			UpdateMenuPosition(State, Frame_ButtonsContainer);
		}
	}

	if (ScoresTableButtonIsLocked != PauseMenuOnline_IsScoresTableButtonLocked()) {
		ScoresTableButtonIsLocked = LockScoresTableButton(
			State.Controls.Button_ScoresTable,
			PauseMenuOnline_IsScoresTableButtonLocked()
		);
	}

	if (Component_UIModule_Race_ScoresTable_Visibility_GetSourceMenu() == Component_UIModule_Race_ScoresTable_Visibility_C_ScoresTable_PauseMenu_Solo && State.ScoresTableDisplayed != Component_UIModule_Race_ScoresTable_Visibility_EnabledFromMenu()) {
		State.ScoresTableDisplayed = Component_UIModule_Race_ScoresTable_Visibility_DisplayScoresTableFromMenu(Component_UIModule_Race_ScoresTable_Visibility_EnabledFromMenu(), Component_UIModule_Race_ScoresTable_Visibility_C_ScoresTable_PauseMenu_Solo, State.Controls.Frame_Global);
	}

	if (State.RecordModuleAvailable != TMGame_Record_IsRecordsModuleAvailable()) {
		State.RecordModuleAvailable = TMGame_Record_IsRecordsModuleAvailable();
		Trackmania_Button::SetVisibilityAndNavigation(Button_Records, State.RecordModuleAvailable);
		Grid::Update(GridConfig, AnimMgr, Frame_ButtonsContainer, 10., False, False);
		UpdateMenuPosition(State, Frame_ButtonsContainer);
	}

	if (ForceUpdate != NetShare::GetForceUpdate(Teams[0])) {
		ForceUpdate = NetShare::GetForceUpdate(Teams[0]);
		declare CurrentCampaign = NetShare::GetCampaign(Teams[0]);

		Trackmania_FavoriteMapsTools_UdpateFavoriteButton(
			State.Controls.Button_FavoriteMap,
			State.Controls.Frame_LoadingSpinner,
			State.Controls.Frame_BgError,
			State.Controls.Label_Error,
			NetShare::GetMap(Teams[0]).Uid
		);
		if (!Trackmania_UserStore::IsOfflineMode()) Trackmania_MapStore::Action_GetMap(This, NetShare::GetMap(Teams[0]).Uid);

		UpdateNextMapButton(State);
		Trackmania_Button::SetVisibilityAndNavigation(Button_Restart, CurrentCampaign.SeasonUid != "" || (Map != Null && !TitleControl::IsRaceMapType(Map.MapType)));
		if (Map != Null && !TitleControl::IsRaceMapType(Map.MapType)) {
			Trackmania_Button::SetValue(This, Button_Restart, "Restart");
		} else {
			Trackmania_Button::SetValue(This, Button_Restart, "Change opponents");
		}

		Grid::Update(GridConfig, AnimMgr, Frame_ButtonsContainer, 10., False, False);
		UpdateMenuPosition(State, Frame_ButtonsContainer);
		Trackmania_Button::Unfocus(This, State.Controls.Button_Resume);
		RefocusFocusedButton();
	}

	// Open Ubisoft Connect Overlay task
	if (Task::IsInitialized(State.Task_ShowUbisoftConnect)) {
		State.Task_ShowUbisoftConnect = Task::Update(State.Task_ShowUbisoftConnect);
		if (!Task::IsRunning(State.Task_ShowUbisoftConnect)) {
			if (!Task::IsSuccess(State.Task_ShowUbisoftConnect)) {
				SetErrorMessage(
					State.Controls.Label_Error,
					State.Controls.Frame_BgError,
					TL::Compose(
						"%1 (%2)",
						//L16N Error while opening Ubisoft Connect overlay.
						_("Error while opening Ubisoft Connect"),
						Task::GetCustomError(State.Task_ShowUbisoftConnect).Code
					)
				);
			}
			State.Task_ShowUbisoftConnect = Task::Destroy(State.Task_ShowUbisoftConnect);
		}
	}

	if (State.Controls.Frame_Global.Visible) {
		foreach (Event in ComponentNavigation_ComponentNavigation::GetPendingEvents(This)) {
			switch (Event.Type) {
				case ComponentNavigation_ComponentNavigation::C_EventType_NavigateInput: {
					if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-campaign-pausemenu-default")) {
						switch (Event.Input) {
							case CMlScriptEvent::EMenuNavAction::Select: State = Select(State, Event.To);
							case CMlScriptEvent::EMenuNavAction::PageUp: if (!Event.IsActionAutoRepeat) State = Select(State, State.Controls.Button_VoteDislike);
							case CMlScriptEvent::EMenuNavAction::PageDown: if (!Event.IsActionAutoRepeat) State = Select(State, State.Controls.Button_VoteLike);
							case CMlScriptEvent::EMenuNavAction::Cancel, CMlScriptEvent::EMenuNavAction::AppMenu: {
								CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
							}
							default: Focus(State, Event.From, Event.To);
						}
					}
				}
				case ComponentNavigation_ComponentNavigation::C_EventType_NavigateMouse: {
					if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-campaign-pausemenu-default")) {
						switch (Event.Mouse) {
							case CMlScriptEvent::Type::MouseClick: State = Select(State, Event.To);
							case CMlScriptEvent::Type::MouseOver: Focus(State, Event.From, Event.To);
						}
					}
				}
			}
		}

		// Favorite map event
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::PluginCustomEvent: {
					if (Event.CustomEventType == Trackmania_MapStore::C_Event_CurrentMapUpdated) {
						Trackmania_FavoriteMapsTools_UdpateFavoriteButton(
							State.Controls.Button_FavoriteMap,
							State.Controls.Frame_LoadingSpinner,
							State.Controls.Frame_BgError,
							State.Controls.Label_Error,
							NetShare::GetMap(Teams[0]).Uid
						);
					}
				}
			}
		}

		if (Owner == Null && DisplayModule) {
			DisplayModule = False;
			State.Controls.Frame_Global.Visible = DisplayModule;
			ComponentRaceMapInfos_SetDisplayed(State.Controls.Frame_Global.Visible);
		}

		foreach (Event in ComponentSettings_PendingEvents) {
			switch (Event.Type) {
				case ComponentSettings_C_EventType_Back: {
					State = DisplayComponent(State, C_Component_Settings, False);
				}
				case ComponentSettings_C_EventType_OpenCredits: {
					GoBackToSettings = True;
					State = DisplayComponent(State, C_Component_Credits, True);
				}
				case ComponentSettings_C_EventType_OpenProfile: {
					GoBackToSettings = True;
					State = DisplayComponent(State, C_Component_Profile, True);
				}
			}
		}

		foreach (Event in ComponentCredits_PendingEvents) {
			switch (Event.Type) {
				case ComponentCredits_C_EventType_CloseCredits: {
					if (GoBackToSettings) {
						GoBackToSettings = False;
						State = DisplayComponent(State, C_Component_Settings, True, False);
					} else {
						State = DisplayComponent(State, C_Component_Credits, False);
					}
				}
			}
		}

		foreach (Event in ComponentProfilePlayerInfo_PendingEvents) {
			switch (Event.Type) {
				case ComponentProfilePlayerInfo_C_EventType_Close: {
					if (GoBackToSettings) {
						GoBackToSettings = False;
						State = DisplayComponent(State, C_Component_Settings, True, False);
					} else {
						State = DisplayComponent(State, C_Component_Profile, False);
					}
				}
			}
		}

		foreach (Event in ComponentPopUpReportSystem::GetPendingEvents(This)) {
			switch (Event.Type) {
				case ComponentPopUpReportSystem::C_EventType_Close: {
					State = DisplayComponent(State, C_Component_Report, False);
				}
			}
		}

		// Manage PopUpMultiChoice events
		foreach (Event in Trackmania_PopUpMultiChoice::GetPendingEvents(This)) {
			if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_LeaveStuntSession.Id) {
				switch (Event.Type) {
					case Trackmania_PopUpMultiChoice::C_EventType_Display: {
						ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-campaign-pausemenu-default", !Trackmania_PopUpMultiChoice::IsDisplayed(Event.PopUpMultiChoice));
					}
					case Trackmania_PopUpMultiChoice::C_EventType_Select: {
						switch (Event.SelectedIndex) {
							case 1: {
								if (State.IsNextMapRequested) {
									SendCustomEvent("RaceMenuEvent_NextMap", []);
									CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
								} else {
									CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
								}
							}
						}
					}
				}
			}
		}
	}
} else {
	if (!PageWasHidden) PageWasHidden = True;
	if (!Hide321GoIsDefault) {
		ClientUI.OverlayHide321Go = False;
		Hide321GoIsDefault = True;
	}
}

// The pause menu is opened and capturing inputs but not visible
// Close it to avoid being stuck
// This can happen if the `PauseMenu` UI module is hidden
// but the player is allowed to open the pause menu anymay
if (IsInGameMenuDisplayed && EnableMenuNavigationInputs && PageIsVisible && !State.Controls.Frame_Global.Visible && !State.ScoresTableDisplayed) {
	CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
}
***


Void ManiaView_DoNothing() {}

main() {
	+++MainInit+++
	+++MainStart+++
	while (True) {
		yield;
		+++MainLoop+++
	}
	+++MainEnd+++
}
--></script>
</manialink>
